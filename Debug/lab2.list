
lab2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004124  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001d8  080042d4  080042d4  000142d4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080044ac  080044ac  00020094  2**0
                  CONTENTS
  4 .ARM          00000008  080044ac  080044ac  000144ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080044b4  080044b4  00020094  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080044b4  080044b4  000144b4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080044b8  080044b8  000144b8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000094  20000000  080044bc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020094  2**0
                  CONTENTS
 10 .bss          000003b4  20000094  20000094  00020094  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000448  20000448  00020094  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020094  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000a532  00000000  00000000  000200c4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002310  00000000  00000000  0002a5f6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000008a8  00000000  00000000  0002c908  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 000007a0  00000000  00000000  0002d1b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000235c6  00000000  00000000  0002d950  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000c4f8  00000000  00000000  00050f16  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000cfd95  00000000  00000000  0005d40e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  0012d1a3  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00002508  00000000  00000000  0012d1f4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	20000094 	.word	0x20000094
 80001cc:	00000000 	.word	0x00000000
 80001d0:	080042bc 	.word	0x080042bc

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	20000098 	.word	0x20000098
 80001ec:	080042bc 	.word	0x080042bc

080001f0 <strcmp>:
 80001f0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001f4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001f8:	2a01      	cmp	r2, #1
 80001fa:	bf28      	it	cs
 80001fc:	429a      	cmpcs	r2, r3
 80001fe:	d0f7      	beq.n	80001f0 <strcmp>
 8000200:	1ad0      	subs	r0, r2, r3
 8000202:	4770      	bx	lr
	...

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_uldivmod>:
 80002b0:	b953      	cbnz	r3, 80002c8 <__aeabi_uldivmod+0x18>
 80002b2:	b94a      	cbnz	r2, 80002c8 <__aeabi_uldivmod+0x18>
 80002b4:	2900      	cmp	r1, #0
 80002b6:	bf08      	it	eq
 80002b8:	2800      	cmpeq	r0, #0
 80002ba:	bf1c      	itt	ne
 80002bc:	f04f 31ff 	movne.w	r1, #4294967295
 80002c0:	f04f 30ff 	movne.w	r0, #4294967295
 80002c4:	f000 b974 	b.w	80005b0 <__aeabi_idiv0>
 80002c8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002cc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002d0:	f000 f806 	bl	80002e0 <__udivmoddi4>
 80002d4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002d8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002dc:	b004      	add	sp, #16
 80002de:	4770      	bx	lr

080002e0 <__udivmoddi4>:
 80002e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002e4:	9d08      	ldr	r5, [sp, #32]
 80002e6:	4604      	mov	r4, r0
 80002e8:	468e      	mov	lr, r1
 80002ea:	2b00      	cmp	r3, #0
 80002ec:	d14d      	bne.n	800038a <__udivmoddi4+0xaa>
 80002ee:	428a      	cmp	r2, r1
 80002f0:	4694      	mov	ip, r2
 80002f2:	d969      	bls.n	80003c8 <__udivmoddi4+0xe8>
 80002f4:	fab2 f282 	clz	r2, r2
 80002f8:	b152      	cbz	r2, 8000310 <__udivmoddi4+0x30>
 80002fa:	fa01 f302 	lsl.w	r3, r1, r2
 80002fe:	f1c2 0120 	rsb	r1, r2, #32
 8000302:	fa20 f101 	lsr.w	r1, r0, r1
 8000306:	fa0c fc02 	lsl.w	ip, ip, r2
 800030a:	ea41 0e03 	orr.w	lr, r1, r3
 800030e:	4094      	lsls	r4, r2
 8000310:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000314:	0c21      	lsrs	r1, r4, #16
 8000316:	fbbe f6f8 	udiv	r6, lr, r8
 800031a:	fa1f f78c 	uxth.w	r7, ip
 800031e:	fb08 e316 	mls	r3, r8, r6, lr
 8000322:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000326:	fb06 f107 	mul.w	r1, r6, r7
 800032a:	4299      	cmp	r1, r3
 800032c:	d90a      	bls.n	8000344 <__udivmoddi4+0x64>
 800032e:	eb1c 0303 	adds.w	r3, ip, r3
 8000332:	f106 30ff 	add.w	r0, r6, #4294967295
 8000336:	f080 811f 	bcs.w	8000578 <__udivmoddi4+0x298>
 800033a:	4299      	cmp	r1, r3
 800033c:	f240 811c 	bls.w	8000578 <__udivmoddi4+0x298>
 8000340:	3e02      	subs	r6, #2
 8000342:	4463      	add	r3, ip
 8000344:	1a5b      	subs	r3, r3, r1
 8000346:	b2a4      	uxth	r4, r4
 8000348:	fbb3 f0f8 	udiv	r0, r3, r8
 800034c:	fb08 3310 	mls	r3, r8, r0, r3
 8000350:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000354:	fb00 f707 	mul.w	r7, r0, r7
 8000358:	42a7      	cmp	r7, r4
 800035a:	d90a      	bls.n	8000372 <__udivmoddi4+0x92>
 800035c:	eb1c 0404 	adds.w	r4, ip, r4
 8000360:	f100 33ff 	add.w	r3, r0, #4294967295
 8000364:	f080 810a 	bcs.w	800057c <__udivmoddi4+0x29c>
 8000368:	42a7      	cmp	r7, r4
 800036a:	f240 8107 	bls.w	800057c <__udivmoddi4+0x29c>
 800036e:	4464      	add	r4, ip
 8000370:	3802      	subs	r0, #2
 8000372:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000376:	1be4      	subs	r4, r4, r7
 8000378:	2600      	movs	r6, #0
 800037a:	b11d      	cbz	r5, 8000384 <__udivmoddi4+0xa4>
 800037c:	40d4      	lsrs	r4, r2
 800037e:	2300      	movs	r3, #0
 8000380:	e9c5 4300 	strd	r4, r3, [r5]
 8000384:	4631      	mov	r1, r6
 8000386:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800038a:	428b      	cmp	r3, r1
 800038c:	d909      	bls.n	80003a2 <__udivmoddi4+0xc2>
 800038e:	2d00      	cmp	r5, #0
 8000390:	f000 80ef 	beq.w	8000572 <__udivmoddi4+0x292>
 8000394:	2600      	movs	r6, #0
 8000396:	e9c5 0100 	strd	r0, r1, [r5]
 800039a:	4630      	mov	r0, r6
 800039c:	4631      	mov	r1, r6
 800039e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003a2:	fab3 f683 	clz	r6, r3
 80003a6:	2e00      	cmp	r6, #0
 80003a8:	d14a      	bne.n	8000440 <__udivmoddi4+0x160>
 80003aa:	428b      	cmp	r3, r1
 80003ac:	d302      	bcc.n	80003b4 <__udivmoddi4+0xd4>
 80003ae:	4282      	cmp	r2, r0
 80003b0:	f200 80f9 	bhi.w	80005a6 <__udivmoddi4+0x2c6>
 80003b4:	1a84      	subs	r4, r0, r2
 80003b6:	eb61 0303 	sbc.w	r3, r1, r3
 80003ba:	2001      	movs	r0, #1
 80003bc:	469e      	mov	lr, r3
 80003be:	2d00      	cmp	r5, #0
 80003c0:	d0e0      	beq.n	8000384 <__udivmoddi4+0xa4>
 80003c2:	e9c5 4e00 	strd	r4, lr, [r5]
 80003c6:	e7dd      	b.n	8000384 <__udivmoddi4+0xa4>
 80003c8:	b902      	cbnz	r2, 80003cc <__udivmoddi4+0xec>
 80003ca:	deff      	udf	#255	; 0xff
 80003cc:	fab2 f282 	clz	r2, r2
 80003d0:	2a00      	cmp	r2, #0
 80003d2:	f040 8092 	bne.w	80004fa <__udivmoddi4+0x21a>
 80003d6:	eba1 010c 	sub.w	r1, r1, ip
 80003da:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003de:	fa1f fe8c 	uxth.w	lr, ip
 80003e2:	2601      	movs	r6, #1
 80003e4:	0c20      	lsrs	r0, r4, #16
 80003e6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003ea:	fb07 1113 	mls	r1, r7, r3, r1
 80003ee:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003f2:	fb0e f003 	mul.w	r0, lr, r3
 80003f6:	4288      	cmp	r0, r1
 80003f8:	d908      	bls.n	800040c <__udivmoddi4+0x12c>
 80003fa:	eb1c 0101 	adds.w	r1, ip, r1
 80003fe:	f103 38ff 	add.w	r8, r3, #4294967295
 8000402:	d202      	bcs.n	800040a <__udivmoddi4+0x12a>
 8000404:	4288      	cmp	r0, r1
 8000406:	f200 80cb 	bhi.w	80005a0 <__udivmoddi4+0x2c0>
 800040a:	4643      	mov	r3, r8
 800040c:	1a09      	subs	r1, r1, r0
 800040e:	b2a4      	uxth	r4, r4
 8000410:	fbb1 f0f7 	udiv	r0, r1, r7
 8000414:	fb07 1110 	mls	r1, r7, r0, r1
 8000418:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800041c:	fb0e fe00 	mul.w	lr, lr, r0
 8000420:	45a6      	cmp	lr, r4
 8000422:	d908      	bls.n	8000436 <__udivmoddi4+0x156>
 8000424:	eb1c 0404 	adds.w	r4, ip, r4
 8000428:	f100 31ff 	add.w	r1, r0, #4294967295
 800042c:	d202      	bcs.n	8000434 <__udivmoddi4+0x154>
 800042e:	45a6      	cmp	lr, r4
 8000430:	f200 80bb 	bhi.w	80005aa <__udivmoddi4+0x2ca>
 8000434:	4608      	mov	r0, r1
 8000436:	eba4 040e 	sub.w	r4, r4, lr
 800043a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800043e:	e79c      	b.n	800037a <__udivmoddi4+0x9a>
 8000440:	f1c6 0720 	rsb	r7, r6, #32
 8000444:	40b3      	lsls	r3, r6
 8000446:	fa22 fc07 	lsr.w	ip, r2, r7
 800044a:	ea4c 0c03 	orr.w	ip, ip, r3
 800044e:	fa20 f407 	lsr.w	r4, r0, r7
 8000452:	fa01 f306 	lsl.w	r3, r1, r6
 8000456:	431c      	orrs	r4, r3
 8000458:	40f9      	lsrs	r1, r7
 800045a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800045e:	fa00 f306 	lsl.w	r3, r0, r6
 8000462:	fbb1 f8f9 	udiv	r8, r1, r9
 8000466:	0c20      	lsrs	r0, r4, #16
 8000468:	fa1f fe8c 	uxth.w	lr, ip
 800046c:	fb09 1118 	mls	r1, r9, r8, r1
 8000470:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000474:	fb08 f00e 	mul.w	r0, r8, lr
 8000478:	4288      	cmp	r0, r1
 800047a:	fa02 f206 	lsl.w	r2, r2, r6
 800047e:	d90b      	bls.n	8000498 <__udivmoddi4+0x1b8>
 8000480:	eb1c 0101 	adds.w	r1, ip, r1
 8000484:	f108 3aff 	add.w	sl, r8, #4294967295
 8000488:	f080 8088 	bcs.w	800059c <__udivmoddi4+0x2bc>
 800048c:	4288      	cmp	r0, r1
 800048e:	f240 8085 	bls.w	800059c <__udivmoddi4+0x2bc>
 8000492:	f1a8 0802 	sub.w	r8, r8, #2
 8000496:	4461      	add	r1, ip
 8000498:	1a09      	subs	r1, r1, r0
 800049a:	b2a4      	uxth	r4, r4
 800049c:	fbb1 f0f9 	udiv	r0, r1, r9
 80004a0:	fb09 1110 	mls	r1, r9, r0, r1
 80004a4:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80004a8:	fb00 fe0e 	mul.w	lr, r0, lr
 80004ac:	458e      	cmp	lr, r1
 80004ae:	d908      	bls.n	80004c2 <__udivmoddi4+0x1e2>
 80004b0:	eb1c 0101 	adds.w	r1, ip, r1
 80004b4:	f100 34ff 	add.w	r4, r0, #4294967295
 80004b8:	d26c      	bcs.n	8000594 <__udivmoddi4+0x2b4>
 80004ba:	458e      	cmp	lr, r1
 80004bc:	d96a      	bls.n	8000594 <__udivmoddi4+0x2b4>
 80004be:	3802      	subs	r0, #2
 80004c0:	4461      	add	r1, ip
 80004c2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80004c6:	fba0 9402 	umull	r9, r4, r0, r2
 80004ca:	eba1 010e 	sub.w	r1, r1, lr
 80004ce:	42a1      	cmp	r1, r4
 80004d0:	46c8      	mov	r8, r9
 80004d2:	46a6      	mov	lr, r4
 80004d4:	d356      	bcc.n	8000584 <__udivmoddi4+0x2a4>
 80004d6:	d053      	beq.n	8000580 <__udivmoddi4+0x2a0>
 80004d8:	b15d      	cbz	r5, 80004f2 <__udivmoddi4+0x212>
 80004da:	ebb3 0208 	subs.w	r2, r3, r8
 80004de:	eb61 010e 	sbc.w	r1, r1, lr
 80004e2:	fa01 f707 	lsl.w	r7, r1, r7
 80004e6:	fa22 f306 	lsr.w	r3, r2, r6
 80004ea:	40f1      	lsrs	r1, r6
 80004ec:	431f      	orrs	r7, r3
 80004ee:	e9c5 7100 	strd	r7, r1, [r5]
 80004f2:	2600      	movs	r6, #0
 80004f4:	4631      	mov	r1, r6
 80004f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004fa:	f1c2 0320 	rsb	r3, r2, #32
 80004fe:	40d8      	lsrs	r0, r3
 8000500:	fa0c fc02 	lsl.w	ip, ip, r2
 8000504:	fa21 f303 	lsr.w	r3, r1, r3
 8000508:	4091      	lsls	r1, r2
 800050a:	4301      	orrs	r1, r0
 800050c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000510:	fa1f fe8c 	uxth.w	lr, ip
 8000514:	fbb3 f0f7 	udiv	r0, r3, r7
 8000518:	fb07 3610 	mls	r6, r7, r0, r3
 800051c:	0c0b      	lsrs	r3, r1, #16
 800051e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000522:	fb00 f60e 	mul.w	r6, r0, lr
 8000526:	429e      	cmp	r6, r3
 8000528:	fa04 f402 	lsl.w	r4, r4, r2
 800052c:	d908      	bls.n	8000540 <__udivmoddi4+0x260>
 800052e:	eb1c 0303 	adds.w	r3, ip, r3
 8000532:	f100 38ff 	add.w	r8, r0, #4294967295
 8000536:	d22f      	bcs.n	8000598 <__udivmoddi4+0x2b8>
 8000538:	429e      	cmp	r6, r3
 800053a:	d92d      	bls.n	8000598 <__udivmoddi4+0x2b8>
 800053c:	3802      	subs	r0, #2
 800053e:	4463      	add	r3, ip
 8000540:	1b9b      	subs	r3, r3, r6
 8000542:	b289      	uxth	r1, r1
 8000544:	fbb3 f6f7 	udiv	r6, r3, r7
 8000548:	fb07 3316 	mls	r3, r7, r6, r3
 800054c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000550:	fb06 f30e 	mul.w	r3, r6, lr
 8000554:	428b      	cmp	r3, r1
 8000556:	d908      	bls.n	800056a <__udivmoddi4+0x28a>
 8000558:	eb1c 0101 	adds.w	r1, ip, r1
 800055c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000560:	d216      	bcs.n	8000590 <__udivmoddi4+0x2b0>
 8000562:	428b      	cmp	r3, r1
 8000564:	d914      	bls.n	8000590 <__udivmoddi4+0x2b0>
 8000566:	3e02      	subs	r6, #2
 8000568:	4461      	add	r1, ip
 800056a:	1ac9      	subs	r1, r1, r3
 800056c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000570:	e738      	b.n	80003e4 <__udivmoddi4+0x104>
 8000572:	462e      	mov	r6, r5
 8000574:	4628      	mov	r0, r5
 8000576:	e705      	b.n	8000384 <__udivmoddi4+0xa4>
 8000578:	4606      	mov	r6, r0
 800057a:	e6e3      	b.n	8000344 <__udivmoddi4+0x64>
 800057c:	4618      	mov	r0, r3
 800057e:	e6f8      	b.n	8000372 <__udivmoddi4+0x92>
 8000580:	454b      	cmp	r3, r9
 8000582:	d2a9      	bcs.n	80004d8 <__udivmoddi4+0x1f8>
 8000584:	ebb9 0802 	subs.w	r8, r9, r2
 8000588:	eb64 0e0c 	sbc.w	lr, r4, ip
 800058c:	3801      	subs	r0, #1
 800058e:	e7a3      	b.n	80004d8 <__udivmoddi4+0x1f8>
 8000590:	4646      	mov	r6, r8
 8000592:	e7ea      	b.n	800056a <__udivmoddi4+0x28a>
 8000594:	4620      	mov	r0, r4
 8000596:	e794      	b.n	80004c2 <__udivmoddi4+0x1e2>
 8000598:	4640      	mov	r0, r8
 800059a:	e7d1      	b.n	8000540 <__udivmoddi4+0x260>
 800059c:	46d0      	mov	r8, sl
 800059e:	e77b      	b.n	8000498 <__udivmoddi4+0x1b8>
 80005a0:	3b02      	subs	r3, #2
 80005a2:	4461      	add	r1, ip
 80005a4:	e732      	b.n	800040c <__udivmoddi4+0x12c>
 80005a6:	4630      	mov	r0, r6
 80005a8:	e709      	b.n	80003be <__udivmoddi4+0xde>
 80005aa:	4464      	add	r4, ip
 80005ac:	3802      	subs	r0, #2
 80005ae:	e742      	b.n	8000436 <__udivmoddi4+0x156>

080005b0 <__aeabi_idiv0>:
 80005b0:	4770      	bx	lr
 80005b2:	bf00      	nop

080005b4 <buffer_push>:
int8_t ptr_in = 0;
int8_t ptr_out = 0;

char buffer[BUFSIZE];

void buffer_push(char value) {
 80005b4:	b480      	push	{r7}
 80005b6:	b083      	sub	sp, #12
 80005b8:	af00      	add	r7, sp, #0
 80005ba:	4603      	mov	r3, r0
 80005bc:	71fb      	strb	r3, [r7, #7]
    buffer[ptr_in++] = value;
 80005be:	4b09      	ldr	r3, [pc, #36]	; (80005e4 <buffer_push+0x30>)
 80005c0:	f993 2000 	ldrsb.w	r2, [r3]
 80005c4:	b2d3      	uxtb	r3, r2
 80005c6:	3301      	adds	r3, #1
 80005c8:	b2db      	uxtb	r3, r3
 80005ca:	b259      	sxtb	r1, r3
 80005cc:	4b05      	ldr	r3, [pc, #20]	; (80005e4 <buffer_push+0x30>)
 80005ce:	7019      	strb	r1, [r3, #0]
 80005d0:	4611      	mov	r1, r2
 80005d2:	4a05      	ldr	r2, [pc, #20]	; (80005e8 <buffer_push+0x34>)
 80005d4:	79fb      	ldrb	r3, [r7, #7]
 80005d6:	5453      	strb	r3, [r2, r1]
    if (ptr_in >= BUFSIZE) ptr_in = 0;
}
 80005d8:	bf00      	nop
 80005da:	370c      	adds	r7, #12
 80005dc:	46bd      	mov	sp, r7
 80005de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005e2:	4770      	bx	lr
 80005e4:	200000b0 	.word	0x200000b0
 80005e8:	200000b4 	.word	0x200000b4

080005ec <buffer_clear>:

char buffer_get() {
    return buffer[ptr_out];
}

void buffer_clear() {
 80005ec:	b480      	push	{r7}
 80005ee:	af00      	add	r7, sp, #0
    ptr_in = 0;
 80005f0:	4b05      	ldr	r3, [pc, #20]	; (8000608 <buffer_clear+0x1c>)
 80005f2:	2200      	movs	r2, #0
 80005f4:	701a      	strb	r2, [r3, #0]
    ptr_out = 0;
 80005f6:	4b05      	ldr	r3, [pc, #20]	; (800060c <buffer_clear+0x20>)
 80005f8:	2200      	movs	r2, #0
 80005fa:	701a      	strb	r2, [r3, #0]
}
 80005fc:	bf00      	nop
 80005fe:	46bd      	mov	sp, r7
 8000600:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000604:	4770      	bx	lr
 8000606:	bf00      	nop
 8000608:	200000b0 	.word	0x200000b0
 800060c:	200000b1 	.word	0x200000b1

08000610 <buffer_elements>:

int16_t buffer_elements() {
 8000610:	b480      	push	{r7}
 8000612:	af00      	add	r7, sp, #0
    if (ptr_in >= ptr_out)
 8000614:	4b12      	ldr	r3, [pc, #72]	; (8000660 <buffer_elements+0x50>)
 8000616:	f993 2000 	ldrsb.w	r2, [r3]
 800061a:	4b12      	ldr	r3, [pc, #72]	; (8000664 <buffer_elements+0x54>)
 800061c:	f993 3000 	ldrsb.w	r3, [r3]
 8000620:	429a      	cmp	r2, r3
 8000622:	db0a      	blt.n	800063a <buffer_elements+0x2a>
        return (ptr_in - ptr_out);
 8000624:	4b0e      	ldr	r3, [pc, #56]	; (8000660 <buffer_elements+0x50>)
 8000626:	f993 3000 	ldrsb.w	r3, [r3]
 800062a:	b21a      	sxth	r2, r3
 800062c:	4b0d      	ldr	r3, [pc, #52]	; (8000664 <buffer_elements+0x54>)
 800062e:	f993 3000 	ldrsb.w	r3, [r3]
 8000632:	b21b      	sxth	r3, r3
 8000634:	1ad3      	subs	r3, r2, r3
 8000636:	b21b      	sxth	r3, r3
 8000638:	e00d      	b.n	8000656 <buffer_elements+0x46>
    else
        return ((BUFSIZE - ptr_out) + ptr_in);
 800063a:	4b09      	ldr	r3, [pc, #36]	; (8000660 <buffer_elements+0x50>)
 800063c:	f993 3000 	ldrsb.w	r3, [r3]
 8000640:	b29a      	uxth	r2, r3
 8000642:	4b08      	ldr	r3, [pc, #32]	; (8000664 <buffer_elements+0x54>)
 8000644:	f993 3000 	ldrsb.w	r3, [r3]
 8000648:	b29b      	uxth	r3, r3
 800064a:	1ad3      	subs	r3, r2, r3
 800064c:	b29b      	uxth	r3, r3
 800064e:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8000652:	b29b      	uxth	r3, r3
 8000654:	b21b      	sxth	r3, r3
}
 8000656:	4618      	mov	r0, r3
 8000658:	46bd      	mov	sp, r7
 800065a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800065e:	4770      	bx	lr
 8000660:	200000b0 	.word	0x200000b0
 8000664:	200000b1 	.word	0x200000b1

08000668 <getBuffer>:

char* getBuffer() {
 8000668:	b480      	push	{r7}
 800066a:	af00      	add	r7, sp, #0
    return buffer;
 800066c:	4b02      	ldr	r3, [pc, #8]	; (8000678 <getBuffer+0x10>)
}
 800066e:	4618      	mov	r0, r3
 8000670:	46bd      	mov	sp, r7
 8000672:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000676:	4770      	bx	lr
 8000678:	200000b4 	.word	0x200000b4

0800067c <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 800067c:	b580      	push	{r7, lr}
 800067e:	b08a      	sub	sp, #40	; 0x28
 8000680:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000682:	f107 0314 	add.w	r3, r7, #20
 8000686:	2200      	movs	r2, #0
 8000688:	601a      	str	r2, [r3, #0]
 800068a:	605a      	str	r2, [r3, #4]
 800068c:	609a      	str	r2, [r3, #8]
 800068e:	60da      	str	r2, [r3, #12]
 8000690:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000692:	2300      	movs	r3, #0
 8000694:	613b      	str	r3, [r7, #16]
 8000696:	4b2e      	ldr	r3, [pc, #184]	; (8000750 <MX_GPIO_Init+0xd4>)
 8000698:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800069a:	4a2d      	ldr	r2, [pc, #180]	; (8000750 <MX_GPIO_Init+0xd4>)
 800069c:	f043 0304 	orr.w	r3, r3, #4
 80006a0:	6313      	str	r3, [r2, #48]	; 0x30
 80006a2:	4b2b      	ldr	r3, [pc, #172]	; (8000750 <MX_GPIO_Init+0xd4>)
 80006a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006a6:	f003 0304 	and.w	r3, r3, #4
 80006aa:	613b      	str	r3, [r7, #16]
 80006ac:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80006ae:	2300      	movs	r3, #0
 80006b0:	60fb      	str	r3, [r7, #12]
 80006b2:	4b27      	ldr	r3, [pc, #156]	; (8000750 <MX_GPIO_Init+0xd4>)
 80006b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006b6:	4a26      	ldr	r2, [pc, #152]	; (8000750 <MX_GPIO_Init+0xd4>)
 80006b8:	f043 0308 	orr.w	r3, r3, #8
 80006bc:	6313      	str	r3, [r2, #48]	; 0x30
 80006be:	4b24      	ldr	r3, [pc, #144]	; (8000750 <MX_GPIO_Init+0xd4>)
 80006c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006c2:	f003 0308 	and.w	r3, r3, #8
 80006c6:	60fb      	str	r3, [r7, #12]
 80006c8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80006ca:	2300      	movs	r3, #0
 80006cc:	60bb      	str	r3, [r7, #8]
 80006ce:	4b20      	ldr	r3, [pc, #128]	; (8000750 <MX_GPIO_Init+0xd4>)
 80006d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006d2:	4a1f      	ldr	r2, [pc, #124]	; (8000750 <MX_GPIO_Init+0xd4>)
 80006d4:	f043 0301 	orr.w	r3, r3, #1
 80006d8:	6313      	str	r3, [r2, #48]	; 0x30
 80006da:	4b1d      	ldr	r3, [pc, #116]	; (8000750 <MX_GPIO_Init+0xd4>)
 80006dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006de:	f003 0301 	and.w	r3, r3, #1
 80006e2:	60bb      	str	r3, [r7, #8]
 80006e4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80006e6:	2300      	movs	r3, #0
 80006e8:	607b      	str	r3, [r7, #4]
 80006ea:	4b19      	ldr	r3, [pc, #100]	; (8000750 <MX_GPIO_Init+0xd4>)
 80006ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006ee:	4a18      	ldr	r2, [pc, #96]	; (8000750 <MX_GPIO_Init+0xd4>)
 80006f0:	f043 0302 	orr.w	r3, r3, #2
 80006f4:	6313      	str	r3, [r2, #48]	; 0x30
 80006f6:	4b16      	ldr	r3, [pc, #88]	; (8000750 <MX_GPIO_Init+0xd4>)
 80006f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006fa:	f003 0302 	and.w	r3, r3, #2
 80006fe:	607b      	str	r3, [r7, #4]
 8000700:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, greenLed_Pin|redLed_Pin|yellowLed_Pin, GPIO_PIN_RESET);
 8000702:	2200      	movs	r2, #0
 8000704:	f44f 4160 	mov.w	r1, #57344	; 0xe000
 8000708:	4812      	ldr	r0, [pc, #72]	; (8000754 <MX_GPIO_Init+0xd8>)
 800070a:	f001 fac9 	bl	8001ca0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = nBtn_Pin;
 800070e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000712:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000714:	2300      	movs	r3, #0
 8000716:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000718:	2300      	movs	r3, #0
 800071a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(nBtn_GPIO_Port, &GPIO_InitStruct);
 800071c:	f107 0314 	add.w	r3, r7, #20
 8000720:	4619      	mov	r1, r3
 8000722:	480d      	ldr	r0, [pc, #52]	; (8000758 <MX_GPIO_Init+0xdc>)
 8000724:	f001 f8f8 	bl	8001918 <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin PDPin */
  GPIO_InitStruct.Pin = greenLed_Pin|redLed_Pin|yellowLed_Pin;
 8000728:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 800072c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800072e:	2301      	movs	r3, #1
 8000730:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000732:	2300      	movs	r3, #0
 8000734:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000736:	2300      	movs	r3, #0
 8000738:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800073a:	f107 0314 	add.w	r3, r7, #20
 800073e:	4619      	mov	r1, r3
 8000740:	4804      	ldr	r0, [pc, #16]	; (8000754 <MX_GPIO_Init+0xd8>)
 8000742:	f001 f8e9 	bl	8001918 <HAL_GPIO_Init>

}
 8000746:	bf00      	nop
 8000748:	3728      	adds	r7, #40	; 0x28
 800074a:	46bd      	mov	sp, r7
 800074c:	bd80      	pop	{r7, pc}
 800074e:	bf00      	nop
 8000750:	40023800 	.word	0x40023800
 8000754:	40020c00 	.word	0x40020c00
 8000758:	40020800 	.word	0x40020800

0800075c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800075c:	b580      	push	{r7, lr}
 800075e:	b082      	sub	sp, #8
 8000760:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000762:	f000 fec3 	bl	80014ec <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000766:	f000 f83f 	bl	80007e8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800076a:	f7ff ff87 	bl	800067c <MX_GPIO_Init>
  MX_USART6_UART_Init();
 800076e:	f000 fbe1 	bl	8000f34 <MX_USART6_UART_Init>
  /* USER CODE BEGIN 2 */
  trafficLightInit(
 8000772:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000776:	9301      	str	r3, [sp, #4]
 8000778:	4b17      	ldr	r3, [pc, #92]	; (80007d8 <main+0x7c>)
 800077a:	9300      	str	r3, [sp, #0]
 800077c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000780:	4a15      	ldr	r2, [pc, #84]	; (80007d8 <main+0x7c>)
 8000782:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000786:	4814      	ldr	r0, [pc, #80]	; (80007d8 <main+0x7c>)
 8000788:	f000 fb66 	bl	8000e58 <trafficLightInit>
		  redLed_GPIO_Port, redLed_Pin,
		  yellowLed_GPIO_Port, yellowLed_Pin,
		  greenLed_GPIO_Port, greenLed_Pin
  );
  trafficLightSetDuration(RED, durations[RED]);
 800078c:	4b13      	ldr	r3, [pc, #76]	; (80007dc <main+0x80>)
 800078e:	881b      	ldrh	r3, [r3, #0]
 8000790:	4619      	mov	r1, r3
 8000792:	2000      	movs	r0, #0
 8000794:	f000 faa2 	bl	8000cdc <trafficLightSetDuration>
  trafficLightSetDuration(GREEN, durations[GREEN]);
 8000798:	4b10      	ldr	r3, [pc, #64]	; (80007dc <main+0x80>)
 800079a:	889b      	ldrh	r3, [r3, #4]
 800079c:	4619      	mov	r1, r3
 800079e:	2002      	movs	r0, #2
 80007a0:	f000 fa9c 	bl	8000cdc <trafficLightSetDuration>
  trafficLightSetDuration(YELLOW, durations[YELLOW]);
 80007a4:	4b0d      	ldr	r3, [pc, #52]	; (80007dc <main+0x80>)
 80007a6:	885b      	ldrh	r3, [r3, #2]
 80007a8:	4619      	mov	r1, r3
 80007aa:	2001      	movs	r0, #1
 80007ac:	f000 fa96 	bl	8000cdc <trafficLightSetDuration>
  buttonInit(nBtn_GPIO_Port, nBtn_Pin);
 80007b0:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80007b4:	480a      	ldr	r0, [pc, #40]	; (80007e0 <main+0x84>)
 80007b6:	f000 fc37 	bl	8001028 <buttonInit>
  buttonSetOnClick(&onButtonClick);
 80007ba:	480a      	ldr	r0, [pc, #40]	; (80007e4 <main+0x88>)
 80007bc:	f000 fc50 	bl	8001060 <buttonSetOnClick>
  trafficLightStart();
 80007c0:	f000 fb76 	bl	8000eb0 <trafficLightStart>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80007c4:	b672      	cpsid	i
}
 80007c6:	bf00      	nop
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)  {
	  recieve();
 80007c8:	f000 fdb6 	bl	8001338 <recieve>
	  trafficLightUpdate();
 80007cc:	f000 faac 	bl	8000d28 <trafficLightUpdate>
	  buttonUpdateState();
 80007d0:	f000 fc6c 	bl	80010ac <buttonUpdateState>
	  recieve();
 80007d4:	e7f8      	b.n	80007c8 <main+0x6c>
 80007d6:	bf00      	nop
 80007d8:	40020c00 	.word	0x40020c00
 80007dc:	20000000 	.word	0x20000000
 80007e0:	40020800 	.word	0x40020800
 80007e4:	080008a9 	.word	0x080008a9

080007e8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80007e8:	b580      	push	{r7, lr}
 80007ea:	b094      	sub	sp, #80	; 0x50
 80007ec:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80007ee:	f107 0320 	add.w	r3, r7, #32
 80007f2:	2230      	movs	r2, #48	; 0x30
 80007f4:	2100      	movs	r1, #0
 80007f6:	4618      	mov	r0, r3
 80007f8:	f003 f85c 	bl	80038b4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80007fc:	f107 030c 	add.w	r3, r7, #12
 8000800:	2200      	movs	r2, #0
 8000802:	601a      	str	r2, [r3, #0]
 8000804:	605a      	str	r2, [r3, #4]
 8000806:	609a      	str	r2, [r3, #8]
 8000808:	60da      	str	r2, [r3, #12]
 800080a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800080c:	2300      	movs	r3, #0
 800080e:	60bb      	str	r3, [r7, #8]
 8000810:	4b23      	ldr	r3, [pc, #140]	; (80008a0 <SystemClock_Config+0xb8>)
 8000812:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000814:	4a22      	ldr	r2, [pc, #136]	; (80008a0 <SystemClock_Config+0xb8>)
 8000816:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800081a:	6413      	str	r3, [r2, #64]	; 0x40
 800081c:	4b20      	ldr	r3, [pc, #128]	; (80008a0 <SystemClock_Config+0xb8>)
 800081e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000820:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000824:	60bb      	str	r3, [r7, #8]
 8000826:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000828:	2300      	movs	r3, #0
 800082a:	607b      	str	r3, [r7, #4]
 800082c:	4b1d      	ldr	r3, [pc, #116]	; (80008a4 <SystemClock_Config+0xbc>)
 800082e:	681b      	ldr	r3, [r3, #0]
 8000830:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000834:	4a1b      	ldr	r2, [pc, #108]	; (80008a4 <SystemClock_Config+0xbc>)
 8000836:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800083a:	6013      	str	r3, [r2, #0]
 800083c:	4b19      	ldr	r3, [pc, #100]	; (80008a4 <SystemClock_Config+0xbc>)
 800083e:	681b      	ldr	r3, [r3, #0]
 8000840:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000844:	607b      	str	r3, [r7, #4]
 8000846:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000848:	2302      	movs	r3, #2
 800084a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800084c:	2301      	movs	r3, #1
 800084e:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000850:	2310      	movs	r3, #16
 8000852:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000854:	2300      	movs	r3, #0
 8000856:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000858:	f107 0320 	add.w	r3, r7, #32
 800085c:	4618      	mov	r0, r3
 800085e:	f001 fa39 	bl	8001cd4 <HAL_RCC_OscConfig>
 8000862:	4603      	mov	r3, r0
 8000864:	2b00      	cmp	r3, #0
 8000866:	d001      	beq.n	800086c <SystemClock_Config+0x84>
  {
    Error_Handler();
 8000868:	f000 f836 	bl	80008d8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800086c:	230f      	movs	r3, #15
 800086e:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000870:	2300      	movs	r3, #0
 8000872:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000874:	2300      	movs	r3, #0
 8000876:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000878:	2300      	movs	r3, #0
 800087a:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800087c:	2300      	movs	r3, #0
 800087e:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000880:	f107 030c 	add.w	r3, r7, #12
 8000884:	2100      	movs	r1, #0
 8000886:	4618      	mov	r0, r3
 8000888:	f001 fc9c 	bl	80021c4 <HAL_RCC_ClockConfig>
 800088c:	4603      	mov	r3, r0
 800088e:	2b00      	cmp	r3, #0
 8000890:	d001      	beq.n	8000896 <SystemClock_Config+0xae>
  {
    Error_Handler();
 8000892:	f000 f821 	bl	80008d8 <Error_Handler>
  }
}
 8000896:	bf00      	nop
 8000898:	3750      	adds	r7, #80	; 0x50
 800089a:	46bd      	mov	sp, r7
 800089c:	bd80      	pop	{r7, pc}
 800089e:	bf00      	nop
 80008a0:	40023800 	.word	0x40023800
 80008a4:	40007000 	.word	0x40007000

080008a8 <onButtonClick>:

/* USER CODE BEGIN 4 */
static void onButtonClick() {
 80008a8:	b580      	push	{r7, lr}
 80008aa:	af00      	add	r7, sp, #0
	if (isButtonAllowed()) {
 80008ac:	f000 fb10 	bl	8000ed0 <isButtonAllowed>
 80008b0:	4603      	mov	r3, r0
 80008b2:	2b00      	cmp	r3, #0
 80008b4:	d00b      	beq.n	80008ce <onButtonClick+0x26>
		durations[RED] >>= 2;
 80008b6:	4b07      	ldr	r3, [pc, #28]	; (80008d4 <onButtonClick+0x2c>)
 80008b8:	881b      	ldrh	r3, [r3, #0]
 80008ba:	089b      	lsrs	r3, r3, #2
 80008bc:	b29a      	uxth	r2, r3
 80008be:	4b05      	ldr	r3, [pc, #20]	; (80008d4 <onButtonClick+0x2c>)
 80008c0:	801a      	strh	r2, [r3, #0]
		trafficLightSetDuration(RED, durations[RED]);
 80008c2:	4b04      	ldr	r3, [pc, #16]	; (80008d4 <onButtonClick+0x2c>)
 80008c4:	881b      	ldrh	r3, [r3, #0]
 80008c6:	4619      	mov	r1, r3
 80008c8:	2000      	movs	r0, #0
 80008ca:	f000 fa07 	bl	8000cdc <trafficLightSetDuration>
	}
}
 80008ce:	bf00      	nop
 80008d0:	bd80      	pop	{r7, pc}
 80008d2:	bf00      	nop
 80008d4:	20000000 	.word	0x20000000

080008d8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80008d8:	b480      	push	{r7}
 80008da:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 80008dc:	b672      	cpsid	i
}
 80008de:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80008e0:	e7fe      	b.n	80008e0 <Error_Handler+0x8>
	...

080008e4 <check>:
int setModeFlag = 0;
int setTimeoutFlag = 0;

int timeout;

void check() {
 80008e4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80008e8:	b08b      	sub	sp, #44	; 0x2c
 80008ea:	af00      	add	r7, sp, #0
 80008ec:	466b      	mov	r3, sp
 80008ee:	461e      	mov	r6, r3
	int16_t n = buffer_elements();
 80008f0:	f7ff fe8e 	bl	8000610 <buffer_elements>
 80008f4:	4603      	mov	r3, r0
 80008f6:	84fb      	strh	r3, [r7, #38]	; 0x26
	if (n <= 0) return;
 80008f8:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 80008fc:	2b00      	cmp	r3, #0
 80008fe:	f340 8102 	ble.w	8000b06 <check+0x222>

	if(n > 20) {
 8000902:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 8000906:	2b14      	cmp	r3, #20
 8000908:	dd05      	ble.n	8000916 <check+0x32>
	    buffer_clear();
 800090a:	f7ff fe6f 	bl	80005ec <buffer_clear>
	    transmit("ERROR");
 800090e:	4882      	ldr	r0, [pc, #520]	; (8000b18 <check+0x234>)
 8000910:	f000 fd36 	bl	8001380 <transmit>
	    return;
 8000914:	e0fa      	b.n	8000b0c <check+0x228>
	}

	char buf_part[n];
 8000916:	f9b7 1026 	ldrsh.w	r1, [r7, #38]	; 0x26
 800091a:	460b      	mov	r3, r1
 800091c:	3b01      	subs	r3, #1
 800091e:	623b      	str	r3, [r7, #32]
 8000920:	460a      	mov	r2, r1
 8000922:	2300      	movs	r3, #0
 8000924:	4690      	mov	r8, r2
 8000926:	4699      	mov	r9, r3
 8000928:	f04f 0200 	mov.w	r2, #0
 800092c:	f04f 0300 	mov.w	r3, #0
 8000930:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8000934:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8000938:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800093c:	460a      	mov	r2, r1
 800093e:	2300      	movs	r3, #0
 8000940:	4614      	mov	r4, r2
 8000942:	461d      	mov	r5, r3
 8000944:	f04f 0200 	mov.w	r2, #0
 8000948:	f04f 0300 	mov.w	r3, #0
 800094c:	00eb      	lsls	r3, r5, #3
 800094e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8000952:	00e2      	lsls	r2, r4, #3
 8000954:	460b      	mov	r3, r1
 8000956:	3307      	adds	r3, #7
 8000958:	08db      	lsrs	r3, r3, #3
 800095a:	00db      	lsls	r3, r3, #3
 800095c:	ebad 0d03 	sub.w	sp, sp, r3
 8000960:	466b      	mov	r3, sp
 8000962:	3300      	adds	r3, #0
 8000964:	61fb      	str	r3, [r7, #28]
	memcpy(buf_part, getBuffer(), n);
 8000966:	f7ff fe7f 	bl	8000668 <getBuffer>
 800096a:	4601      	mov	r1, r0
 800096c:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 8000970:	461a      	mov	r2, r3
 8000972:	69f8      	ldr	r0, [r7, #28]
 8000974:	f002 ff90 	bl	8003898 <memcpy>


	if (setModeFlag == 1) {
 8000978:	4b68      	ldr	r3, [pc, #416]	; (8000b1c <check+0x238>)
 800097a:	681b      	ldr	r3, [r3, #0]
 800097c:	2b01      	cmp	r3, #1
 800097e:	d124      	bne.n	80009ca <check+0xe6>
		if (strcmp(buf_part, "1") == 0) {
 8000980:	4967      	ldr	r1, [pc, #412]	; (8000b20 <check+0x23c>)
 8000982:	69f8      	ldr	r0, [r7, #28]
 8000984:	f7ff fc34 	bl	80001f0 <strcmp>
 8000988:	4603      	mov	r3, r0
 800098a:	2b00      	cmp	r3, #0
 800098c:	d106      	bne.n	800099c <check+0xb8>
			mode = 1;
 800098e:	4b65      	ldr	r3, [pc, #404]	; (8000b24 <check+0x240>)
 8000990:	2201      	movs	r2, #1
 8000992:	601a      	str	r2, [r3, #0]
			transmit("OK");
 8000994:	4864      	ldr	r0, [pc, #400]	; (8000b28 <check+0x244>)
 8000996:	f000 fcf3 	bl	8001380 <transmit>
 800099a:	e010      	b.n	80009be <check+0xda>
		} else if (strcmp(buf_part, "2") == 0) {
 800099c:	4963      	ldr	r1, [pc, #396]	; (8000b2c <check+0x248>)
 800099e:	69f8      	ldr	r0, [r7, #28]
 80009a0:	f7ff fc26 	bl	80001f0 <strcmp>
 80009a4:	4603      	mov	r3, r0
 80009a6:	2b00      	cmp	r3, #0
 80009a8:	d106      	bne.n	80009b8 <check+0xd4>
			mode = 2;
 80009aa:	4b5e      	ldr	r3, [pc, #376]	; (8000b24 <check+0x240>)
 80009ac:	2202      	movs	r2, #2
 80009ae:	601a      	str	r2, [r3, #0]
			transmit("OK");
 80009b0:	485d      	ldr	r0, [pc, #372]	; (8000b28 <check+0x244>)
 80009b2:	f000 fce5 	bl	8001380 <transmit>
 80009b6:	e002      	b.n	80009be <check+0xda>
		} else {
			transmit("ERROR");
 80009b8:	4857      	ldr	r0, [pc, #348]	; (8000b18 <check+0x234>)
 80009ba:	f000 fce1 	bl	8001380 <transmit>
		}
		buffer_clear();
 80009be:	f7ff fe15 	bl	80005ec <buffer_clear>
		setModeFlag = 0;
 80009c2:	4b56      	ldr	r3, [pc, #344]	; (8000b1c <check+0x238>)
 80009c4:	2200      	movs	r2, #0
 80009c6:	601a      	str	r2, [r3, #0]
		return;
 80009c8:	e0a0      	b.n	8000b0c <check+0x228>
	}
	if (setTimeoutFlag != 0) {
 80009ca:	4b59      	ldr	r3, [pc, #356]	; (8000b30 <check+0x24c>)
 80009cc:	681b      	ldr	r3, [r3, #0]
 80009ce:	2b00      	cmp	r3, #0
 80009d0:	d026      	beq.n	8000a20 <check+0x13c>
		setTimeoutFlag--;
 80009d2:	4b57      	ldr	r3, [pc, #348]	; (8000b30 <check+0x24c>)
 80009d4:	681b      	ldr	r3, [r3, #0]
 80009d6:	3b01      	subs	r3, #1
 80009d8:	4a55      	ldr	r2, [pc, #340]	; (8000b30 <check+0x24c>)
 80009da:	6013      	str	r3, [r2, #0]
		if (setTimeoutFlag == 0) {
 80009dc:	4b54      	ldr	r3, [pc, #336]	; (8000b30 <check+0x24c>)
 80009de:	681b      	ldr	r3, [r3, #0]
 80009e0:	2b00      	cmp	r3, #0
 80009e2:	f040 8092 	bne.w	8000b0a <check+0x226>
			timeout = atoi(buf_part);
 80009e6:	69f8      	ldr	r0, [r7, #28]
 80009e8:	f002 ff20 	bl	800382c <atoi>
 80009ec:	4603      	mov	r3, r0
 80009ee:	4a51      	ldr	r2, [pc, #324]	; (8000b34 <check+0x250>)
 80009f0:	6013      	str	r3, [r2, #0]
			if (timeout > 0) {
 80009f2:	4b50      	ldr	r3, [pc, #320]	; (8000b34 <check+0x250>)
 80009f4:	681b      	ldr	r3, [r3, #0]
 80009f6:	2b00      	cmp	r3, #0
 80009f8:	dd0c      	ble.n	8000a14 <check+0x130>
				setDurationRED(timeout*1000);
 80009fa:	4b4e      	ldr	r3, [pc, #312]	; (8000b34 <check+0x250>)
 80009fc:	681b      	ldr	r3, [r3, #0]
 80009fe:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000a02:	fb02 f303 	mul.w	r3, r2, r3
 8000a06:	4618      	mov	r0, r3
 8000a08:	f000 fa84 	bl	8000f14 <setDurationRED>
				transmit("OK");
 8000a0c:	4846      	ldr	r0, [pc, #280]	; (8000b28 <check+0x244>)
 8000a0e:	f000 fcb7 	bl	8001380 <transmit>
 8000a12:	e002      	b.n	8000a1a <check+0x136>
			} else {
				transmit("ERROR");
 8000a14:	4840      	ldr	r0, [pc, #256]	; (8000b18 <check+0x234>)
 8000a16:	f000 fcb3 	bl	8001380 <transmit>
			}
			buffer_clear();
 8000a1a:	f7ff fde7 	bl	80005ec <buffer_clear>
		}
		return;
 8000a1e:	e074      	b.n	8000b0a <check+0x226>
	}

	if (strcmp(buf_part, "?") == 0) {
 8000a20:	4945      	ldr	r1, [pc, #276]	; (8000b38 <check+0x254>)
 8000a22:	69f8      	ldr	r0, [r7, #28]
 8000a24:	f7ff fbe4 	bl	80001f0 <strcmp>
 8000a28:	4603      	mov	r3, r0
 8000a2a:	2b00      	cmp	r3, #0
 8000a2c:	d132      	bne.n	8000a94 <check+0x1b0>
		transmit(color_names[getCurrentColor()]);
 8000a2e:	f000 fa65 	bl	8000efc <getCurrentColor>
 8000a32:	4603      	mov	r3, r0
 8000a34:	461a      	mov	r2, r3
 8000a36:	4b41      	ldr	r3, [pc, #260]	; (8000b3c <check+0x258>)
 8000a38:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000a3c:	4618      	mov	r0, r3
 8000a3e:	f000 fc9f 	bl	8001380 <transmit>
		char mode_str[10];
		sprintf(mode_str, "mode %d", mode);
 8000a42:	4b38      	ldr	r3, [pc, #224]	; (8000b24 <check+0x240>)
 8000a44:	681a      	ldr	r2, [r3, #0]
 8000a46:	f107 0310 	add.w	r3, r7, #16
 8000a4a:	493d      	ldr	r1, [pc, #244]	; (8000b40 <check+0x25c>)
 8000a4c:	4618      	mov	r0, r3
 8000a4e:	f003 f829 	bl	8003aa4 <siprintf>
		transmit(mode_str);
 8000a52:	f107 0310 	add.w	r3, r7, #16
 8000a56:	4618      	mov	r0, r3
 8000a58:	f000 fc92 	bl	8001380 <transmit>
		char timeout_str[10];
		sprintf(timeout_str, "timeout %d", (int) trafficLightGetDuration(RED));
 8000a5c:	2000      	movs	r0, #0
 8000a5e:	f000 f951 	bl	8000d04 <trafficLightGetDuration>
 8000a62:	4603      	mov	r3, r0
 8000a64:	461a      	mov	r2, r3
 8000a66:	1d3b      	adds	r3, r7, #4
 8000a68:	4936      	ldr	r1, [pc, #216]	; (8000b44 <check+0x260>)
 8000a6a:	4618      	mov	r0, r3
 8000a6c:	f003 f81a 	bl	8003aa4 <siprintf>
		transmit(timeout_str);
 8000a70:	1d3b      	adds	r3, r7, #4
 8000a72:	4618      	mov	r0, r3
 8000a74:	f000 fc84 	bl	8001380 <transmit>
		if (interruptsEnabled == 1) {
 8000a78:	4b33      	ldr	r3, [pc, #204]	; (8000b48 <check+0x264>)
 8000a7a:	681b      	ldr	r3, [r3, #0]
 8000a7c:	2b01      	cmp	r3, #1
 8000a7e:	d103      	bne.n	8000a88 <check+0x1a4>
			transmit("I");
 8000a80:	4832      	ldr	r0, [pc, #200]	; (8000b4c <check+0x268>)
 8000a82:	f000 fc7d 	bl	8001380 <transmit>
 8000a86:	e002      	b.n	8000a8e <check+0x1aa>
		} else {
			transmit("P");
 8000a88:	4831      	ldr	r0, [pc, #196]	; (8000b50 <check+0x26c>)
 8000a8a:	f000 fc79 	bl	8001380 <transmit>
		}
		buffer_clear();
 8000a8e:	f7ff fdad 	bl	80005ec <buffer_clear>
 8000a92:	e036      	b.n	8000b02 <check+0x21e>
	} else if (strcmp(buf_part, "set mode ") == 0) {
 8000a94:	492f      	ldr	r1, [pc, #188]	; (8000b54 <check+0x270>)
 8000a96:	69f8      	ldr	r0, [r7, #28]
 8000a98:	f7ff fbaa 	bl	80001f0 <strcmp>
 8000a9c:	4603      	mov	r3, r0
 8000a9e:	2b00      	cmp	r3, #0
 8000aa0:	d105      	bne.n	8000aae <check+0x1ca>
		setModeFlag = 1;
 8000aa2:	4b1e      	ldr	r3, [pc, #120]	; (8000b1c <check+0x238>)
 8000aa4:	2201      	movs	r2, #1
 8000aa6:	601a      	str	r2, [r3, #0]
		buffer_clear();
 8000aa8:	f7ff fda0 	bl	80005ec <buffer_clear>
 8000aac:	e029      	b.n	8000b02 <check+0x21e>
	} else if (strcmp(buf_part, "set timeout ") == 0) {
 8000aae:	492a      	ldr	r1, [pc, #168]	; (8000b58 <check+0x274>)
 8000ab0:	69f8      	ldr	r0, [r7, #28]
 8000ab2:	f7ff fb9d 	bl	80001f0 <strcmp>
 8000ab6:	4603      	mov	r3, r0
 8000ab8:	2b00      	cmp	r3, #0
 8000aba:	d105      	bne.n	8000ac8 <check+0x1e4>
		setTimeoutFlag = 2;
 8000abc:	4b1c      	ldr	r3, [pc, #112]	; (8000b30 <check+0x24c>)
 8000abe:	2202      	movs	r2, #2
 8000ac0:	601a      	str	r2, [r3, #0]
		buffer_clear();
 8000ac2:	f7ff fd93 	bl	80005ec <buffer_clear>
 8000ac6:	e01c      	b.n	8000b02 <check+0x21e>
	} else if (strcmp(buf_part, "set interrupts on") == 0) {
 8000ac8:	4924      	ldr	r1, [pc, #144]	; (8000b5c <check+0x278>)
 8000aca:	69f8      	ldr	r0, [r7, #28]
 8000acc:	f7ff fb90 	bl	80001f0 <strcmp>
 8000ad0:	4603      	mov	r3, r0
 8000ad2:	2b00      	cmp	r3, #0
 8000ad4:	d107      	bne.n	8000ae6 <check+0x202>
  __ASM volatile ("cpsie i" : : : "memory");
 8000ad6:	b662      	cpsie	i
}
 8000ad8:	bf00      	nop
		__enable_irq();
		interruptsEnabled = 1;
 8000ada:	4b1b      	ldr	r3, [pc, #108]	; (8000b48 <check+0x264>)
 8000adc:	2201      	movs	r2, #1
 8000ade:	601a      	str	r2, [r3, #0]
		buffer_clear();
 8000ae0:	f7ff fd84 	bl	80005ec <buffer_clear>
 8000ae4:	e00d      	b.n	8000b02 <check+0x21e>
	} else if (strcmp(buf_part, "set interrupts off") == 0) {
 8000ae6:	491e      	ldr	r1, [pc, #120]	; (8000b60 <check+0x27c>)
 8000ae8:	69f8      	ldr	r0, [r7, #28]
 8000aea:	f7ff fb81 	bl	80001f0 <strcmp>
 8000aee:	4603      	mov	r3, r0
 8000af0:	2b00      	cmp	r3, #0
 8000af2:	d106      	bne.n	8000b02 <check+0x21e>
  __ASM volatile ("cpsid i" : : : "memory");
 8000af4:	b672      	cpsid	i
}
 8000af6:	bf00      	nop
		__disable_irq();
		interruptsEnabled = 0;
 8000af8:	4b13      	ldr	r3, [pc, #76]	; (8000b48 <check+0x264>)
 8000afa:	2200      	movs	r2, #0
 8000afc:	601a      	str	r2, [r3, #0]
		buffer_clear();
 8000afe:	f7ff fd75 	bl	80005ec <buffer_clear>
 8000b02:	46b5      	mov	sp, r6
 8000b04:	e003      	b.n	8000b0e <check+0x22a>
	if (n <= 0) return;
 8000b06:	bf00      	nop
 8000b08:	e000      	b.n	8000b0c <check+0x228>
		return;
 8000b0a:	bf00      	nop
 8000b0c:	46b5      	mov	sp, r6
	}
}
 8000b0e:	372c      	adds	r7, #44	; 0x2c
 8000b10:	46bd      	mov	sp, r7
 8000b12:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8000b16:	bf00      	nop
 8000b18:	080042e8 	.word	0x080042e8
 8000b1c:	200001b8 	.word	0x200001b8
 8000b20:	080042f0 	.word	0x080042f0
 8000b24:	20000014 	.word	0x20000014
 8000b28:	080042f4 	.word	0x080042f4
 8000b2c:	080042f8 	.word	0x080042f8
 8000b30:	200001bc 	.word	0x200001bc
 8000b34:	200001c0 	.word	0x200001c0
 8000b38:	080042fc 	.word	0x080042fc
 8000b3c:	20000008 	.word	0x20000008
 8000b40:	08004300 	.word	0x08004300
 8000b44:	08004308 	.word	0x08004308
 8000b48:	200001b4 	.word	0x200001b4
 8000b4c:	08004314 	.word	0x08004314
 8000b50:	08004318 	.word	0x08004318
 8000b54:	0800431c 	.word	0x0800431c
 8000b58:	08004328 	.word	0x08004328
 8000b5c:	08004338 	.word	0x08004338
 8000b60:	0800434c 	.word	0x0800434c

08000b64 <getMode>:



int getMode() {
 8000b64:	b480      	push	{r7}
 8000b66:	af00      	add	r7, sp, #0
	return mode;
 8000b68:	4b03      	ldr	r3, [pc, #12]	; (8000b78 <getMode+0x14>)
 8000b6a:	681b      	ldr	r3, [r3, #0]
}
 8000b6c:	4618      	mov	r0, r3
 8000b6e:	46bd      	mov	sp, r7
 8000b70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b74:	4770      	bx	lr
 8000b76:	bf00      	nop
 8000b78:	20000014 	.word	0x20000014

08000b7c <getInterruptsEnabled>:
int getInterruptsEnabled() {
 8000b7c:	b480      	push	{r7}
 8000b7e:	af00      	add	r7, sp, #0
	return interruptsEnabled;
 8000b80:	4b03      	ldr	r3, [pc, #12]	; (8000b90 <getInterruptsEnabled+0x14>)
 8000b82:	681b      	ldr	r3, [r3, #0]
}
 8000b84:	4618      	mov	r0, r3
 8000b86:	46bd      	mov	sp, r7
 8000b88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b8c:	4770      	bx	lr
 8000b8e:	bf00      	nop
 8000b90:	200001b4 	.word	0x200001b4

08000b94 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000b94:	b480      	push	{r7}
 8000b96:	b083      	sub	sp, #12
 8000b98:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b9a:	2300      	movs	r3, #0
 8000b9c:	607b      	str	r3, [r7, #4]
 8000b9e:	4b10      	ldr	r3, [pc, #64]	; (8000be0 <HAL_MspInit+0x4c>)
 8000ba0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ba2:	4a0f      	ldr	r2, [pc, #60]	; (8000be0 <HAL_MspInit+0x4c>)
 8000ba4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000ba8:	6453      	str	r3, [r2, #68]	; 0x44
 8000baa:	4b0d      	ldr	r3, [pc, #52]	; (8000be0 <HAL_MspInit+0x4c>)
 8000bac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000bae:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000bb2:	607b      	str	r3, [r7, #4]
 8000bb4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000bb6:	2300      	movs	r3, #0
 8000bb8:	603b      	str	r3, [r7, #0]
 8000bba:	4b09      	ldr	r3, [pc, #36]	; (8000be0 <HAL_MspInit+0x4c>)
 8000bbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bbe:	4a08      	ldr	r2, [pc, #32]	; (8000be0 <HAL_MspInit+0x4c>)
 8000bc0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000bc4:	6413      	str	r3, [r2, #64]	; 0x40
 8000bc6:	4b06      	ldr	r3, [pc, #24]	; (8000be0 <HAL_MspInit+0x4c>)
 8000bc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000bce:	603b      	str	r3, [r7, #0]
 8000bd0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000bd2:	bf00      	nop
 8000bd4:	370c      	adds	r7, #12
 8000bd6:	46bd      	mov	sp, r7
 8000bd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bdc:	4770      	bx	lr
 8000bde:	bf00      	nop
 8000be0:	40023800 	.word	0x40023800

08000be4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000be4:	b480      	push	{r7}
 8000be6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000be8:	e7fe      	b.n	8000be8 <NMI_Handler+0x4>

08000bea <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000bea:	b480      	push	{r7}
 8000bec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000bee:	e7fe      	b.n	8000bee <HardFault_Handler+0x4>

08000bf0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000bf0:	b480      	push	{r7}
 8000bf2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000bf4:	e7fe      	b.n	8000bf4 <MemManage_Handler+0x4>

08000bf6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000bf6:	b480      	push	{r7}
 8000bf8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000bfa:	e7fe      	b.n	8000bfa <BusFault_Handler+0x4>

08000bfc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000bfc:	b480      	push	{r7}
 8000bfe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000c00:	e7fe      	b.n	8000c00 <UsageFault_Handler+0x4>

08000c02 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000c02:	b480      	push	{r7}
 8000c04:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000c06:	bf00      	nop
 8000c08:	46bd      	mov	sp, r7
 8000c0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c0e:	4770      	bx	lr

08000c10 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000c10:	b480      	push	{r7}
 8000c12:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000c14:	bf00      	nop
 8000c16:	46bd      	mov	sp, r7
 8000c18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c1c:	4770      	bx	lr

08000c1e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000c1e:	b480      	push	{r7}
 8000c20:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000c22:	bf00      	nop
 8000c24:	46bd      	mov	sp, r7
 8000c26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c2a:	4770      	bx	lr

08000c2c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000c2c:	b580      	push	{r7, lr}
 8000c2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000c30:	f000 fcae 	bl	8001590 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000c34:	bf00      	nop
 8000c36:	bd80      	pop	{r7, pc}

08000c38 <USART6_IRQHandler>:

/**
  * @brief This function handles USART6 global interrupt.
  */
void USART6_IRQHandler(void)
{
 8000c38:	b580      	push	{r7, lr}
 8000c3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART6_IRQn 0 */

  /* USER CODE END USART6_IRQn 0 */
  HAL_UART_IRQHandler(&huart6);
 8000c3c:	4802      	ldr	r0, [pc, #8]	; (8000c48 <USART6_IRQHandler+0x10>)
 8000c3e:	f001 fe97 	bl	8002970 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART6_IRQn 1 */

  /* USER CODE END USART6_IRQn 1 */
}
 8000c42:	bf00      	nop
 8000c44:	bd80      	pop	{r7, pc}
 8000c46:	bf00      	nop
 8000c48:	200001d8 	.word	0x200001d8

08000c4c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000c4c:	b580      	push	{r7, lr}
 8000c4e:	b086      	sub	sp, #24
 8000c50:	af00      	add	r7, sp, #0
 8000c52:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000c54:	4a14      	ldr	r2, [pc, #80]	; (8000ca8 <_sbrk+0x5c>)
 8000c56:	4b15      	ldr	r3, [pc, #84]	; (8000cac <_sbrk+0x60>)
 8000c58:	1ad3      	subs	r3, r2, r3
 8000c5a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000c5c:	697b      	ldr	r3, [r7, #20]
 8000c5e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000c60:	4b13      	ldr	r3, [pc, #76]	; (8000cb0 <_sbrk+0x64>)
 8000c62:	681b      	ldr	r3, [r3, #0]
 8000c64:	2b00      	cmp	r3, #0
 8000c66:	d102      	bne.n	8000c6e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000c68:	4b11      	ldr	r3, [pc, #68]	; (8000cb0 <_sbrk+0x64>)
 8000c6a:	4a12      	ldr	r2, [pc, #72]	; (8000cb4 <_sbrk+0x68>)
 8000c6c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000c6e:	4b10      	ldr	r3, [pc, #64]	; (8000cb0 <_sbrk+0x64>)
 8000c70:	681a      	ldr	r2, [r3, #0]
 8000c72:	687b      	ldr	r3, [r7, #4]
 8000c74:	4413      	add	r3, r2
 8000c76:	693a      	ldr	r2, [r7, #16]
 8000c78:	429a      	cmp	r2, r3
 8000c7a:	d207      	bcs.n	8000c8c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000c7c:	f002 fdda 	bl	8003834 <__errno>
 8000c80:	4603      	mov	r3, r0
 8000c82:	220c      	movs	r2, #12
 8000c84:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000c86:	f04f 33ff 	mov.w	r3, #4294967295
 8000c8a:	e009      	b.n	8000ca0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000c8c:	4b08      	ldr	r3, [pc, #32]	; (8000cb0 <_sbrk+0x64>)
 8000c8e:	681b      	ldr	r3, [r3, #0]
 8000c90:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000c92:	4b07      	ldr	r3, [pc, #28]	; (8000cb0 <_sbrk+0x64>)
 8000c94:	681a      	ldr	r2, [r3, #0]
 8000c96:	687b      	ldr	r3, [r7, #4]
 8000c98:	4413      	add	r3, r2
 8000c9a:	4a05      	ldr	r2, [pc, #20]	; (8000cb0 <_sbrk+0x64>)
 8000c9c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000c9e:	68fb      	ldr	r3, [r7, #12]
}
 8000ca0:	4618      	mov	r0, r3
 8000ca2:	3718      	adds	r7, #24
 8000ca4:	46bd      	mov	sp, r7
 8000ca6:	bd80      	pop	{r7, pc}
 8000ca8:	20030000 	.word	0x20030000
 8000cac:	00000400 	.word	0x00000400
 8000cb0:	200001c4 	.word	0x200001c4
 8000cb4:	20000448 	.word	0x20000448

08000cb8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000cb8:	b480      	push	{r7}
 8000cba:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000cbc:	4b06      	ldr	r3, [pc, #24]	; (8000cd8 <SystemInit+0x20>)
 8000cbe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000cc2:	4a05      	ldr	r2, [pc, #20]	; (8000cd8 <SystemInit+0x20>)
 8000cc4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000cc8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000ccc:	bf00      	nop
 8000cce:	46bd      	mov	sp, r7
 8000cd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cd4:	4770      	bx	lr
 8000cd6:	bf00      	nop
 8000cd8:	e000ed00 	.word	0xe000ed00

08000cdc <trafficLightSetDuration>:
static Color currentColor;
static Color nextColor = RED;
static bool isCurrentFlashing = false;
static bool isNextFlashing = false;

void trafficLightSetDuration(Color color, uint32_t duration) {
 8000cdc:	b480      	push	{r7}
 8000cde:	b083      	sub	sp, #12
 8000ce0:	af00      	add	r7, sp, #0
 8000ce2:	4603      	mov	r3, r0
 8000ce4:	6039      	str	r1, [r7, #0]
 8000ce6:	71fb      	strb	r3, [r7, #7]
    durations[color] = duration;
 8000ce8:	79fb      	ldrb	r3, [r7, #7]
 8000cea:	683a      	ldr	r2, [r7, #0]
 8000cec:	b291      	uxth	r1, r2
 8000cee:	4a04      	ldr	r2, [pc, #16]	; (8000d00 <trafficLightSetDuration+0x24>)
 8000cf0:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
}
 8000cf4:	bf00      	nop
 8000cf6:	370c      	adds	r7, #12
 8000cf8:	46bd      	mov	sp, r7
 8000cfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cfe:	4770      	bx	lr
 8000d00:	20000020 	.word	0x20000020

08000d04 <trafficLightGetDuration>:

uint32_t trafficLightGetDuration(Color color) {
 8000d04:	b480      	push	{r7}
 8000d06:	b083      	sub	sp, #12
 8000d08:	af00      	add	r7, sp, #0
 8000d0a:	4603      	mov	r3, r0
 8000d0c:	71fb      	strb	r3, [r7, #7]
    return durations[color];
 8000d0e:	79fb      	ldrb	r3, [r7, #7]
 8000d10:	4a04      	ldr	r2, [pc, #16]	; (8000d24 <trafficLightGetDuration+0x20>)
 8000d12:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
}
 8000d16:	4618      	mov	r0, r3
 8000d18:	370c      	adds	r7, #12
 8000d1a:	46bd      	mov	sp, r7
 8000d1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d20:	4770      	bx	lr
 8000d22:	bf00      	nop
 8000d24:	20000020 	.word	0x20000020

08000d28 <trafficLightUpdate>:

void trafficLightUpdate() {
 8000d28:	b580      	push	{r7, lr}
 8000d2a:	af00      	add	r7, sp, #0
    if (ledFinishedLightning(leds[currentColor])) {
 8000d2c:	4b43      	ldr	r3, [pc, #268]	; (8000e3c <trafficLightUpdate+0x114>)
 8000d2e:	781b      	ldrb	r3, [r3, #0]
 8000d30:	461a      	mov	r2, r3
 8000d32:	4b43      	ldr	r3, [pc, #268]	; (8000e40 <trafficLightUpdate+0x118>)
 8000d34:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000d38:	4618      	mov	r0, r3
 8000d3a:	f000 fab9 	bl	80012b0 <ledFinishedLightning>
 8000d3e:	4603      	mov	r3, r0
 8000d40:	2b00      	cmp	r3, #0
 8000d42:	d069      	beq.n	8000e18 <trafficLightUpdate+0xf0>
        currentColor = nextColor;
 8000d44:	4b3f      	ldr	r3, [pc, #252]	; (8000e44 <trafficLightUpdate+0x11c>)
 8000d46:	781a      	ldrb	r2, [r3, #0]
 8000d48:	4b3c      	ldr	r3, [pc, #240]	; (8000e3c <trafficLightUpdate+0x114>)
 8000d4a:	701a      	strb	r2, [r3, #0]
        isCurrentFlashing = isNextFlashing;
 8000d4c:	4b3e      	ldr	r3, [pc, #248]	; (8000e48 <trafficLightUpdate+0x120>)
 8000d4e:	781a      	ldrb	r2, [r3, #0]
 8000d50:	4b3e      	ldr	r3, [pc, #248]	; (8000e4c <trafficLightUpdate+0x124>)
 8000d52:	701a      	strb	r2, [r3, #0]
        switch (nextColor) {
 8000d54:	4b3b      	ldr	r3, [pc, #236]	; (8000e44 <trafficLightUpdate+0x11c>)
 8000d56:	781b      	ldrb	r3, [r3, #0]
 8000d58:	2b02      	cmp	r3, #2
 8000d5a:	d012      	beq.n	8000d82 <trafficLightUpdate+0x5a>
 8000d5c:	2b02      	cmp	r3, #2
 8000d5e:	dc2c      	bgt.n	8000dba <trafficLightUpdate+0x92>
 8000d60:	2b00      	cmp	r3, #0
 8000d62:	d002      	beq.n	8000d6a <trafficLightUpdate+0x42>
 8000d64:	2b01      	cmp	r3, #1
 8000d66:	d021      	beq.n	8000dac <trafficLightUpdate+0x84>
 8000d68:	e027      	b.n	8000dba <trafficLightUpdate+0x92>
        	case RED:
        		durations[RED] = durationRED;
 8000d6a:	4b39      	ldr	r3, [pc, #228]	; (8000e50 <trafficLightUpdate+0x128>)
 8000d6c:	681b      	ldr	r3, [r3, #0]
 8000d6e:	b29a      	uxth	r2, r3
 8000d70:	4b38      	ldr	r3, [pc, #224]	; (8000e54 <trafficLightUpdate+0x12c>)
 8000d72:	801a      	strh	r2, [r3, #0]
				nextColor = GREEN;
 8000d74:	4b33      	ldr	r3, [pc, #204]	; (8000e44 <trafficLightUpdate+0x11c>)
 8000d76:	2202      	movs	r2, #2
 8000d78:	701a      	strb	r2, [r3, #0]
				isNextFlashing = false;
 8000d7a:	4b33      	ldr	r3, [pc, #204]	; (8000e48 <trafficLightUpdate+0x120>)
 8000d7c:	2200      	movs	r2, #0
 8000d7e:	701a      	strb	r2, [r3, #0]
				break;
 8000d80:	e01b      	b.n	8000dba <trafficLightUpdate+0x92>
        	case GREEN:
        		if (!isCurrentFlashing) {
 8000d82:	4b32      	ldr	r3, [pc, #200]	; (8000e4c <trafficLightUpdate+0x124>)
 8000d84:	781b      	ldrb	r3, [r3, #0]
 8000d86:	f083 0301 	eor.w	r3, r3, #1
 8000d8a:	b2db      	uxtb	r3, r3
 8000d8c:	2b00      	cmp	r3, #0
 8000d8e:	d006      	beq.n	8000d9e <trafficLightUpdate+0x76>
        			isNextFlashing = true;
 8000d90:	4b2d      	ldr	r3, [pc, #180]	; (8000e48 <trafficLightUpdate+0x120>)
 8000d92:	2201      	movs	r2, #1
 8000d94:	701a      	strb	r2, [r3, #0]
        			nextColor = GREEN;
 8000d96:	4b2b      	ldr	r3, [pc, #172]	; (8000e44 <trafficLightUpdate+0x11c>)
 8000d98:	2202      	movs	r2, #2
 8000d9a:	701a      	strb	r2, [r3, #0]
        		} else {
        			isNextFlashing = false;
        			nextColor = YELLOW;
        		}
        		break;
 8000d9c:	e00d      	b.n	8000dba <trafficLightUpdate+0x92>
        			isNextFlashing = false;
 8000d9e:	4b2a      	ldr	r3, [pc, #168]	; (8000e48 <trafficLightUpdate+0x120>)
 8000da0:	2200      	movs	r2, #0
 8000da2:	701a      	strb	r2, [r3, #0]
        			nextColor = YELLOW;
 8000da4:	4b27      	ldr	r3, [pc, #156]	; (8000e44 <trafficLightUpdate+0x11c>)
 8000da6:	2201      	movs	r2, #1
 8000da8:	701a      	strb	r2, [r3, #0]
        		break;
 8000daa:	e006      	b.n	8000dba <trafficLightUpdate+0x92>
        	case YELLOW:
				nextColor = RED;
 8000dac:	4b25      	ldr	r3, [pc, #148]	; (8000e44 <trafficLightUpdate+0x11c>)
 8000dae:	2200      	movs	r2, #0
 8000db0:	701a      	strb	r2, [r3, #0]
				isNextFlashing = false;
 8000db2:	4b25      	ldr	r3, [pc, #148]	; (8000e48 <trafficLightUpdate+0x120>)
 8000db4:	2200      	movs	r2, #0
 8000db6:	701a      	strb	r2, [r3, #0]
				break;
 8000db8:	bf00      	nop
        }
        if (!isCurrentFlashing) {
 8000dba:	4b24      	ldr	r3, [pc, #144]	; (8000e4c <trafficLightUpdate+0x124>)
 8000dbc:	781b      	ldrb	r3, [r3, #0]
 8000dbe:	f083 0301 	eor.w	r3, r3, #1
 8000dc2:	b2db      	uxtb	r3, r3
 8000dc4:	2b00      	cmp	r3, #0
 8000dc6:	d010      	beq.n	8000dea <trafficLightUpdate+0xc2>
		    ledSetStateDuration(leds[currentColor], LED_TURN_ON, durations[currentColor]);
 8000dc8:	4b1c      	ldr	r3, [pc, #112]	; (8000e3c <trafficLightUpdate+0x114>)
 8000dca:	781b      	ldrb	r3, [r3, #0]
 8000dcc:	461a      	mov	r2, r3
 8000dce:	4b1c      	ldr	r3, [pc, #112]	; (8000e40 <trafficLightUpdate+0x118>)
 8000dd0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000dd4:	4a19      	ldr	r2, [pc, #100]	; (8000e3c <trafficLightUpdate+0x114>)
 8000dd6:	7812      	ldrb	r2, [r2, #0]
 8000dd8:	4611      	mov	r1, r2
 8000dda:	4a1e      	ldr	r2, [pc, #120]	; (8000e54 <trafficLightUpdate+0x12c>)
 8000ddc:	f832 2011 	ldrh.w	r2, [r2, r1, lsl #1]
 8000de0:	2100      	movs	r1, #0
 8000de2:	4618      	mov	r0, r3
 8000de4:	f000 fa47 	bl	8001276 <ledSetStateDuration>
 8000de8:	e016      	b.n	8000e18 <trafficLightUpdate+0xf0>
	    } else {
		    ledSetPeriod(leds[currentColor], durations[currentColor] >> 2, durations[currentColor]);
 8000dea:	4b14      	ldr	r3, [pc, #80]	; (8000e3c <trafficLightUpdate+0x114>)
 8000dec:	781b      	ldrb	r3, [r3, #0]
 8000dee:	461a      	mov	r2, r3
 8000df0:	4b13      	ldr	r3, [pc, #76]	; (8000e40 <trafficLightUpdate+0x118>)
 8000df2:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 8000df6:	4b11      	ldr	r3, [pc, #68]	; (8000e3c <trafficLightUpdate+0x114>)
 8000df8:	781b      	ldrb	r3, [r3, #0]
 8000dfa:	461a      	mov	r2, r3
 8000dfc:	4b15      	ldr	r3, [pc, #84]	; (8000e54 <trafficLightUpdate+0x12c>)
 8000dfe:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8000e02:	089b      	lsrs	r3, r3, #2
 8000e04:	b29b      	uxth	r3, r3
 8000e06:	4a0d      	ldr	r2, [pc, #52]	; (8000e3c <trafficLightUpdate+0x114>)
 8000e08:	7812      	ldrb	r2, [r2, #0]
 8000e0a:	4611      	mov	r1, r2
 8000e0c:	4a11      	ldr	r2, [pc, #68]	; (8000e54 <trafficLightUpdate+0x12c>)
 8000e0e:	f832 2011 	ldrh.w	r2, [r2, r1, lsl #1]
 8000e12:	4619      	mov	r1, r3
 8000e14:	f000 fa12 	bl	800123c <ledSetPeriod>
	    }
    }
    ledUpdateState(leds[RED]);
 8000e18:	4b09      	ldr	r3, [pc, #36]	; (8000e40 <trafficLightUpdate+0x118>)
 8000e1a:	681b      	ldr	r3, [r3, #0]
 8000e1c:	4618      	mov	r0, r3
 8000e1e:	f000 f9a6 	bl	800116e <ledUpdateState>
    ledUpdateState(leds[YELLOW]);
 8000e22:	4b07      	ldr	r3, [pc, #28]	; (8000e40 <trafficLightUpdate+0x118>)
 8000e24:	685b      	ldr	r3, [r3, #4]
 8000e26:	4618      	mov	r0, r3
 8000e28:	f000 f9a1 	bl	800116e <ledUpdateState>
    ledUpdateState(leds[GREEN]);
 8000e2c:	4b04      	ldr	r3, [pc, #16]	; (8000e40 <trafficLightUpdate+0x118>)
 8000e2e:	689b      	ldr	r3, [r3, #8]
 8000e30:	4618      	mov	r0, r3
 8000e32:	f000 f99c 	bl	800116e <ledUpdateState>
}
 8000e36:	bf00      	nop
 8000e38:	bd80      	pop	{r7, pc}
 8000e3a:	bf00      	nop
 8000e3c:	200001d4 	.word	0x200001d4
 8000e40:	200001c8 	.word	0x200001c8
 8000e44:	200001d5 	.word	0x200001d5
 8000e48:	200001d7 	.word	0x200001d7
 8000e4c:	200001d6 	.word	0x200001d6
 8000e50:	2000001c 	.word	0x2000001c
 8000e54:	20000020 	.word	0x20000020

08000e58 <trafficLightInit>:

void trafficLightInit(
		GPIO_TypeDef* red_port, uint16_t red_pin,
		GPIO_TypeDef* yellow_port, uint16_t yellow_pin,
		GPIO_TypeDef* green_port, uint16_t green_pin
) {
 8000e58:	b580      	push	{r7, lr}
 8000e5a:	b084      	sub	sp, #16
 8000e5c:	af00      	add	r7, sp, #0
 8000e5e:	60f8      	str	r0, [r7, #12]
 8000e60:	607a      	str	r2, [r7, #4]
 8000e62:	461a      	mov	r2, r3
 8000e64:	460b      	mov	r3, r1
 8000e66:	817b      	strh	r3, [r7, #10]
 8000e68:	4613      	mov	r3, r2
 8000e6a:	813b      	strh	r3, [r7, #8]
    leds[RED] = ledInit(LED_TURN_OFF, red_port, red_pin);
 8000e6c:	897b      	ldrh	r3, [r7, #10]
 8000e6e:	461a      	mov	r2, r3
 8000e70:	68f9      	ldr	r1, [r7, #12]
 8000e72:	2001      	movs	r0, #1
 8000e74:	f000 f952 	bl	800111c <ledInit>
 8000e78:	4603      	mov	r3, r0
 8000e7a:	4a0c      	ldr	r2, [pc, #48]	; (8000eac <trafficLightInit+0x54>)
 8000e7c:	6013      	str	r3, [r2, #0]
    leds[YELLOW] = ledInit(LED_TURN_OFF, yellow_port, yellow_pin);
 8000e7e:	893b      	ldrh	r3, [r7, #8]
 8000e80:	461a      	mov	r2, r3
 8000e82:	6879      	ldr	r1, [r7, #4]
 8000e84:	2001      	movs	r0, #1
 8000e86:	f000 f949 	bl	800111c <ledInit>
 8000e8a:	4603      	mov	r3, r0
 8000e8c:	4a07      	ldr	r2, [pc, #28]	; (8000eac <trafficLightInit+0x54>)
 8000e8e:	6053      	str	r3, [r2, #4]
    leds[GREEN] = ledInit(LED_TURN_OFF, green_port, green_pin);
 8000e90:	8bbb      	ldrh	r3, [r7, #28]
 8000e92:	461a      	mov	r2, r3
 8000e94:	69b9      	ldr	r1, [r7, #24]
 8000e96:	2001      	movs	r0, #1
 8000e98:	f000 f940 	bl	800111c <ledInit>
 8000e9c:	4603      	mov	r3, r0
 8000e9e:	4a03      	ldr	r2, [pc, #12]	; (8000eac <trafficLightInit+0x54>)
 8000ea0:	6093      	str	r3, [r2, #8]
}
 8000ea2:	bf00      	nop
 8000ea4:	3710      	adds	r7, #16
 8000ea6:	46bd      	mov	sp, r7
 8000ea8:	bd80      	pop	{r7, pc}
 8000eaa:	bf00      	nop
 8000eac:	200001c8 	.word	0x200001c8

08000eb0 <trafficLightStart>:

void trafficLightStart() {
 8000eb0:	b580      	push	{r7, lr}
 8000eb2:	af00      	add	r7, sp, #0
	nextColor = RED;
 8000eb4:	4b04      	ldr	r3, [pc, #16]	; (8000ec8 <trafficLightStart+0x18>)
 8000eb6:	2200      	movs	r2, #0
 8000eb8:	701a      	strb	r2, [r3, #0]
	isNextFlashing = false;
 8000eba:	4b04      	ldr	r3, [pc, #16]	; (8000ecc <trafficLightStart+0x1c>)
 8000ebc:	2200      	movs	r2, #0
 8000ebe:	701a      	strb	r2, [r3, #0]
    trafficLightUpdate();
 8000ec0:	f7ff ff32 	bl	8000d28 <trafficLightUpdate>
}
 8000ec4:	bf00      	nop
 8000ec6:	bd80      	pop	{r7, pc}
 8000ec8:	200001d5 	.word	0x200001d5
 8000ecc:	200001d7 	.word	0x200001d7

08000ed0 <isButtonAllowed>:

bool isButtonAllowed() {
 8000ed0:	b580      	push	{r7, lr}
 8000ed2:	af00      	add	r7, sp, #0
	return currentColor == RED && getMode() == 1;
 8000ed4:	4b08      	ldr	r3, [pc, #32]	; (8000ef8 <isButtonAllowed+0x28>)
 8000ed6:	781b      	ldrb	r3, [r3, #0]
 8000ed8:	2b00      	cmp	r3, #0
 8000eda:	d106      	bne.n	8000eea <isButtonAllowed+0x1a>
 8000edc:	f7ff fe42 	bl	8000b64 <getMode>
 8000ee0:	4603      	mov	r3, r0
 8000ee2:	2b01      	cmp	r3, #1
 8000ee4:	d101      	bne.n	8000eea <isButtonAllowed+0x1a>
 8000ee6:	2301      	movs	r3, #1
 8000ee8:	e000      	b.n	8000eec <isButtonAllowed+0x1c>
 8000eea:	2300      	movs	r3, #0
 8000eec:	f003 0301 	and.w	r3, r3, #1
 8000ef0:	b2db      	uxtb	r3, r3
}
 8000ef2:	4618      	mov	r0, r3
 8000ef4:	bd80      	pop	{r7, pc}
 8000ef6:	bf00      	nop
 8000ef8:	200001d4 	.word	0x200001d4

08000efc <getCurrentColor>:

Color getCurrentColor() {
 8000efc:	b480      	push	{r7}
 8000efe:	af00      	add	r7, sp, #0
	return currentColor;
 8000f00:	4b03      	ldr	r3, [pc, #12]	; (8000f10 <getCurrentColor+0x14>)
 8000f02:	781b      	ldrb	r3, [r3, #0]
}
 8000f04:	4618      	mov	r0, r3
 8000f06:	46bd      	mov	sp, r7
 8000f08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f0c:	4770      	bx	lr
 8000f0e:	bf00      	nop
 8000f10:	200001d4 	.word	0x200001d4

08000f14 <setDurationRED>:

void setDurationRED(int duration) {
 8000f14:	b480      	push	{r7}
 8000f16:	b083      	sub	sp, #12
 8000f18:	af00      	add	r7, sp, #0
 8000f1a:	6078      	str	r0, [r7, #4]
	durationRED = duration;
 8000f1c:	4a04      	ldr	r2, [pc, #16]	; (8000f30 <setDurationRED+0x1c>)
 8000f1e:	687b      	ldr	r3, [r7, #4]
 8000f20:	6013      	str	r3, [r2, #0]
}
 8000f22:	bf00      	nop
 8000f24:	370c      	adds	r7, #12
 8000f26:	46bd      	mov	sp, r7
 8000f28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f2c:	4770      	bx	lr
 8000f2e:	bf00      	nop
 8000f30:	2000001c 	.word	0x2000001c

08000f34 <MX_USART6_UART_Init>:
UART_HandleTypeDef huart6;

/* USART6 init function */

void MX_USART6_UART_Init(void)
{
 8000f34:	b580      	push	{r7, lr}
 8000f36:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 8000f38:	4b11      	ldr	r3, [pc, #68]	; (8000f80 <MX_USART6_UART_Init+0x4c>)
 8000f3a:	4a12      	ldr	r2, [pc, #72]	; (8000f84 <MX_USART6_UART_Init+0x50>)
 8000f3c:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 115200;
 8000f3e:	4b10      	ldr	r3, [pc, #64]	; (8000f80 <MX_USART6_UART_Init+0x4c>)
 8000f40:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000f44:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 8000f46:	4b0e      	ldr	r3, [pc, #56]	; (8000f80 <MX_USART6_UART_Init+0x4c>)
 8000f48:	2200      	movs	r2, #0
 8000f4a:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 8000f4c:	4b0c      	ldr	r3, [pc, #48]	; (8000f80 <MX_USART6_UART_Init+0x4c>)
 8000f4e:	2200      	movs	r2, #0
 8000f50:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 8000f52:	4b0b      	ldr	r3, [pc, #44]	; (8000f80 <MX_USART6_UART_Init+0x4c>)
 8000f54:	2200      	movs	r2, #0
 8000f56:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 8000f58:	4b09      	ldr	r3, [pc, #36]	; (8000f80 <MX_USART6_UART_Init+0x4c>)
 8000f5a:	220c      	movs	r2, #12
 8000f5c:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000f5e:	4b08      	ldr	r3, [pc, #32]	; (8000f80 <MX_USART6_UART_Init+0x4c>)
 8000f60:	2200      	movs	r2, #0
 8000f62:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 8000f64:	4b06      	ldr	r3, [pc, #24]	; (8000f80 <MX_USART6_UART_Init+0x4c>)
 8000f66:	2200      	movs	r2, #0
 8000f68:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 8000f6a:	4805      	ldr	r0, [pc, #20]	; (8000f80 <MX_USART6_UART_Init+0x4c>)
 8000f6c:	f001 fb0a 	bl	8002584 <HAL_UART_Init>
 8000f70:	4603      	mov	r3, r0
 8000f72:	2b00      	cmp	r3, #0
 8000f74:	d001      	beq.n	8000f7a <MX_USART6_UART_Init+0x46>
  {
    Error_Handler();
 8000f76:	f7ff fcaf 	bl	80008d8 <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 8000f7a:	bf00      	nop
 8000f7c:	bd80      	pop	{r7, pc}
 8000f7e:	bf00      	nop
 8000f80:	200001d8 	.word	0x200001d8
 8000f84:	40011400 	.word	0x40011400

08000f88 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000f88:	b580      	push	{r7, lr}
 8000f8a:	b08a      	sub	sp, #40	; 0x28
 8000f8c:	af00      	add	r7, sp, #0
 8000f8e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f90:	f107 0314 	add.w	r3, r7, #20
 8000f94:	2200      	movs	r2, #0
 8000f96:	601a      	str	r2, [r3, #0]
 8000f98:	605a      	str	r2, [r3, #4]
 8000f9a:	609a      	str	r2, [r3, #8]
 8000f9c:	60da      	str	r2, [r3, #12]
 8000f9e:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART6)
 8000fa0:	687b      	ldr	r3, [r7, #4]
 8000fa2:	681b      	ldr	r3, [r3, #0]
 8000fa4:	4a1d      	ldr	r2, [pc, #116]	; (800101c <HAL_UART_MspInit+0x94>)
 8000fa6:	4293      	cmp	r3, r2
 8000fa8:	d133      	bne.n	8001012 <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN USART6_MspInit 0 */

  /* USER CODE END USART6_MspInit 0 */
    /* USART6 clock enable */
    __HAL_RCC_USART6_CLK_ENABLE();
 8000faa:	2300      	movs	r3, #0
 8000fac:	613b      	str	r3, [r7, #16]
 8000fae:	4b1c      	ldr	r3, [pc, #112]	; (8001020 <HAL_UART_MspInit+0x98>)
 8000fb0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000fb2:	4a1b      	ldr	r2, [pc, #108]	; (8001020 <HAL_UART_MspInit+0x98>)
 8000fb4:	f043 0320 	orr.w	r3, r3, #32
 8000fb8:	6453      	str	r3, [r2, #68]	; 0x44
 8000fba:	4b19      	ldr	r3, [pc, #100]	; (8001020 <HAL_UART_MspInit+0x98>)
 8000fbc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000fbe:	f003 0320 	and.w	r3, r3, #32
 8000fc2:	613b      	str	r3, [r7, #16]
 8000fc4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000fc6:	2300      	movs	r3, #0
 8000fc8:	60fb      	str	r3, [r7, #12]
 8000fca:	4b15      	ldr	r3, [pc, #84]	; (8001020 <HAL_UART_MspInit+0x98>)
 8000fcc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fce:	4a14      	ldr	r2, [pc, #80]	; (8001020 <HAL_UART_MspInit+0x98>)
 8000fd0:	f043 0304 	orr.w	r3, r3, #4
 8000fd4:	6313      	str	r3, [r2, #48]	; 0x30
 8000fd6:	4b12      	ldr	r3, [pc, #72]	; (8001020 <HAL_UART_MspInit+0x98>)
 8000fd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fda:	f003 0304 	and.w	r3, r3, #4
 8000fde:	60fb      	str	r3, [r7, #12]
 8000fe0:	68fb      	ldr	r3, [r7, #12]
    /**USART6 GPIO Configuration
    PC6     ------> USART6_TX
    PC7     ------> USART6_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000fe2:	23c0      	movs	r3, #192	; 0xc0
 8000fe4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fe6:	2302      	movs	r3, #2
 8000fe8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fea:	2300      	movs	r3, #0
 8000fec:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000fee:	2303      	movs	r3, #3
 8000ff0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8000ff2:	2308      	movs	r3, #8
 8000ff4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000ff6:	f107 0314 	add.w	r3, r7, #20
 8000ffa:	4619      	mov	r1, r3
 8000ffc:	4809      	ldr	r0, [pc, #36]	; (8001024 <HAL_UART_MspInit+0x9c>)
 8000ffe:	f000 fc8b 	bl	8001918 <HAL_GPIO_Init>

    /* USART6 interrupt Init */
    HAL_NVIC_SetPriority(USART6_IRQn, 0, 0);
 8001002:	2200      	movs	r2, #0
 8001004:	2100      	movs	r1, #0
 8001006:	2047      	movs	r0, #71	; 0x47
 8001008:	f000 fbbd 	bl	8001786 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART6_IRQn);
 800100c:	2047      	movs	r0, #71	; 0x47
 800100e:	f000 fbd6 	bl	80017be <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }
}
 8001012:	bf00      	nop
 8001014:	3728      	adds	r7, #40	; 0x28
 8001016:	46bd      	mov	sp, r7
 8001018:	bd80      	pop	{r7, pc}
 800101a:	bf00      	nop
 800101c:	40011400 	.word	0x40011400
 8001020:	40023800 	.word	0x40023800
 8001024:	40020800 	.word	0x40020800

08001028 <buttonInit>:

static GPIO_TypeDef* port;
static uint16_t pin;
static buttonActionListener onClickHandler = NULL;

void buttonInit(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin) {
 8001028:	b480      	push	{r7}
 800102a:	b083      	sub	sp, #12
 800102c:	af00      	add	r7, sp, #0
 800102e:	6078      	str	r0, [r7, #4]
 8001030:	460b      	mov	r3, r1
 8001032:	807b      	strh	r3, [r7, #2]
	port = GPIOx;
 8001034:	4a07      	ldr	r2, [pc, #28]	; (8001054 <buttonInit+0x2c>)
 8001036:	687b      	ldr	r3, [r7, #4]
 8001038:	6013      	str	r3, [r2, #0]
    pin = GPIO_Pin;
 800103a:	4a07      	ldr	r2, [pc, #28]	; (8001058 <buttonInit+0x30>)
 800103c:	887b      	ldrh	r3, [r7, #2]
 800103e:	8013      	strh	r3, [r2, #0]
    onClickHandler = NULL;
 8001040:	4b06      	ldr	r3, [pc, #24]	; (800105c <buttonInit+0x34>)
 8001042:	2200      	movs	r2, #0
 8001044:	601a      	str	r2, [r3, #0]
}
 8001046:	bf00      	nop
 8001048:	370c      	adds	r7, #12
 800104a:	46bd      	mov	sp, r7
 800104c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001050:	4770      	bx	lr
 8001052:	bf00      	nop
 8001054:	2000021c 	.word	0x2000021c
 8001058:	20000220 	.word	0x20000220
 800105c:	20000224 	.word	0x20000224

08001060 <buttonSetOnClick>:

void buttonSetOnClick(buttonActionListener actionListener) {
 8001060:	b480      	push	{r7}
 8001062:	b083      	sub	sp, #12
 8001064:	af00      	add	r7, sp, #0
 8001066:	6078      	str	r0, [r7, #4]
    onClickHandler = actionListener;
 8001068:	4a04      	ldr	r2, [pc, #16]	; (800107c <buttonSetOnClick+0x1c>)
 800106a:	687b      	ldr	r3, [r7, #4]
 800106c:	6013      	str	r3, [r2, #0]
}
 800106e:	bf00      	nop
 8001070:	370c      	adds	r7, #12
 8001072:	46bd      	mov	sp, r7
 8001074:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001078:	4770      	bx	lr
 800107a:	bf00      	nop
 800107c:	20000224 	.word	0x20000224

08001080 <buttonIsPressed>:

bool buttonIsPressed() {
 8001080:	b580      	push	{r7, lr}
 8001082:	af00      	add	r7, sp, #0
    return HAL_GPIO_ReadPin(port, pin) == GPIO_PIN_RESET ? true : false;
 8001084:	4b07      	ldr	r3, [pc, #28]	; (80010a4 <buttonIsPressed+0x24>)
 8001086:	681b      	ldr	r3, [r3, #0]
 8001088:	4a07      	ldr	r2, [pc, #28]	; (80010a8 <buttonIsPressed+0x28>)
 800108a:	8812      	ldrh	r2, [r2, #0]
 800108c:	4611      	mov	r1, r2
 800108e:	4618      	mov	r0, r3
 8001090:	f000 fdee 	bl	8001c70 <HAL_GPIO_ReadPin>
 8001094:	4603      	mov	r3, r0
 8001096:	2b00      	cmp	r3, #0
 8001098:	bf0c      	ite	eq
 800109a:	2301      	moveq	r3, #1
 800109c:	2300      	movne	r3, #0
 800109e:	b2db      	uxtb	r3, r3
}
 80010a0:	4618      	mov	r0, r3
 80010a2:	bd80      	pop	{r7, pc}
 80010a4:	2000021c 	.word	0x2000021c
 80010a8:	20000220 	.word	0x20000220

080010ac <buttonUpdateState>:

static volatile uint32_t clickStart = 0;

void buttonUpdateState() {
 80010ac:	b580      	push	{r7, lr}
 80010ae:	b082      	sub	sp, #8
 80010b0:	af00      	add	r7, sp, #0
    uint32_t time = HAL_GetTick();
 80010b2:	f000 fa81 	bl	80015b8 <HAL_GetTick>
 80010b6:	6078      	str	r0, [r7, #4]
    bool isPressed = buttonIsPressed();
 80010b8:	f7ff ffe2 	bl	8001080 <buttonIsPressed>
 80010bc:	4603      	mov	r3, r0
 80010be:	70fb      	strb	r3, [r7, #3]

    if (!isPressed && clickStart > 0 && (time - clickStart) >= SHORT_CLICK) {
 80010c0:	78fb      	ldrb	r3, [r7, #3]
 80010c2:	f083 0301 	eor.w	r3, r3, #1
 80010c6:	b2db      	uxtb	r3, r3
 80010c8:	2b00      	cmp	r3, #0
 80010ca:	d014      	beq.n	80010f6 <buttonUpdateState+0x4a>
 80010cc:	4b11      	ldr	r3, [pc, #68]	; (8001114 <buttonUpdateState+0x68>)
 80010ce:	681b      	ldr	r3, [r3, #0]
 80010d0:	2b00      	cmp	r3, #0
 80010d2:	d010      	beq.n	80010f6 <buttonUpdateState+0x4a>
 80010d4:	4b0f      	ldr	r3, [pc, #60]	; (8001114 <buttonUpdateState+0x68>)
 80010d6:	681b      	ldr	r3, [r3, #0]
 80010d8:	687a      	ldr	r2, [r7, #4]
 80010da:	1ad3      	subs	r3, r2, r3
 80010dc:	2b31      	cmp	r3, #49	; 0x31
 80010de:	d90a      	bls.n	80010f6 <buttonUpdateState+0x4a>
        clickStart = 0;
 80010e0:	4b0c      	ldr	r3, [pc, #48]	; (8001114 <buttonUpdateState+0x68>)
 80010e2:	2200      	movs	r2, #0
 80010e4:	601a      	str	r2, [r3, #0]
        if (onClickHandler != NULL)
 80010e6:	4b0c      	ldr	r3, [pc, #48]	; (8001118 <buttonUpdateState+0x6c>)
 80010e8:	681b      	ldr	r3, [r3, #0]
 80010ea:	2b00      	cmp	r3, #0
 80010ec:	d00e      	beq.n	800110c <buttonUpdateState+0x60>
            (*onClickHandler)();
 80010ee:	4b0a      	ldr	r3, [pc, #40]	; (8001118 <buttonUpdateState+0x6c>)
 80010f0:	681b      	ldr	r3, [r3, #0]
 80010f2:	4798      	blx	r3
        if (onClickHandler != NULL)
 80010f4:	e00a      	b.n	800110c <buttonUpdateState+0x60>
    } else if (isPressed && clickStart == 0) {
 80010f6:	78fb      	ldrb	r3, [r7, #3]
 80010f8:	2b00      	cmp	r3, #0
 80010fa:	d007      	beq.n	800110c <buttonUpdateState+0x60>
 80010fc:	4b05      	ldr	r3, [pc, #20]	; (8001114 <buttonUpdateState+0x68>)
 80010fe:	681b      	ldr	r3, [r3, #0]
 8001100:	2b00      	cmp	r3, #0
 8001102:	d103      	bne.n	800110c <buttonUpdateState+0x60>
        clickStart = time;
 8001104:	4a03      	ldr	r2, [pc, #12]	; (8001114 <buttonUpdateState+0x68>)
 8001106:	687b      	ldr	r3, [r7, #4]
 8001108:	6013      	str	r3, [r2, #0]
    }
}
 800110a:	e7ff      	b.n	800110c <buttonUpdateState+0x60>
 800110c:	bf00      	nop
 800110e:	3708      	adds	r7, #8
 8001110:	46bd      	mov	sp, r7
 8001112:	bd80      	pop	{r7, pc}
 8001114:	20000228 	.word	0x20000228
 8001118:	20000224 	.word	0x20000224

0800111c <ledInit>:
};

static void ledHardwareSet(Led *led);
static void ledToggleState(Led *led);

struct Led* ledInit(LedState initState, GPIO_TypeDef* port, uint16_t pin) {
 800111c:	b580      	push	{r7, lr}
 800111e:	b08a      	sub	sp, #40	; 0x28
 8001120:	af00      	add	r7, sp, #0
 8001122:	4603      	mov	r3, r0
 8001124:	6039      	str	r1, [r7, #0]
 8001126:	71fb      	strb	r3, [r7, #7]
 8001128:	4613      	mov	r3, r2
 800112a:	80bb      	strh	r3, [r7, #4]
    Led *led = (Led *) malloc(sizeof(Led));
 800112c:	2018      	movs	r0, #24
 800112e:	f002 fbab 	bl	8003888 <malloc>
 8001132:	4603      	mov	r3, r0
 8001134:	627b      	str	r3, [r7, #36]	; 0x24
    *led = (Led) { .state = initState, .startTime = 0, .duration = 0, .period = 0, .port = port, .pin = pin };
 8001136:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001138:	79fa      	ldrb	r2, [r7, #7]
 800113a:	701a      	strb	r2, [r3, #0]
 800113c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800113e:	2200      	movs	r2, #0
 8001140:	605a      	str	r2, [r3, #4]
 8001142:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001144:	2200      	movs	r2, #0
 8001146:	609a      	str	r2, [r3, #8]
 8001148:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800114a:	2200      	movs	r2, #0
 800114c:	60da      	str	r2, [r3, #12]
 800114e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001150:	683a      	ldr	r2, [r7, #0]
 8001152:	611a      	str	r2, [r3, #16]
 8001154:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001156:	88ba      	ldrh	r2, [r7, #4]
 8001158:	829a      	strh	r2, [r3, #20]
    ledSetState(led, initState);
 800115a:	79fb      	ldrb	r3, [r7, #7]
 800115c:	4619      	mov	r1, r3
 800115e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8001160:	f000 f856 	bl	8001210 <ledSetState>
    return led;
 8001164:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8001166:	4618      	mov	r0, r3
 8001168:	3728      	adds	r7, #40	; 0x28
 800116a:	46bd      	mov	sp, r7
 800116c:	bd80      	pop	{r7, pc}

0800116e <ledUpdateState>:

void ledUpdateState(Led *led) {
 800116e:	b580      	push	{r7, lr}
 8001170:	b084      	sub	sp, #16
 8001172:	af00      	add	r7, sp, #0
 8001174:	6078      	str	r0, [r7, #4]
    if (led->duration == 0 && led->period == 0) {
 8001176:	687b      	ldr	r3, [r7, #4]
 8001178:	689b      	ldr	r3, [r3, #8]
 800117a:	2b00      	cmp	r3, #0
 800117c:	d103      	bne.n	8001186 <ledUpdateState+0x18>
 800117e:	687b      	ldr	r3, [r7, #4]
 8001180:	68db      	ldr	r3, [r3, #12]
 8001182:	2b00      	cmp	r3, #0
 8001184:	d040      	beq.n	8001208 <ledUpdateState+0x9a>
        return;
    }
    uint32_t time = HAL_GetTick();
 8001186:	f000 fa17 	bl	80015b8 <HAL_GetTick>
 800118a:	60f8      	str	r0, [r7, #12]
    uint16_t delta = time - led->startTime;
 800118c:	68fb      	ldr	r3, [r7, #12]
 800118e:	b29a      	uxth	r2, r3
 8001190:	687b      	ldr	r3, [r7, #4]
 8001192:	685b      	ldr	r3, [r3, #4]
 8001194:	b29b      	uxth	r3, r3
 8001196:	1ad3      	subs	r3, r2, r3
 8001198:	817b      	strh	r3, [r7, #10]
    if (led->period > 0 && delta >= led->period) {
 800119a:	687b      	ldr	r3, [r7, #4]
 800119c:	68db      	ldr	r3, [r3, #12]
 800119e:	2b00      	cmp	r3, #0
 80011a0:	dd23      	ble.n	80011ea <ledUpdateState+0x7c>
 80011a2:	897a      	ldrh	r2, [r7, #10]
 80011a4:	687b      	ldr	r3, [r7, #4]
 80011a6:	68db      	ldr	r3, [r3, #12]
 80011a8:	429a      	cmp	r2, r3
 80011aa:	db1e      	blt.n	80011ea <ledUpdateState+0x7c>
        led->duration -= led->period;
 80011ac:	687b      	ldr	r3, [r7, #4]
 80011ae:	689a      	ldr	r2, [r3, #8]
 80011b0:	687b      	ldr	r3, [r7, #4]
 80011b2:	68db      	ldr	r3, [r3, #12]
 80011b4:	1ad2      	subs	r2, r2, r3
 80011b6:	687b      	ldr	r3, [r7, #4]
 80011b8:	609a      	str	r2, [r3, #8]
        if (led->duration <= 0) {
 80011ba:	687b      	ldr	r3, [r7, #4]
 80011bc:	689b      	ldr	r3, [r3, #8]
 80011be:	2b00      	cmp	r3, #0
 80011c0:	dc0a      	bgt.n	80011d8 <ledUpdateState+0x6a>
            ledSetState(led, LED_TURN_OFF);
 80011c2:	2101      	movs	r1, #1
 80011c4:	6878      	ldr	r0, [r7, #4]
 80011c6:	f000 f823 	bl	8001210 <ledSetState>
            led->period = 0;
 80011ca:	687b      	ldr	r3, [r7, #4]
 80011cc:	2200      	movs	r2, #0
 80011ce:	60da      	str	r2, [r3, #12]
            led->duration = 0;
 80011d0:	687b      	ldr	r3, [r7, #4]
 80011d2:	2200      	movs	r2, #0
 80011d4:	609a      	str	r2, [r3, #8]
        if (led->duration <= 0) {
 80011d6:	e018      	b.n	800120a <ledUpdateState+0x9c>
        } else {
            ledToggleState(led);
 80011d8:	6878      	ldr	r0, [r7, #4]
 80011da:	f000 f881 	bl	80012e0 <ledToggleState>
            led->startTime = HAL_GetTick();
 80011de:	f000 f9eb 	bl	80015b8 <HAL_GetTick>
 80011e2:	4602      	mov	r2, r0
 80011e4:	687b      	ldr	r3, [r7, #4]
 80011e6:	605a      	str	r2, [r3, #4]
        if (led->duration <= 0) {
 80011e8:	e00f      	b.n	800120a <ledUpdateState+0x9c>
        }
    } else if (time - led->startTime >= led->duration) {
 80011ea:	687b      	ldr	r3, [r7, #4]
 80011ec:	685b      	ldr	r3, [r3, #4]
 80011ee:	68fa      	ldr	r2, [r7, #12]
 80011f0:	1ad3      	subs	r3, r2, r3
 80011f2:	687a      	ldr	r2, [r7, #4]
 80011f4:	6892      	ldr	r2, [r2, #8]
 80011f6:	4293      	cmp	r3, r2
 80011f8:	d307      	bcc.n	800120a <ledUpdateState+0x9c>
        ledToggleState(led);
 80011fa:	6878      	ldr	r0, [r7, #4]
 80011fc:	f000 f870 	bl	80012e0 <ledToggleState>
        led->duration = 0;
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	2200      	movs	r2, #0
 8001204:	609a      	str	r2, [r3, #8]
 8001206:	e000      	b.n	800120a <ledUpdateState+0x9c>
        return;
 8001208:	bf00      	nop
    }
}
 800120a:	3710      	adds	r7, #16
 800120c:	46bd      	mov	sp, r7
 800120e:	bd80      	pop	{r7, pc}

08001210 <ledSetState>:

void ledSetState(Led *led, LedState state) {
 8001210:	b580      	push	{r7, lr}
 8001212:	b082      	sub	sp, #8
 8001214:	af00      	add	r7, sp, #0
 8001216:	6078      	str	r0, [r7, #4]
 8001218:	460b      	mov	r3, r1
 800121a:	70fb      	strb	r3, [r7, #3]
    led->state = state;
 800121c:	687b      	ldr	r3, [r7, #4]
 800121e:	78fa      	ldrb	r2, [r7, #3]
 8001220:	701a      	strb	r2, [r3, #0]
    led->duration = 0;
 8001222:	687b      	ldr	r3, [r7, #4]
 8001224:	2200      	movs	r2, #0
 8001226:	609a      	str	r2, [r3, #8]
    led->period = 0;
 8001228:	687b      	ldr	r3, [r7, #4]
 800122a:	2200      	movs	r2, #0
 800122c:	60da      	str	r2, [r3, #12]
    ledHardwareSet(led);
 800122e:	6878      	ldr	r0, [r7, #4]
 8001230:	f000 f86b 	bl	800130a <ledHardwareSet>
}
 8001234:	bf00      	nop
 8001236:	3708      	adds	r7, #8
 8001238:	46bd      	mov	sp, r7
 800123a:	bd80      	pop	{r7, pc}

0800123c <ledSetPeriod>:

void ledSetPeriod(Led *led, uint16_t period, uint16_t duration) {
 800123c:	b580      	push	{r7, lr}
 800123e:	b082      	sub	sp, #8
 8001240:	af00      	add	r7, sp, #0
 8001242:	6078      	str	r0, [r7, #4]
 8001244:	460b      	mov	r3, r1
 8001246:	807b      	strh	r3, [r7, #2]
 8001248:	4613      	mov	r3, r2
 800124a:	803b      	strh	r3, [r7, #0]
    led->state = LED_TURN_ON;
 800124c:	687b      	ldr	r3, [r7, #4]
 800124e:	2200      	movs	r2, #0
 8001250:	701a      	strb	r2, [r3, #0]
    led->period = period;
 8001252:	887a      	ldrh	r2, [r7, #2]
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	60da      	str	r2, [r3, #12]
    led->duration = duration;
 8001258:	883a      	ldrh	r2, [r7, #0]
 800125a:	687b      	ldr	r3, [r7, #4]
 800125c:	609a      	str	r2, [r3, #8]
    led->startTime = HAL_GetTick();
 800125e:	f000 f9ab 	bl	80015b8 <HAL_GetTick>
 8001262:	4602      	mov	r2, r0
 8001264:	687b      	ldr	r3, [r7, #4]
 8001266:	605a      	str	r2, [r3, #4]
    ledHardwareSet(led);
 8001268:	6878      	ldr	r0, [r7, #4]
 800126a:	f000 f84e 	bl	800130a <ledHardwareSet>
}
 800126e:	bf00      	nop
 8001270:	3708      	adds	r7, #8
 8001272:	46bd      	mov	sp, r7
 8001274:	bd80      	pop	{r7, pc}

08001276 <ledSetStateDuration>:

void ledSetStateDuration(Led *led, LedState state, uint16_t duration) {
 8001276:	b580      	push	{r7, lr}
 8001278:	b082      	sub	sp, #8
 800127a:	af00      	add	r7, sp, #0
 800127c:	6078      	str	r0, [r7, #4]
 800127e:	460b      	mov	r3, r1
 8001280:	70fb      	strb	r3, [r7, #3]
 8001282:	4613      	mov	r3, r2
 8001284:	803b      	strh	r3, [r7, #0]
    led->state = state;
 8001286:	687b      	ldr	r3, [r7, #4]
 8001288:	78fa      	ldrb	r2, [r7, #3]
 800128a:	701a      	strb	r2, [r3, #0]
    led->period = 0;
 800128c:	687b      	ldr	r3, [r7, #4]
 800128e:	2200      	movs	r2, #0
 8001290:	60da      	str	r2, [r3, #12]
    led->duration = duration;
 8001292:	883a      	ldrh	r2, [r7, #0]
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	609a      	str	r2, [r3, #8]
    led->startTime = HAL_GetTick();
 8001298:	f000 f98e 	bl	80015b8 <HAL_GetTick>
 800129c:	4602      	mov	r2, r0
 800129e:	687b      	ldr	r3, [r7, #4]
 80012a0:	605a      	str	r2, [r3, #4]
    ledHardwareSet(led);
 80012a2:	6878      	ldr	r0, [r7, #4]
 80012a4:	f000 f831 	bl	800130a <ledHardwareSet>
}
 80012a8:	bf00      	nop
 80012aa:	3708      	adds	r7, #8
 80012ac:	46bd      	mov	sp, r7
 80012ae:	bd80      	pop	{r7, pc}

080012b0 <ledFinishedLightning>:

LedState ledGetState(Led *led) {
    return led->state;
}

bool ledFinishedLightning(Led *led) {
 80012b0:	b480      	push	{r7}
 80012b2:	b083      	sub	sp, #12
 80012b4:	af00      	add	r7, sp, #0
 80012b6:	6078      	str	r0, [r7, #4]
    return led->duration == 0 && led->period == 0;
 80012b8:	687b      	ldr	r3, [r7, #4]
 80012ba:	689b      	ldr	r3, [r3, #8]
 80012bc:	2b00      	cmp	r3, #0
 80012be:	d105      	bne.n	80012cc <ledFinishedLightning+0x1c>
 80012c0:	687b      	ldr	r3, [r7, #4]
 80012c2:	68db      	ldr	r3, [r3, #12]
 80012c4:	2b00      	cmp	r3, #0
 80012c6:	d101      	bne.n	80012cc <ledFinishedLightning+0x1c>
 80012c8:	2301      	movs	r3, #1
 80012ca:	e000      	b.n	80012ce <ledFinishedLightning+0x1e>
 80012cc:	2300      	movs	r3, #0
 80012ce:	f003 0301 	and.w	r3, r3, #1
 80012d2:	b2db      	uxtb	r3, r3
}
 80012d4:	4618      	mov	r0, r3
 80012d6:	370c      	adds	r7, #12
 80012d8:	46bd      	mov	sp, r7
 80012da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012de:	4770      	bx	lr

080012e0 <ledToggleState>:

static void ledToggleState(Led *led) {
 80012e0:	b580      	push	{r7, lr}
 80012e2:	b082      	sub	sp, #8
 80012e4:	af00      	add	r7, sp, #0
 80012e6:	6078      	str	r0, [r7, #4]
    led->state = led->state == LED_TURN_ON ? LED_TURN_OFF : LED_TURN_ON;
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	781b      	ldrb	r3, [r3, #0]
 80012ec:	2b00      	cmp	r3, #0
 80012ee:	bf0c      	ite	eq
 80012f0:	2301      	moveq	r3, #1
 80012f2:	2300      	movne	r3, #0
 80012f4:	b2db      	uxtb	r3, r3
 80012f6:	461a      	mov	r2, r3
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	701a      	strb	r2, [r3, #0]
    ledHardwareSet(led);
 80012fc:	6878      	ldr	r0, [r7, #4]
 80012fe:	f000 f804 	bl	800130a <ledHardwareSet>
}
 8001302:	bf00      	nop
 8001304:	3708      	adds	r7, #8
 8001306:	46bd      	mov	sp, r7
 8001308:	bd80      	pop	{r7, pc}

0800130a <ledHardwareSet>:

static void ledHardwareSet(Led *led) {
 800130a:	b580      	push	{r7, lr}
 800130c:	b082      	sub	sp, #8
 800130e:	af00      	add	r7, sp, #0
 8001310:	6078      	str	r0, [r7, #4]
    HAL_GPIO_WritePin(led->port, led->pin, led->state == LED_TURN_ON ? GPIO_PIN_SET : GPIO_PIN_RESET);
 8001312:	687b      	ldr	r3, [r7, #4]
 8001314:	6918      	ldr	r0, [r3, #16]
 8001316:	687b      	ldr	r3, [r7, #4]
 8001318:	8a99      	ldrh	r1, [r3, #20]
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	781b      	ldrb	r3, [r3, #0]
 800131e:	2b00      	cmp	r3, #0
 8001320:	bf0c      	ite	eq
 8001322:	2301      	moveq	r3, #1
 8001324:	2300      	movne	r3, #0
 8001326:	b2db      	uxtb	r3, r3
 8001328:	461a      	mov	r2, r3
 800132a:	f000 fcb9 	bl	8001ca0 <HAL_GPIO_WritePin>
}
 800132e:	bf00      	nop
 8001330:	3708      	adds	r7, #8
 8001332:	46bd      	mov	sp, r7
 8001334:	bd80      	pop	{r7, pc}
	...

08001338 <recieve>:

char nextByte;
char transmitBuffer[512];
int needToTransmit = 0;

void recieve() {
 8001338:	b580      	push	{r7, lr}
 800133a:	af00      	add	r7, sp, #0
	if (getInterruptsEnabled() == 1) {
 800133c:	f7ff fc1e 	bl	8000b7c <getInterruptsEnabled>
 8001340:	4603      	mov	r3, r0
 8001342:	2b01      	cmp	r3, #1
 8001344:	d105      	bne.n	8001352 <recieve+0x1a>
		HAL_UART_Receive_IT(&huart6, &nextByte, 1);
 8001346:	2201      	movs	r2, #1
 8001348:	490b      	ldr	r1, [pc, #44]	; (8001378 <recieve+0x40>)
 800134a:	480c      	ldr	r0, [pc, #48]	; (800137c <recieve+0x44>)
 800134c:	f001 fae0 	bl	8002910 <HAL_UART_Receive_IT>
		if (HAL_UART_Receive(&huart6, &nextByte, 1, 10) == HAL_OK) {
			buffer_push(nextByte);
			check();
		}
	}
}
 8001350:	e00f      	b.n	8001372 <recieve+0x3a>
		if (HAL_UART_Receive(&huart6, &nextByte, 1, 10) == HAL_OK) {
 8001352:	230a      	movs	r3, #10
 8001354:	2201      	movs	r2, #1
 8001356:	4908      	ldr	r1, [pc, #32]	; (8001378 <recieve+0x40>)
 8001358:	4808      	ldr	r0, [pc, #32]	; (800137c <recieve+0x44>)
 800135a:	f001 f9f2 	bl	8002742 <HAL_UART_Receive>
 800135e:	4603      	mov	r3, r0
 8001360:	2b00      	cmp	r3, #0
 8001362:	d106      	bne.n	8001372 <recieve+0x3a>
			buffer_push(nextByte);
 8001364:	4b04      	ldr	r3, [pc, #16]	; (8001378 <recieve+0x40>)
 8001366:	781b      	ldrb	r3, [r3, #0]
 8001368:	4618      	mov	r0, r3
 800136a:	f7ff f923 	bl	80005b4 <buffer_push>
			check();
 800136e:	f7ff fab9 	bl	80008e4 <check>
}
 8001372:	bf00      	nop
 8001374:	bd80      	pop	{r7, pc}
 8001376:	bf00      	nop
 8001378:	2000022c 	.word	0x2000022c
 800137c:	200001d8 	.word	0x200001d8

08001380 <transmit>:

void transmit(char msg[]) {
 8001380:	b580      	push	{r7, lr}
 8001382:	b082      	sub	sp, #8
 8001384:	af00      	add	r7, sp, #0
 8001386:	6078      	str	r0, [r7, #4]
	if (getInterruptsEnabled() == 1) {
 8001388:	f7ff fbf8 	bl	8000b7c <getInterruptsEnabled>
 800138c:	4603      	mov	r3, r0
 800138e:	2b01      	cmp	r3, #1
 8001390:	d10c      	bne.n	80013ac <transmit+0x2c>
		if (HAL_UART_Transmit_IT(&huart6, (uint8_t*) msg, sizeof(msg)) != HAL_OK) {
 8001392:	2204      	movs	r2, #4
 8001394:	6879      	ldr	r1, [r7, #4]
 8001396:	480a      	ldr	r0, [pc, #40]	; (80013c0 <transmit+0x40>)
 8001398:	f001 fa75 	bl	8002886 <HAL_UART_Transmit_IT>
 800139c:	4603      	mov	r3, r0
 800139e:	2b00      	cmp	r3, #0
 80013a0:	d00a      	beq.n	80013b8 <transmit+0x38>
			strcat(transmitBuffer, msg);
 80013a2:	6879      	ldr	r1, [r7, #4]
 80013a4:	4807      	ldr	r0, [pc, #28]	; (80013c4 <transmit+0x44>)
 80013a6:	f002 fb9d 	bl	8003ae4 <strcat>
		}
	} else {
		HAL_UART_Transmit(&huart6, (uint8_t*) msg, sizeof(msg), 10);
	}
}
 80013aa:	e005      	b.n	80013b8 <transmit+0x38>
		HAL_UART_Transmit(&huart6, (uint8_t*) msg, sizeof(msg), 10);
 80013ac:	230a      	movs	r3, #10
 80013ae:	2204      	movs	r2, #4
 80013b0:	6879      	ldr	r1, [r7, #4]
 80013b2:	4803      	ldr	r0, [pc, #12]	; (80013c0 <transmit+0x40>)
 80013b4:	f001 f933 	bl	800261e <HAL_UART_Transmit>
}
 80013b8:	bf00      	nop
 80013ba:	3708      	adds	r7, #8
 80013bc:	46bd      	mov	sp, r7
 80013be:	bd80      	pop	{r7, pc}
 80013c0:	200001d8 	.word	0x200001d8
 80013c4:	20000230 	.word	0x20000230

080013c8 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 80013c8:	b580      	push	{r7, lr}
 80013ca:	b082      	sub	sp, #8
 80013cc:	af00      	add	r7, sp, #0
 80013ce:	6078      	str	r0, [r7, #4]
	if (huart == &huart6) {
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	4a04      	ldr	r2, [pc, #16]	; (80013e4 <HAL_UART_RxCpltCallback+0x1c>)
 80013d4:	4293      	cmp	r3, r2
 80013d6:	d101      	bne.n	80013dc <HAL_UART_RxCpltCallback+0x14>
		check();
 80013d8:	f7ff fa84 	bl	80008e4 <check>
	}
}
 80013dc:	bf00      	nop
 80013de:	3708      	adds	r7, #8
 80013e0:	46bd      	mov	sp, r7
 80013e2:	bd80      	pop	{r7, pc}
 80013e4:	200001d8 	.word	0x200001d8

080013e8 <HAL_UART_TxCpltCallback>:

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart) {
 80013e8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80013ec:	b085      	sub	sp, #20
 80013ee:	af00      	add	r7, sp, #0
 80013f0:	6078      	str	r0, [r7, #4]
	if (huart == &huart6) {
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	4a25      	ldr	r2, [pc, #148]	; (800148c <HAL_UART_TxCpltCallback+0xa4>)
 80013f6:	4293      	cmp	r3, r2
 80013f8:	d142      	bne.n	8001480 <HAL_UART_TxCpltCallback+0x98>
		if (strcmp(transmitBuffer, "") != 0) {
 80013fa:	4b25      	ldr	r3, [pc, #148]	; (8001490 <HAL_UART_TxCpltCallback+0xa8>)
 80013fc:	781b      	ldrb	r3, [r3, #0]
 80013fe:	2b00      	cmp	r3, #0
 8001400:	d03e      	beq.n	8001480 <HAL_UART_TxCpltCallback+0x98>
 8001402:	466b      	mov	r3, sp
 8001404:	461e      	mov	r6, r3
			char buf[needToTransmit];
 8001406:	4b23      	ldr	r3, [pc, #140]	; (8001494 <HAL_UART_TxCpltCallback+0xac>)
 8001408:	6819      	ldr	r1, [r3, #0]
 800140a:	1e4b      	subs	r3, r1, #1
 800140c:	60fb      	str	r3, [r7, #12]
 800140e:	460a      	mov	r2, r1
 8001410:	2300      	movs	r3, #0
 8001412:	4690      	mov	r8, r2
 8001414:	4699      	mov	r9, r3
 8001416:	f04f 0200 	mov.w	r2, #0
 800141a:	f04f 0300 	mov.w	r3, #0
 800141e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001422:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001426:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800142a:	460a      	mov	r2, r1
 800142c:	2300      	movs	r3, #0
 800142e:	4614      	mov	r4, r2
 8001430:	461d      	mov	r5, r3
 8001432:	f04f 0200 	mov.w	r2, #0
 8001436:	f04f 0300 	mov.w	r3, #0
 800143a:	00eb      	lsls	r3, r5, #3
 800143c:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001440:	00e2      	lsls	r2, r4, #3
 8001442:	460b      	mov	r3, r1
 8001444:	3307      	adds	r3, #7
 8001446:	08db      	lsrs	r3, r3, #3
 8001448:	00db      	lsls	r3, r3, #3
 800144a:	ebad 0d03 	sub.w	sp, sp, r3
 800144e:	466b      	mov	r3, sp
 8001450:	3300      	adds	r3, #0
 8001452:	60bb      	str	r3, [r7, #8]
			memcpy(buf, transmitBuffer, needToTransmit);
 8001454:	4b0f      	ldr	r3, [pc, #60]	; (8001494 <HAL_UART_TxCpltCallback+0xac>)
 8001456:	681b      	ldr	r3, [r3, #0]
 8001458:	461a      	mov	r2, r3
 800145a:	490d      	ldr	r1, [pc, #52]	; (8001490 <HAL_UART_TxCpltCallback+0xa8>)
 800145c:	68b8      	ldr	r0, [r7, #8]
 800145e:	f002 fa1b 	bl	8003898 <memcpy>
			HAL_UART_Transmit_IT(&huart6, (uint8_t*) buf, needToTransmit);
 8001462:	4b0c      	ldr	r3, [pc, #48]	; (8001494 <HAL_UART_TxCpltCallback+0xac>)
 8001464:	681b      	ldr	r3, [r3, #0]
 8001466:	b29b      	uxth	r3, r3
 8001468:	461a      	mov	r2, r3
 800146a:	68b9      	ldr	r1, [r7, #8]
 800146c:	4807      	ldr	r0, [pc, #28]	; (800148c <HAL_UART_TxCpltCallback+0xa4>)
 800146e:	f001 fa0a 	bl	8002886 <HAL_UART_Transmit_IT>
			needToTransmit = 0;
 8001472:	4b08      	ldr	r3, [pc, #32]	; (8001494 <HAL_UART_TxCpltCallback+0xac>)
 8001474:	2200      	movs	r2, #0
 8001476:	601a      	str	r2, [r3, #0]
			strcpy(transmitBuffer, "");		}
 8001478:	4b05      	ldr	r3, [pc, #20]	; (8001490 <HAL_UART_TxCpltCallback+0xa8>)
 800147a:	2200      	movs	r2, #0
 800147c:	701a      	strb	r2, [r3, #0]
 800147e:	46b5      	mov	sp, r6
	}
}
 8001480:	bf00      	nop
 8001482:	3714      	adds	r7, #20
 8001484:	46bd      	mov	sp, r7
 8001486:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800148a:	bf00      	nop
 800148c:	200001d8 	.word	0x200001d8
 8001490:	20000230 	.word	0x20000230
 8001494:	20000430 	.word	0x20000430

08001498 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001498:	f8df d034 	ldr.w	sp, [pc, #52]	; 80014d0 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800149c:	480d      	ldr	r0, [pc, #52]	; (80014d4 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800149e:	490e      	ldr	r1, [pc, #56]	; (80014d8 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80014a0:	4a0e      	ldr	r2, [pc, #56]	; (80014dc <LoopFillZerobss+0x1e>)
  movs r3, #0
 80014a2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80014a4:	e002      	b.n	80014ac <LoopCopyDataInit>

080014a6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80014a6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80014a8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80014aa:	3304      	adds	r3, #4

080014ac <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80014ac:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80014ae:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80014b0:	d3f9      	bcc.n	80014a6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80014b2:	4a0b      	ldr	r2, [pc, #44]	; (80014e0 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80014b4:	4c0b      	ldr	r4, [pc, #44]	; (80014e4 <LoopFillZerobss+0x26>)
  movs r3, #0
 80014b6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80014b8:	e001      	b.n	80014be <LoopFillZerobss>

080014ba <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80014ba:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80014bc:	3204      	adds	r2, #4

080014be <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80014be:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80014c0:	d3fb      	bcc.n	80014ba <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80014c2:	f7ff fbf9 	bl	8000cb8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80014c6:	f002 f9bb 	bl	8003840 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80014ca:	f7ff f947 	bl	800075c <main>
  bx  lr    
 80014ce:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80014d0:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 80014d4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80014d8:	20000094 	.word	0x20000094
  ldr r2, =_sidata
 80014dc:	080044bc 	.word	0x080044bc
  ldr r2, =_sbss
 80014e0:	20000094 	.word	0x20000094
  ldr r4, =_ebss
 80014e4:	20000448 	.word	0x20000448

080014e8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80014e8:	e7fe      	b.n	80014e8 <ADC_IRQHandler>
	...

080014ec <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80014ec:	b580      	push	{r7, lr}
 80014ee:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80014f0:	4b0e      	ldr	r3, [pc, #56]	; (800152c <HAL_Init+0x40>)
 80014f2:	681b      	ldr	r3, [r3, #0]
 80014f4:	4a0d      	ldr	r2, [pc, #52]	; (800152c <HAL_Init+0x40>)
 80014f6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80014fa:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80014fc:	4b0b      	ldr	r3, [pc, #44]	; (800152c <HAL_Init+0x40>)
 80014fe:	681b      	ldr	r3, [r3, #0]
 8001500:	4a0a      	ldr	r2, [pc, #40]	; (800152c <HAL_Init+0x40>)
 8001502:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001506:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001508:	4b08      	ldr	r3, [pc, #32]	; (800152c <HAL_Init+0x40>)
 800150a:	681b      	ldr	r3, [r3, #0]
 800150c:	4a07      	ldr	r2, [pc, #28]	; (800152c <HAL_Init+0x40>)
 800150e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001512:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001514:	2003      	movs	r0, #3
 8001516:	f000 f92b 	bl	8001770 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800151a:	200f      	movs	r0, #15
 800151c:	f000 f808 	bl	8001530 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001520:	f7ff fb38 	bl	8000b94 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001524:	2300      	movs	r3, #0
}
 8001526:	4618      	mov	r0, r3
 8001528:	bd80      	pop	{r7, pc}
 800152a:	bf00      	nop
 800152c:	40023c00 	.word	0x40023c00

08001530 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001530:	b580      	push	{r7, lr}
 8001532:	b082      	sub	sp, #8
 8001534:	af00      	add	r7, sp, #0
 8001536:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001538:	4b12      	ldr	r3, [pc, #72]	; (8001584 <HAL_InitTick+0x54>)
 800153a:	681a      	ldr	r2, [r3, #0]
 800153c:	4b12      	ldr	r3, [pc, #72]	; (8001588 <HAL_InitTick+0x58>)
 800153e:	781b      	ldrb	r3, [r3, #0]
 8001540:	4619      	mov	r1, r3
 8001542:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001546:	fbb3 f3f1 	udiv	r3, r3, r1
 800154a:	fbb2 f3f3 	udiv	r3, r2, r3
 800154e:	4618      	mov	r0, r3
 8001550:	f000 f943 	bl	80017da <HAL_SYSTICK_Config>
 8001554:	4603      	mov	r3, r0
 8001556:	2b00      	cmp	r3, #0
 8001558:	d001      	beq.n	800155e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800155a:	2301      	movs	r3, #1
 800155c:	e00e      	b.n	800157c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	2b0f      	cmp	r3, #15
 8001562:	d80a      	bhi.n	800157a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001564:	2200      	movs	r2, #0
 8001566:	6879      	ldr	r1, [r7, #4]
 8001568:	f04f 30ff 	mov.w	r0, #4294967295
 800156c:	f000 f90b 	bl	8001786 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001570:	4a06      	ldr	r2, [pc, #24]	; (800158c <HAL_InitTick+0x5c>)
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001576:	2300      	movs	r3, #0
 8001578:	e000      	b.n	800157c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800157a:	2301      	movs	r3, #1
}
 800157c:	4618      	mov	r0, r3
 800157e:	3708      	adds	r7, #8
 8001580:	46bd      	mov	sp, r7
 8001582:	bd80      	pop	{r7, pc}
 8001584:	20000018 	.word	0x20000018
 8001588:	2000002c 	.word	0x2000002c
 800158c:	20000028 	.word	0x20000028

08001590 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001590:	b480      	push	{r7}
 8001592:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001594:	4b06      	ldr	r3, [pc, #24]	; (80015b0 <HAL_IncTick+0x20>)
 8001596:	781b      	ldrb	r3, [r3, #0]
 8001598:	461a      	mov	r2, r3
 800159a:	4b06      	ldr	r3, [pc, #24]	; (80015b4 <HAL_IncTick+0x24>)
 800159c:	681b      	ldr	r3, [r3, #0]
 800159e:	4413      	add	r3, r2
 80015a0:	4a04      	ldr	r2, [pc, #16]	; (80015b4 <HAL_IncTick+0x24>)
 80015a2:	6013      	str	r3, [r2, #0]
}
 80015a4:	bf00      	nop
 80015a6:	46bd      	mov	sp, r7
 80015a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015ac:	4770      	bx	lr
 80015ae:	bf00      	nop
 80015b0:	2000002c 	.word	0x2000002c
 80015b4:	20000434 	.word	0x20000434

080015b8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80015b8:	b480      	push	{r7}
 80015ba:	af00      	add	r7, sp, #0
  return uwTick;
 80015bc:	4b03      	ldr	r3, [pc, #12]	; (80015cc <HAL_GetTick+0x14>)
 80015be:	681b      	ldr	r3, [r3, #0]
}
 80015c0:	4618      	mov	r0, r3
 80015c2:	46bd      	mov	sp, r7
 80015c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015c8:	4770      	bx	lr
 80015ca:	bf00      	nop
 80015cc:	20000434 	.word	0x20000434

080015d0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80015d0:	b480      	push	{r7}
 80015d2:	b085      	sub	sp, #20
 80015d4:	af00      	add	r7, sp, #0
 80015d6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	f003 0307 	and.w	r3, r3, #7
 80015de:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80015e0:	4b0c      	ldr	r3, [pc, #48]	; (8001614 <__NVIC_SetPriorityGrouping+0x44>)
 80015e2:	68db      	ldr	r3, [r3, #12]
 80015e4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80015e6:	68ba      	ldr	r2, [r7, #8]
 80015e8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80015ec:	4013      	ands	r3, r2
 80015ee:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80015f0:	68fb      	ldr	r3, [r7, #12]
 80015f2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80015f4:	68bb      	ldr	r3, [r7, #8]
 80015f6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80015f8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80015fc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001600:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001602:	4a04      	ldr	r2, [pc, #16]	; (8001614 <__NVIC_SetPriorityGrouping+0x44>)
 8001604:	68bb      	ldr	r3, [r7, #8]
 8001606:	60d3      	str	r3, [r2, #12]
}
 8001608:	bf00      	nop
 800160a:	3714      	adds	r7, #20
 800160c:	46bd      	mov	sp, r7
 800160e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001612:	4770      	bx	lr
 8001614:	e000ed00 	.word	0xe000ed00

08001618 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001618:	b480      	push	{r7}
 800161a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800161c:	4b04      	ldr	r3, [pc, #16]	; (8001630 <__NVIC_GetPriorityGrouping+0x18>)
 800161e:	68db      	ldr	r3, [r3, #12]
 8001620:	0a1b      	lsrs	r3, r3, #8
 8001622:	f003 0307 	and.w	r3, r3, #7
}
 8001626:	4618      	mov	r0, r3
 8001628:	46bd      	mov	sp, r7
 800162a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800162e:	4770      	bx	lr
 8001630:	e000ed00 	.word	0xe000ed00

08001634 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001634:	b480      	push	{r7}
 8001636:	b083      	sub	sp, #12
 8001638:	af00      	add	r7, sp, #0
 800163a:	4603      	mov	r3, r0
 800163c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800163e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001642:	2b00      	cmp	r3, #0
 8001644:	db0b      	blt.n	800165e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001646:	79fb      	ldrb	r3, [r7, #7]
 8001648:	f003 021f 	and.w	r2, r3, #31
 800164c:	4907      	ldr	r1, [pc, #28]	; (800166c <__NVIC_EnableIRQ+0x38>)
 800164e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001652:	095b      	lsrs	r3, r3, #5
 8001654:	2001      	movs	r0, #1
 8001656:	fa00 f202 	lsl.w	r2, r0, r2
 800165a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800165e:	bf00      	nop
 8001660:	370c      	adds	r7, #12
 8001662:	46bd      	mov	sp, r7
 8001664:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001668:	4770      	bx	lr
 800166a:	bf00      	nop
 800166c:	e000e100 	.word	0xe000e100

08001670 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001670:	b480      	push	{r7}
 8001672:	b083      	sub	sp, #12
 8001674:	af00      	add	r7, sp, #0
 8001676:	4603      	mov	r3, r0
 8001678:	6039      	str	r1, [r7, #0]
 800167a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800167c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001680:	2b00      	cmp	r3, #0
 8001682:	db0a      	blt.n	800169a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001684:	683b      	ldr	r3, [r7, #0]
 8001686:	b2da      	uxtb	r2, r3
 8001688:	490c      	ldr	r1, [pc, #48]	; (80016bc <__NVIC_SetPriority+0x4c>)
 800168a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800168e:	0112      	lsls	r2, r2, #4
 8001690:	b2d2      	uxtb	r2, r2
 8001692:	440b      	add	r3, r1
 8001694:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001698:	e00a      	b.n	80016b0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800169a:	683b      	ldr	r3, [r7, #0]
 800169c:	b2da      	uxtb	r2, r3
 800169e:	4908      	ldr	r1, [pc, #32]	; (80016c0 <__NVIC_SetPriority+0x50>)
 80016a0:	79fb      	ldrb	r3, [r7, #7]
 80016a2:	f003 030f 	and.w	r3, r3, #15
 80016a6:	3b04      	subs	r3, #4
 80016a8:	0112      	lsls	r2, r2, #4
 80016aa:	b2d2      	uxtb	r2, r2
 80016ac:	440b      	add	r3, r1
 80016ae:	761a      	strb	r2, [r3, #24]
}
 80016b0:	bf00      	nop
 80016b2:	370c      	adds	r7, #12
 80016b4:	46bd      	mov	sp, r7
 80016b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ba:	4770      	bx	lr
 80016bc:	e000e100 	.word	0xe000e100
 80016c0:	e000ed00 	.word	0xe000ed00

080016c4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80016c4:	b480      	push	{r7}
 80016c6:	b089      	sub	sp, #36	; 0x24
 80016c8:	af00      	add	r7, sp, #0
 80016ca:	60f8      	str	r0, [r7, #12]
 80016cc:	60b9      	str	r1, [r7, #8]
 80016ce:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80016d0:	68fb      	ldr	r3, [r7, #12]
 80016d2:	f003 0307 	and.w	r3, r3, #7
 80016d6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80016d8:	69fb      	ldr	r3, [r7, #28]
 80016da:	f1c3 0307 	rsb	r3, r3, #7
 80016de:	2b04      	cmp	r3, #4
 80016e0:	bf28      	it	cs
 80016e2:	2304      	movcs	r3, #4
 80016e4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80016e6:	69fb      	ldr	r3, [r7, #28]
 80016e8:	3304      	adds	r3, #4
 80016ea:	2b06      	cmp	r3, #6
 80016ec:	d902      	bls.n	80016f4 <NVIC_EncodePriority+0x30>
 80016ee:	69fb      	ldr	r3, [r7, #28]
 80016f0:	3b03      	subs	r3, #3
 80016f2:	e000      	b.n	80016f6 <NVIC_EncodePriority+0x32>
 80016f4:	2300      	movs	r3, #0
 80016f6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80016f8:	f04f 32ff 	mov.w	r2, #4294967295
 80016fc:	69bb      	ldr	r3, [r7, #24]
 80016fe:	fa02 f303 	lsl.w	r3, r2, r3
 8001702:	43da      	mvns	r2, r3
 8001704:	68bb      	ldr	r3, [r7, #8]
 8001706:	401a      	ands	r2, r3
 8001708:	697b      	ldr	r3, [r7, #20]
 800170a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800170c:	f04f 31ff 	mov.w	r1, #4294967295
 8001710:	697b      	ldr	r3, [r7, #20]
 8001712:	fa01 f303 	lsl.w	r3, r1, r3
 8001716:	43d9      	mvns	r1, r3
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800171c:	4313      	orrs	r3, r2
         );
}
 800171e:	4618      	mov	r0, r3
 8001720:	3724      	adds	r7, #36	; 0x24
 8001722:	46bd      	mov	sp, r7
 8001724:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001728:	4770      	bx	lr
	...

0800172c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800172c:	b580      	push	{r7, lr}
 800172e:	b082      	sub	sp, #8
 8001730:	af00      	add	r7, sp, #0
 8001732:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	3b01      	subs	r3, #1
 8001738:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800173c:	d301      	bcc.n	8001742 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800173e:	2301      	movs	r3, #1
 8001740:	e00f      	b.n	8001762 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001742:	4a0a      	ldr	r2, [pc, #40]	; (800176c <SysTick_Config+0x40>)
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	3b01      	subs	r3, #1
 8001748:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800174a:	210f      	movs	r1, #15
 800174c:	f04f 30ff 	mov.w	r0, #4294967295
 8001750:	f7ff ff8e 	bl	8001670 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001754:	4b05      	ldr	r3, [pc, #20]	; (800176c <SysTick_Config+0x40>)
 8001756:	2200      	movs	r2, #0
 8001758:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800175a:	4b04      	ldr	r3, [pc, #16]	; (800176c <SysTick_Config+0x40>)
 800175c:	2207      	movs	r2, #7
 800175e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001760:	2300      	movs	r3, #0
}
 8001762:	4618      	mov	r0, r3
 8001764:	3708      	adds	r7, #8
 8001766:	46bd      	mov	sp, r7
 8001768:	bd80      	pop	{r7, pc}
 800176a:	bf00      	nop
 800176c:	e000e010 	.word	0xe000e010

08001770 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001770:	b580      	push	{r7, lr}
 8001772:	b082      	sub	sp, #8
 8001774:	af00      	add	r7, sp, #0
 8001776:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001778:	6878      	ldr	r0, [r7, #4]
 800177a:	f7ff ff29 	bl	80015d0 <__NVIC_SetPriorityGrouping>
}
 800177e:	bf00      	nop
 8001780:	3708      	adds	r7, #8
 8001782:	46bd      	mov	sp, r7
 8001784:	bd80      	pop	{r7, pc}

08001786 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001786:	b580      	push	{r7, lr}
 8001788:	b086      	sub	sp, #24
 800178a:	af00      	add	r7, sp, #0
 800178c:	4603      	mov	r3, r0
 800178e:	60b9      	str	r1, [r7, #8]
 8001790:	607a      	str	r2, [r7, #4]
 8001792:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001794:	2300      	movs	r3, #0
 8001796:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001798:	f7ff ff3e 	bl	8001618 <__NVIC_GetPriorityGrouping>
 800179c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800179e:	687a      	ldr	r2, [r7, #4]
 80017a0:	68b9      	ldr	r1, [r7, #8]
 80017a2:	6978      	ldr	r0, [r7, #20]
 80017a4:	f7ff ff8e 	bl	80016c4 <NVIC_EncodePriority>
 80017a8:	4602      	mov	r2, r0
 80017aa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80017ae:	4611      	mov	r1, r2
 80017b0:	4618      	mov	r0, r3
 80017b2:	f7ff ff5d 	bl	8001670 <__NVIC_SetPriority>
}
 80017b6:	bf00      	nop
 80017b8:	3718      	adds	r7, #24
 80017ba:	46bd      	mov	sp, r7
 80017bc:	bd80      	pop	{r7, pc}

080017be <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80017be:	b580      	push	{r7, lr}
 80017c0:	b082      	sub	sp, #8
 80017c2:	af00      	add	r7, sp, #0
 80017c4:	4603      	mov	r3, r0
 80017c6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80017c8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017cc:	4618      	mov	r0, r3
 80017ce:	f7ff ff31 	bl	8001634 <__NVIC_EnableIRQ>
}
 80017d2:	bf00      	nop
 80017d4:	3708      	adds	r7, #8
 80017d6:	46bd      	mov	sp, r7
 80017d8:	bd80      	pop	{r7, pc}

080017da <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80017da:	b580      	push	{r7, lr}
 80017dc:	b082      	sub	sp, #8
 80017de:	af00      	add	r7, sp, #0
 80017e0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80017e2:	6878      	ldr	r0, [r7, #4]
 80017e4:	f7ff ffa2 	bl	800172c <SysTick_Config>
 80017e8:	4603      	mov	r3, r0
}
 80017ea:	4618      	mov	r0, r3
 80017ec:	3708      	adds	r7, #8
 80017ee:	46bd      	mov	sp, r7
 80017f0:	bd80      	pop	{r7, pc}

080017f2 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80017f2:	b580      	push	{r7, lr}
 80017f4:	b084      	sub	sp, #16
 80017f6:	af00      	add	r7, sp, #0
 80017f8:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80017fe:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8001800:	f7ff feda 	bl	80015b8 <HAL_GetTick>
 8001804:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800180c:	b2db      	uxtb	r3, r3
 800180e:	2b02      	cmp	r3, #2
 8001810:	d008      	beq.n	8001824 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	2280      	movs	r2, #128	; 0x80
 8001816:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	2200      	movs	r2, #0
 800181c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8001820:	2301      	movs	r3, #1
 8001822:	e052      	b.n	80018ca <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	681b      	ldr	r3, [r3, #0]
 8001828:	681a      	ldr	r2, [r3, #0]
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	681b      	ldr	r3, [r3, #0]
 800182e:	f022 0216 	bic.w	r2, r2, #22
 8001832:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	681b      	ldr	r3, [r3, #0]
 8001838:	695a      	ldr	r2, [r3, #20]
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	681b      	ldr	r3, [r3, #0]
 800183e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001842:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001848:	2b00      	cmp	r3, #0
 800184a:	d103      	bne.n	8001854 <HAL_DMA_Abort+0x62>
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001850:	2b00      	cmp	r3, #0
 8001852:	d007      	beq.n	8001864 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	681b      	ldr	r3, [r3, #0]
 8001858:	681a      	ldr	r2, [r3, #0]
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	681b      	ldr	r3, [r3, #0]
 800185e:	f022 0208 	bic.w	r2, r2, #8
 8001862:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	681b      	ldr	r3, [r3, #0]
 8001868:	681a      	ldr	r2, [r3, #0]
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	681b      	ldr	r3, [r3, #0]
 800186e:	f022 0201 	bic.w	r2, r2, #1
 8001872:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001874:	e013      	b.n	800189e <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001876:	f7ff fe9f 	bl	80015b8 <HAL_GetTick>
 800187a:	4602      	mov	r2, r0
 800187c:	68bb      	ldr	r3, [r7, #8]
 800187e:	1ad3      	subs	r3, r2, r3
 8001880:	2b05      	cmp	r3, #5
 8001882:	d90c      	bls.n	800189e <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	2220      	movs	r2, #32
 8001888:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	2203      	movs	r2, #3
 800188e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	2200      	movs	r2, #0
 8001896:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 800189a:	2303      	movs	r3, #3
 800189c:	e015      	b.n	80018ca <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	681b      	ldr	r3, [r3, #0]
 80018a2:	681b      	ldr	r3, [r3, #0]
 80018a4:	f003 0301 	and.w	r3, r3, #1
 80018a8:	2b00      	cmp	r3, #0
 80018aa:	d1e4      	bne.n	8001876 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80018b0:	223f      	movs	r2, #63	; 0x3f
 80018b2:	409a      	lsls	r2, r3
 80018b4:	68fb      	ldr	r3, [r7, #12]
 80018b6:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	2201      	movs	r2, #1
 80018bc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	2200      	movs	r2, #0
 80018c4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 80018c8:	2300      	movs	r3, #0
}
 80018ca:	4618      	mov	r0, r3
 80018cc:	3710      	adds	r7, #16
 80018ce:	46bd      	mov	sp, r7
 80018d0:	bd80      	pop	{r7, pc}

080018d2 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80018d2:	b480      	push	{r7}
 80018d4:	b083      	sub	sp, #12
 80018d6:	af00      	add	r7, sp, #0
 80018d8:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80018e0:	b2db      	uxtb	r3, r3
 80018e2:	2b02      	cmp	r3, #2
 80018e4:	d004      	beq.n	80018f0 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	2280      	movs	r2, #128	; 0x80
 80018ea:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80018ec:	2301      	movs	r3, #1
 80018ee:	e00c      	b.n	800190a <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	2205      	movs	r2, #5
 80018f4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	681b      	ldr	r3, [r3, #0]
 80018fc:	681a      	ldr	r2, [r3, #0]
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	681b      	ldr	r3, [r3, #0]
 8001902:	f022 0201 	bic.w	r2, r2, #1
 8001906:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8001908:	2300      	movs	r3, #0
}
 800190a:	4618      	mov	r0, r3
 800190c:	370c      	adds	r7, #12
 800190e:	46bd      	mov	sp, r7
 8001910:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001914:	4770      	bx	lr
	...

08001918 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001918:	b480      	push	{r7}
 800191a:	b089      	sub	sp, #36	; 0x24
 800191c:	af00      	add	r7, sp, #0
 800191e:	6078      	str	r0, [r7, #4]
 8001920:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001922:	2300      	movs	r3, #0
 8001924:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001926:	2300      	movs	r3, #0
 8001928:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800192a:	2300      	movs	r3, #0
 800192c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800192e:	2300      	movs	r3, #0
 8001930:	61fb      	str	r3, [r7, #28]
 8001932:	e177      	b.n	8001c24 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001934:	2201      	movs	r2, #1
 8001936:	69fb      	ldr	r3, [r7, #28]
 8001938:	fa02 f303 	lsl.w	r3, r2, r3
 800193c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800193e:	683b      	ldr	r3, [r7, #0]
 8001940:	681b      	ldr	r3, [r3, #0]
 8001942:	697a      	ldr	r2, [r7, #20]
 8001944:	4013      	ands	r3, r2
 8001946:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001948:	693a      	ldr	r2, [r7, #16]
 800194a:	697b      	ldr	r3, [r7, #20]
 800194c:	429a      	cmp	r2, r3
 800194e:	f040 8166 	bne.w	8001c1e <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001952:	683b      	ldr	r3, [r7, #0]
 8001954:	685b      	ldr	r3, [r3, #4]
 8001956:	f003 0303 	and.w	r3, r3, #3
 800195a:	2b01      	cmp	r3, #1
 800195c:	d005      	beq.n	800196a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800195e:	683b      	ldr	r3, [r7, #0]
 8001960:	685b      	ldr	r3, [r3, #4]
 8001962:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001966:	2b02      	cmp	r3, #2
 8001968:	d130      	bne.n	80019cc <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	689b      	ldr	r3, [r3, #8]
 800196e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001970:	69fb      	ldr	r3, [r7, #28]
 8001972:	005b      	lsls	r3, r3, #1
 8001974:	2203      	movs	r2, #3
 8001976:	fa02 f303 	lsl.w	r3, r2, r3
 800197a:	43db      	mvns	r3, r3
 800197c:	69ba      	ldr	r2, [r7, #24]
 800197e:	4013      	ands	r3, r2
 8001980:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001982:	683b      	ldr	r3, [r7, #0]
 8001984:	68da      	ldr	r2, [r3, #12]
 8001986:	69fb      	ldr	r3, [r7, #28]
 8001988:	005b      	lsls	r3, r3, #1
 800198a:	fa02 f303 	lsl.w	r3, r2, r3
 800198e:	69ba      	ldr	r2, [r7, #24]
 8001990:	4313      	orrs	r3, r2
 8001992:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	69ba      	ldr	r2, [r7, #24]
 8001998:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	685b      	ldr	r3, [r3, #4]
 800199e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80019a0:	2201      	movs	r2, #1
 80019a2:	69fb      	ldr	r3, [r7, #28]
 80019a4:	fa02 f303 	lsl.w	r3, r2, r3
 80019a8:	43db      	mvns	r3, r3
 80019aa:	69ba      	ldr	r2, [r7, #24]
 80019ac:	4013      	ands	r3, r2
 80019ae:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80019b0:	683b      	ldr	r3, [r7, #0]
 80019b2:	685b      	ldr	r3, [r3, #4]
 80019b4:	091b      	lsrs	r3, r3, #4
 80019b6:	f003 0201 	and.w	r2, r3, #1
 80019ba:	69fb      	ldr	r3, [r7, #28]
 80019bc:	fa02 f303 	lsl.w	r3, r2, r3
 80019c0:	69ba      	ldr	r2, [r7, #24]
 80019c2:	4313      	orrs	r3, r2
 80019c4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	69ba      	ldr	r2, [r7, #24]
 80019ca:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80019cc:	683b      	ldr	r3, [r7, #0]
 80019ce:	685b      	ldr	r3, [r3, #4]
 80019d0:	f003 0303 	and.w	r3, r3, #3
 80019d4:	2b03      	cmp	r3, #3
 80019d6:	d017      	beq.n	8001a08 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	68db      	ldr	r3, [r3, #12]
 80019dc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80019de:	69fb      	ldr	r3, [r7, #28]
 80019e0:	005b      	lsls	r3, r3, #1
 80019e2:	2203      	movs	r2, #3
 80019e4:	fa02 f303 	lsl.w	r3, r2, r3
 80019e8:	43db      	mvns	r3, r3
 80019ea:	69ba      	ldr	r2, [r7, #24]
 80019ec:	4013      	ands	r3, r2
 80019ee:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80019f0:	683b      	ldr	r3, [r7, #0]
 80019f2:	689a      	ldr	r2, [r3, #8]
 80019f4:	69fb      	ldr	r3, [r7, #28]
 80019f6:	005b      	lsls	r3, r3, #1
 80019f8:	fa02 f303 	lsl.w	r3, r2, r3
 80019fc:	69ba      	ldr	r2, [r7, #24]
 80019fe:	4313      	orrs	r3, r2
 8001a00:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	69ba      	ldr	r2, [r7, #24]
 8001a06:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001a08:	683b      	ldr	r3, [r7, #0]
 8001a0a:	685b      	ldr	r3, [r3, #4]
 8001a0c:	f003 0303 	and.w	r3, r3, #3
 8001a10:	2b02      	cmp	r3, #2
 8001a12:	d123      	bne.n	8001a5c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001a14:	69fb      	ldr	r3, [r7, #28]
 8001a16:	08da      	lsrs	r2, r3, #3
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	3208      	adds	r2, #8
 8001a1c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001a20:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001a22:	69fb      	ldr	r3, [r7, #28]
 8001a24:	f003 0307 	and.w	r3, r3, #7
 8001a28:	009b      	lsls	r3, r3, #2
 8001a2a:	220f      	movs	r2, #15
 8001a2c:	fa02 f303 	lsl.w	r3, r2, r3
 8001a30:	43db      	mvns	r3, r3
 8001a32:	69ba      	ldr	r2, [r7, #24]
 8001a34:	4013      	ands	r3, r2
 8001a36:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001a38:	683b      	ldr	r3, [r7, #0]
 8001a3a:	691a      	ldr	r2, [r3, #16]
 8001a3c:	69fb      	ldr	r3, [r7, #28]
 8001a3e:	f003 0307 	and.w	r3, r3, #7
 8001a42:	009b      	lsls	r3, r3, #2
 8001a44:	fa02 f303 	lsl.w	r3, r2, r3
 8001a48:	69ba      	ldr	r2, [r7, #24]
 8001a4a:	4313      	orrs	r3, r2
 8001a4c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001a4e:	69fb      	ldr	r3, [r7, #28]
 8001a50:	08da      	lsrs	r2, r3, #3
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	3208      	adds	r2, #8
 8001a56:	69b9      	ldr	r1, [r7, #24]
 8001a58:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	681b      	ldr	r3, [r3, #0]
 8001a60:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001a62:	69fb      	ldr	r3, [r7, #28]
 8001a64:	005b      	lsls	r3, r3, #1
 8001a66:	2203      	movs	r2, #3
 8001a68:	fa02 f303 	lsl.w	r3, r2, r3
 8001a6c:	43db      	mvns	r3, r3
 8001a6e:	69ba      	ldr	r2, [r7, #24]
 8001a70:	4013      	ands	r3, r2
 8001a72:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001a74:	683b      	ldr	r3, [r7, #0]
 8001a76:	685b      	ldr	r3, [r3, #4]
 8001a78:	f003 0203 	and.w	r2, r3, #3
 8001a7c:	69fb      	ldr	r3, [r7, #28]
 8001a7e:	005b      	lsls	r3, r3, #1
 8001a80:	fa02 f303 	lsl.w	r3, r2, r3
 8001a84:	69ba      	ldr	r2, [r7, #24]
 8001a86:	4313      	orrs	r3, r2
 8001a88:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	69ba      	ldr	r2, [r7, #24]
 8001a8e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001a90:	683b      	ldr	r3, [r7, #0]
 8001a92:	685b      	ldr	r3, [r3, #4]
 8001a94:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001a98:	2b00      	cmp	r3, #0
 8001a9a:	f000 80c0 	beq.w	8001c1e <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001a9e:	2300      	movs	r3, #0
 8001aa0:	60fb      	str	r3, [r7, #12]
 8001aa2:	4b66      	ldr	r3, [pc, #408]	; (8001c3c <HAL_GPIO_Init+0x324>)
 8001aa4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001aa6:	4a65      	ldr	r2, [pc, #404]	; (8001c3c <HAL_GPIO_Init+0x324>)
 8001aa8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001aac:	6453      	str	r3, [r2, #68]	; 0x44
 8001aae:	4b63      	ldr	r3, [pc, #396]	; (8001c3c <HAL_GPIO_Init+0x324>)
 8001ab0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ab2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001ab6:	60fb      	str	r3, [r7, #12]
 8001ab8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001aba:	4a61      	ldr	r2, [pc, #388]	; (8001c40 <HAL_GPIO_Init+0x328>)
 8001abc:	69fb      	ldr	r3, [r7, #28]
 8001abe:	089b      	lsrs	r3, r3, #2
 8001ac0:	3302      	adds	r3, #2
 8001ac2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001ac6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001ac8:	69fb      	ldr	r3, [r7, #28]
 8001aca:	f003 0303 	and.w	r3, r3, #3
 8001ace:	009b      	lsls	r3, r3, #2
 8001ad0:	220f      	movs	r2, #15
 8001ad2:	fa02 f303 	lsl.w	r3, r2, r3
 8001ad6:	43db      	mvns	r3, r3
 8001ad8:	69ba      	ldr	r2, [r7, #24]
 8001ada:	4013      	ands	r3, r2
 8001adc:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	4a58      	ldr	r2, [pc, #352]	; (8001c44 <HAL_GPIO_Init+0x32c>)
 8001ae2:	4293      	cmp	r3, r2
 8001ae4:	d037      	beq.n	8001b56 <HAL_GPIO_Init+0x23e>
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	4a57      	ldr	r2, [pc, #348]	; (8001c48 <HAL_GPIO_Init+0x330>)
 8001aea:	4293      	cmp	r3, r2
 8001aec:	d031      	beq.n	8001b52 <HAL_GPIO_Init+0x23a>
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	4a56      	ldr	r2, [pc, #344]	; (8001c4c <HAL_GPIO_Init+0x334>)
 8001af2:	4293      	cmp	r3, r2
 8001af4:	d02b      	beq.n	8001b4e <HAL_GPIO_Init+0x236>
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	4a55      	ldr	r2, [pc, #340]	; (8001c50 <HAL_GPIO_Init+0x338>)
 8001afa:	4293      	cmp	r3, r2
 8001afc:	d025      	beq.n	8001b4a <HAL_GPIO_Init+0x232>
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	4a54      	ldr	r2, [pc, #336]	; (8001c54 <HAL_GPIO_Init+0x33c>)
 8001b02:	4293      	cmp	r3, r2
 8001b04:	d01f      	beq.n	8001b46 <HAL_GPIO_Init+0x22e>
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	4a53      	ldr	r2, [pc, #332]	; (8001c58 <HAL_GPIO_Init+0x340>)
 8001b0a:	4293      	cmp	r3, r2
 8001b0c:	d019      	beq.n	8001b42 <HAL_GPIO_Init+0x22a>
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	4a52      	ldr	r2, [pc, #328]	; (8001c5c <HAL_GPIO_Init+0x344>)
 8001b12:	4293      	cmp	r3, r2
 8001b14:	d013      	beq.n	8001b3e <HAL_GPIO_Init+0x226>
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	4a51      	ldr	r2, [pc, #324]	; (8001c60 <HAL_GPIO_Init+0x348>)
 8001b1a:	4293      	cmp	r3, r2
 8001b1c:	d00d      	beq.n	8001b3a <HAL_GPIO_Init+0x222>
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	4a50      	ldr	r2, [pc, #320]	; (8001c64 <HAL_GPIO_Init+0x34c>)
 8001b22:	4293      	cmp	r3, r2
 8001b24:	d007      	beq.n	8001b36 <HAL_GPIO_Init+0x21e>
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	4a4f      	ldr	r2, [pc, #316]	; (8001c68 <HAL_GPIO_Init+0x350>)
 8001b2a:	4293      	cmp	r3, r2
 8001b2c:	d101      	bne.n	8001b32 <HAL_GPIO_Init+0x21a>
 8001b2e:	2309      	movs	r3, #9
 8001b30:	e012      	b.n	8001b58 <HAL_GPIO_Init+0x240>
 8001b32:	230a      	movs	r3, #10
 8001b34:	e010      	b.n	8001b58 <HAL_GPIO_Init+0x240>
 8001b36:	2308      	movs	r3, #8
 8001b38:	e00e      	b.n	8001b58 <HAL_GPIO_Init+0x240>
 8001b3a:	2307      	movs	r3, #7
 8001b3c:	e00c      	b.n	8001b58 <HAL_GPIO_Init+0x240>
 8001b3e:	2306      	movs	r3, #6
 8001b40:	e00a      	b.n	8001b58 <HAL_GPIO_Init+0x240>
 8001b42:	2305      	movs	r3, #5
 8001b44:	e008      	b.n	8001b58 <HAL_GPIO_Init+0x240>
 8001b46:	2304      	movs	r3, #4
 8001b48:	e006      	b.n	8001b58 <HAL_GPIO_Init+0x240>
 8001b4a:	2303      	movs	r3, #3
 8001b4c:	e004      	b.n	8001b58 <HAL_GPIO_Init+0x240>
 8001b4e:	2302      	movs	r3, #2
 8001b50:	e002      	b.n	8001b58 <HAL_GPIO_Init+0x240>
 8001b52:	2301      	movs	r3, #1
 8001b54:	e000      	b.n	8001b58 <HAL_GPIO_Init+0x240>
 8001b56:	2300      	movs	r3, #0
 8001b58:	69fa      	ldr	r2, [r7, #28]
 8001b5a:	f002 0203 	and.w	r2, r2, #3
 8001b5e:	0092      	lsls	r2, r2, #2
 8001b60:	4093      	lsls	r3, r2
 8001b62:	69ba      	ldr	r2, [r7, #24]
 8001b64:	4313      	orrs	r3, r2
 8001b66:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001b68:	4935      	ldr	r1, [pc, #212]	; (8001c40 <HAL_GPIO_Init+0x328>)
 8001b6a:	69fb      	ldr	r3, [r7, #28]
 8001b6c:	089b      	lsrs	r3, r3, #2
 8001b6e:	3302      	adds	r3, #2
 8001b70:	69ba      	ldr	r2, [r7, #24]
 8001b72:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001b76:	4b3d      	ldr	r3, [pc, #244]	; (8001c6c <HAL_GPIO_Init+0x354>)
 8001b78:	689b      	ldr	r3, [r3, #8]
 8001b7a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001b7c:	693b      	ldr	r3, [r7, #16]
 8001b7e:	43db      	mvns	r3, r3
 8001b80:	69ba      	ldr	r2, [r7, #24]
 8001b82:	4013      	ands	r3, r2
 8001b84:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001b86:	683b      	ldr	r3, [r7, #0]
 8001b88:	685b      	ldr	r3, [r3, #4]
 8001b8a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001b8e:	2b00      	cmp	r3, #0
 8001b90:	d003      	beq.n	8001b9a <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8001b92:	69ba      	ldr	r2, [r7, #24]
 8001b94:	693b      	ldr	r3, [r7, #16]
 8001b96:	4313      	orrs	r3, r2
 8001b98:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001b9a:	4a34      	ldr	r2, [pc, #208]	; (8001c6c <HAL_GPIO_Init+0x354>)
 8001b9c:	69bb      	ldr	r3, [r7, #24]
 8001b9e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001ba0:	4b32      	ldr	r3, [pc, #200]	; (8001c6c <HAL_GPIO_Init+0x354>)
 8001ba2:	68db      	ldr	r3, [r3, #12]
 8001ba4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001ba6:	693b      	ldr	r3, [r7, #16]
 8001ba8:	43db      	mvns	r3, r3
 8001baa:	69ba      	ldr	r2, [r7, #24]
 8001bac:	4013      	ands	r3, r2
 8001bae:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001bb0:	683b      	ldr	r3, [r7, #0]
 8001bb2:	685b      	ldr	r3, [r3, #4]
 8001bb4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001bb8:	2b00      	cmp	r3, #0
 8001bba:	d003      	beq.n	8001bc4 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8001bbc:	69ba      	ldr	r2, [r7, #24]
 8001bbe:	693b      	ldr	r3, [r7, #16]
 8001bc0:	4313      	orrs	r3, r2
 8001bc2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001bc4:	4a29      	ldr	r2, [pc, #164]	; (8001c6c <HAL_GPIO_Init+0x354>)
 8001bc6:	69bb      	ldr	r3, [r7, #24]
 8001bc8:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001bca:	4b28      	ldr	r3, [pc, #160]	; (8001c6c <HAL_GPIO_Init+0x354>)
 8001bcc:	685b      	ldr	r3, [r3, #4]
 8001bce:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001bd0:	693b      	ldr	r3, [r7, #16]
 8001bd2:	43db      	mvns	r3, r3
 8001bd4:	69ba      	ldr	r2, [r7, #24]
 8001bd6:	4013      	ands	r3, r2
 8001bd8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001bda:	683b      	ldr	r3, [r7, #0]
 8001bdc:	685b      	ldr	r3, [r3, #4]
 8001bde:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001be2:	2b00      	cmp	r3, #0
 8001be4:	d003      	beq.n	8001bee <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8001be6:	69ba      	ldr	r2, [r7, #24]
 8001be8:	693b      	ldr	r3, [r7, #16]
 8001bea:	4313      	orrs	r3, r2
 8001bec:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001bee:	4a1f      	ldr	r2, [pc, #124]	; (8001c6c <HAL_GPIO_Init+0x354>)
 8001bf0:	69bb      	ldr	r3, [r7, #24]
 8001bf2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001bf4:	4b1d      	ldr	r3, [pc, #116]	; (8001c6c <HAL_GPIO_Init+0x354>)
 8001bf6:	681b      	ldr	r3, [r3, #0]
 8001bf8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001bfa:	693b      	ldr	r3, [r7, #16]
 8001bfc:	43db      	mvns	r3, r3
 8001bfe:	69ba      	ldr	r2, [r7, #24]
 8001c00:	4013      	ands	r3, r2
 8001c02:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001c04:	683b      	ldr	r3, [r7, #0]
 8001c06:	685b      	ldr	r3, [r3, #4]
 8001c08:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001c0c:	2b00      	cmp	r3, #0
 8001c0e:	d003      	beq.n	8001c18 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8001c10:	69ba      	ldr	r2, [r7, #24]
 8001c12:	693b      	ldr	r3, [r7, #16]
 8001c14:	4313      	orrs	r3, r2
 8001c16:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001c18:	4a14      	ldr	r2, [pc, #80]	; (8001c6c <HAL_GPIO_Init+0x354>)
 8001c1a:	69bb      	ldr	r3, [r7, #24]
 8001c1c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001c1e:	69fb      	ldr	r3, [r7, #28]
 8001c20:	3301      	adds	r3, #1
 8001c22:	61fb      	str	r3, [r7, #28]
 8001c24:	69fb      	ldr	r3, [r7, #28]
 8001c26:	2b0f      	cmp	r3, #15
 8001c28:	f67f ae84 	bls.w	8001934 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001c2c:	bf00      	nop
 8001c2e:	bf00      	nop
 8001c30:	3724      	adds	r7, #36	; 0x24
 8001c32:	46bd      	mov	sp, r7
 8001c34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c38:	4770      	bx	lr
 8001c3a:	bf00      	nop
 8001c3c:	40023800 	.word	0x40023800
 8001c40:	40013800 	.word	0x40013800
 8001c44:	40020000 	.word	0x40020000
 8001c48:	40020400 	.word	0x40020400
 8001c4c:	40020800 	.word	0x40020800
 8001c50:	40020c00 	.word	0x40020c00
 8001c54:	40021000 	.word	0x40021000
 8001c58:	40021400 	.word	0x40021400
 8001c5c:	40021800 	.word	0x40021800
 8001c60:	40021c00 	.word	0x40021c00
 8001c64:	40022000 	.word	0x40022000
 8001c68:	40022400 	.word	0x40022400
 8001c6c:	40013c00 	.word	0x40013c00

08001c70 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001c70:	b480      	push	{r7}
 8001c72:	b085      	sub	sp, #20
 8001c74:	af00      	add	r7, sp, #0
 8001c76:	6078      	str	r0, [r7, #4]
 8001c78:	460b      	mov	r3, r1
 8001c7a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	691a      	ldr	r2, [r3, #16]
 8001c80:	887b      	ldrh	r3, [r7, #2]
 8001c82:	4013      	ands	r3, r2
 8001c84:	2b00      	cmp	r3, #0
 8001c86:	d002      	beq.n	8001c8e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001c88:	2301      	movs	r3, #1
 8001c8a:	73fb      	strb	r3, [r7, #15]
 8001c8c:	e001      	b.n	8001c92 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001c8e:	2300      	movs	r3, #0
 8001c90:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001c92:	7bfb      	ldrb	r3, [r7, #15]
}
 8001c94:	4618      	mov	r0, r3
 8001c96:	3714      	adds	r7, #20
 8001c98:	46bd      	mov	sp, r7
 8001c9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c9e:	4770      	bx	lr

08001ca0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001ca0:	b480      	push	{r7}
 8001ca2:	b083      	sub	sp, #12
 8001ca4:	af00      	add	r7, sp, #0
 8001ca6:	6078      	str	r0, [r7, #4]
 8001ca8:	460b      	mov	r3, r1
 8001caa:	807b      	strh	r3, [r7, #2]
 8001cac:	4613      	mov	r3, r2
 8001cae:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001cb0:	787b      	ldrb	r3, [r7, #1]
 8001cb2:	2b00      	cmp	r3, #0
 8001cb4:	d003      	beq.n	8001cbe <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001cb6:	887a      	ldrh	r2, [r7, #2]
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001cbc:	e003      	b.n	8001cc6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001cbe:	887b      	ldrh	r3, [r7, #2]
 8001cc0:	041a      	lsls	r2, r3, #16
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	619a      	str	r2, [r3, #24]
}
 8001cc6:	bf00      	nop
 8001cc8:	370c      	adds	r7, #12
 8001cca:	46bd      	mov	sp, r7
 8001ccc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cd0:	4770      	bx	lr
	...

08001cd4 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001cd4:	b580      	push	{r7, lr}
 8001cd6:	b086      	sub	sp, #24
 8001cd8:	af00      	add	r7, sp, #0
 8001cda:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	2b00      	cmp	r3, #0
 8001ce0:	d101      	bne.n	8001ce6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001ce2:	2301      	movs	r3, #1
 8001ce4:	e267      	b.n	80021b6 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	681b      	ldr	r3, [r3, #0]
 8001cea:	f003 0301 	and.w	r3, r3, #1
 8001cee:	2b00      	cmp	r3, #0
 8001cf0:	d075      	beq.n	8001dde <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001cf2:	4b88      	ldr	r3, [pc, #544]	; (8001f14 <HAL_RCC_OscConfig+0x240>)
 8001cf4:	689b      	ldr	r3, [r3, #8]
 8001cf6:	f003 030c 	and.w	r3, r3, #12
 8001cfa:	2b04      	cmp	r3, #4
 8001cfc:	d00c      	beq.n	8001d18 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001cfe:	4b85      	ldr	r3, [pc, #532]	; (8001f14 <HAL_RCC_OscConfig+0x240>)
 8001d00:	689b      	ldr	r3, [r3, #8]
 8001d02:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001d06:	2b08      	cmp	r3, #8
 8001d08:	d112      	bne.n	8001d30 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001d0a:	4b82      	ldr	r3, [pc, #520]	; (8001f14 <HAL_RCC_OscConfig+0x240>)
 8001d0c:	685b      	ldr	r3, [r3, #4]
 8001d0e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001d12:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001d16:	d10b      	bne.n	8001d30 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001d18:	4b7e      	ldr	r3, [pc, #504]	; (8001f14 <HAL_RCC_OscConfig+0x240>)
 8001d1a:	681b      	ldr	r3, [r3, #0]
 8001d1c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d20:	2b00      	cmp	r3, #0
 8001d22:	d05b      	beq.n	8001ddc <HAL_RCC_OscConfig+0x108>
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	685b      	ldr	r3, [r3, #4]
 8001d28:	2b00      	cmp	r3, #0
 8001d2a:	d157      	bne.n	8001ddc <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001d2c:	2301      	movs	r3, #1
 8001d2e:	e242      	b.n	80021b6 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	685b      	ldr	r3, [r3, #4]
 8001d34:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001d38:	d106      	bne.n	8001d48 <HAL_RCC_OscConfig+0x74>
 8001d3a:	4b76      	ldr	r3, [pc, #472]	; (8001f14 <HAL_RCC_OscConfig+0x240>)
 8001d3c:	681b      	ldr	r3, [r3, #0]
 8001d3e:	4a75      	ldr	r2, [pc, #468]	; (8001f14 <HAL_RCC_OscConfig+0x240>)
 8001d40:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001d44:	6013      	str	r3, [r2, #0]
 8001d46:	e01d      	b.n	8001d84 <HAL_RCC_OscConfig+0xb0>
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	685b      	ldr	r3, [r3, #4]
 8001d4c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001d50:	d10c      	bne.n	8001d6c <HAL_RCC_OscConfig+0x98>
 8001d52:	4b70      	ldr	r3, [pc, #448]	; (8001f14 <HAL_RCC_OscConfig+0x240>)
 8001d54:	681b      	ldr	r3, [r3, #0]
 8001d56:	4a6f      	ldr	r2, [pc, #444]	; (8001f14 <HAL_RCC_OscConfig+0x240>)
 8001d58:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001d5c:	6013      	str	r3, [r2, #0]
 8001d5e:	4b6d      	ldr	r3, [pc, #436]	; (8001f14 <HAL_RCC_OscConfig+0x240>)
 8001d60:	681b      	ldr	r3, [r3, #0]
 8001d62:	4a6c      	ldr	r2, [pc, #432]	; (8001f14 <HAL_RCC_OscConfig+0x240>)
 8001d64:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001d68:	6013      	str	r3, [r2, #0]
 8001d6a:	e00b      	b.n	8001d84 <HAL_RCC_OscConfig+0xb0>
 8001d6c:	4b69      	ldr	r3, [pc, #420]	; (8001f14 <HAL_RCC_OscConfig+0x240>)
 8001d6e:	681b      	ldr	r3, [r3, #0]
 8001d70:	4a68      	ldr	r2, [pc, #416]	; (8001f14 <HAL_RCC_OscConfig+0x240>)
 8001d72:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001d76:	6013      	str	r3, [r2, #0]
 8001d78:	4b66      	ldr	r3, [pc, #408]	; (8001f14 <HAL_RCC_OscConfig+0x240>)
 8001d7a:	681b      	ldr	r3, [r3, #0]
 8001d7c:	4a65      	ldr	r2, [pc, #404]	; (8001f14 <HAL_RCC_OscConfig+0x240>)
 8001d7e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001d82:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	685b      	ldr	r3, [r3, #4]
 8001d88:	2b00      	cmp	r3, #0
 8001d8a:	d013      	beq.n	8001db4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d8c:	f7ff fc14 	bl	80015b8 <HAL_GetTick>
 8001d90:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001d92:	e008      	b.n	8001da6 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001d94:	f7ff fc10 	bl	80015b8 <HAL_GetTick>
 8001d98:	4602      	mov	r2, r0
 8001d9a:	693b      	ldr	r3, [r7, #16]
 8001d9c:	1ad3      	subs	r3, r2, r3
 8001d9e:	2b64      	cmp	r3, #100	; 0x64
 8001da0:	d901      	bls.n	8001da6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001da2:	2303      	movs	r3, #3
 8001da4:	e207      	b.n	80021b6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001da6:	4b5b      	ldr	r3, [pc, #364]	; (8001f14 <HAL_RCC_OscConfig+0x240>)
 8001da8:	681b      	ldr	r3, [r3, #0]
 8001daa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001dae:	2b00      	cmp	r3, #0
 8001db0:	d0f0      	beq.n	8001d94 <HAL_RCC_OscConfig+0xc0>
 8001db2:	e014      	b.n	8001dde <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001db4:	f7ff fc00 	bl	80015b8 <HAL_GetTick>
 8001db8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001dba:	e008      	b.n	8001dce <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001dbc:	f7ff fbfc 	bl	80015b8 <HAL_GetTick>
 8001dc0:	4602      	mov	r2, r0
 8001dc2:	693b      	ldr	r3, [r7, #16]
 8001dc4:	1ad3      	subs	r3, r2, r3
 8001dc6:	2b64      	cmp	r3, #100	; 0x64
 8001dc8:	d901      	bls.n	8001dce <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001dca:	2303      	movs	r3, #3
 8001dcc:	e1f3      	b.n	80021b6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001dce:	4b51      	ldr	r3, [pc, #324]	; (8001f14 <HAL_RCC_OscConfig+0x240>)
 8001dd0:	681b      	ldr	r3, [r3, #0]
 8001dd2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001dd6:	2b00      	cmp	r3, #0
 8001dd8:	d1f0      	bne.n	8001dbc <HAL_RCC_OscConfig+0xe8>
 8001dda:	e000      	b.n	8001dde <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001ddc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	681b      	ldr	r3, [r3, #0]
 8001de2:	f003 0302 	and.w	r3, r3, #2
 8001de6:	2b00      	cmp	r3, #0
 8001de8:	d063      	beq.n	8001eb2 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001dea:	4b4a      	ldr	r3, [pc, #296]	; (8001f14 <HAL_RCC_OscConfig+0x240>)
 8001dec:	689b      	ldr	r3, [r3, #8]
 8001dee:	f003 030c 	and.w	r3, r3, #12
 8001df2:	2b00      	cmp	r3, #0
 8001df4:	d00b      	beq.n	8001e0e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001df6:	4b47      	ldr	r3, [pc, #284]	; (8001f14 <HAL_RCC_OscConfig+0x240>)
 8001df8:	689b      	ldr	r3, [r3, #8]
 8001dfa:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001dfe:	2b08      	cmp	r3, #8
 8001e00:	d11c      	bne.n	8001e3c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001e02:	4b44      	ldr	r3, [pc, #272]	; (8001f14 <HAL_RCC_OscConfig+0x240>)
 8001e04:	685b      	ldr	r3, [r3, #4]
 8001e06:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001e0a:	2b00      	cmp	r3, #0
 8001e0c:	d116      	bne.n	8001e3c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001e0e:	4b41      	ldr	r3, [pc, #260]	; (8001f14 <HAL_RCC_OscConfig+0x240>)
 8001e10:	681b      	ldr	r3, [r3, #0]
 8001e12:	f003 0302 	and.w	r3, r3, #2
 8001e16:	2b00      	cmp	r3, #0
 8001e18:	d005      	beq.n	8001e26 <HAL_RCC_OscConfig+0x152>
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	68db      	ldr	r3, [r3, #12]
 8001e1e:	2b01      	cmp	r3, #1
 8001e20:	d001      	beq.n	8001e26 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8001e22:	2301      	movs	r3, #1
 8001e24:	e1c7      	b.n	80021b6 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001e26:	4b3b      	ldr	r3, [pc, #236]	; (8001f14 <HAL_RCC_OscConfig+0x240>)
 8001e28:	681b      	ldr	r3, [r3, #0]
 8001e2a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	691b      	ldr	r3, [r3, #16]
 8001e32:	00db      	lsls	r3, r3, #3
 8001e34:	4937      	ldr	r1, [pc, #220]	; (8001f14 <HAL_RCC_OscConfig+0x240>)
 8001e36:	4313      	orrs	r3, r2
 8001e38:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001e3a:	e03a      	b.n	8001eb2 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	68db      	ldr	r3, [r3, #12]
 8001e40:	2b00      	cmp	r3, #0
 8001e42:	d020      	beq.n	8001e86 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001e44:	4b34      	ldr	r3, [pc, #208]	; (8001f18 <HAL_RCC_OscConfig+0x244>)
 8001e46:	2201      	movs	r2, #1
 8001e48:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e4a:	f7ff fbb5 	bl	80015b8 <HAL_GetTick>
 8001e4e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001e50:	e008      	b.n	8001e64 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001e52:	f7ff fbb1 	bl	80015b8 <HAL_GetTick>
 8001e56:	4602      	mov	r2, r0
 8001e58:	693b      	ldr	r3, [r7, #16]
 8001e5a:	1ad3      	subs	r3, r2, r3
 8001e5c:	2b02      	cmp	r3, #2
 8001e5e:	d901      	bls.n	8001e64 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001e60:	2303      	movs	r3, #3
 8001e62:	e1a8      	b.n	80021b6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001e64:	4b2b      	ldr	r3, [pc, #172]	; (8001f14 <HAL_RCC_OscConfig+0x240>)
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	f003 0302 	and.w	r3, r3, #2
 8001e6c:	2b00      	cmp	r3, #0
 8001e6e:	d0f0      	beq.n	8001e52 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001e70:	4b28      	ldr	r3, [pc, #160]	; (8001f14 <HAL_RCC_OscConfig+0x240>)
 8001e72:	681b      	ldr	r3, [r3, #0]
 8001e74:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	691b      	ldr	r3, [r3, #16]
 8001e7c:	00db      	lsls	r3, r3, #3
 8001e7e:	4925      	ldr	r1, [pc, #148]	; (8001f14 <HAL_RCC_OscConfig+0x240>)
 8001e80:	4313      	orrs	r3, r2
 8001e82:	600b      	str	r3, [r1, #0]
 8001e84:	e015      	b.n	8001eb2 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001e86:	4b24      	ldr	r3, [pc, #144]	; (8001f18 <HAL_RCC_OscConfig+0x244>)
 8001e88:	2200      	movs	r2, #0
 8001e8a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e8c:	f7ff fb94 	bl	80015b8 <HAL_GetTick>
 8001e90:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001e92:	e008      	b.n	8001ea6 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001e94:	f7ff fb90 	bl	80015b8 <HAL_GetTick>
 8001e98:	4602      	mov	r2, r0
 8001e9a:	693b      	ldr	r3, [r7, #16]
 8001e9c:	1ad3      	subs	r3, r2, r3
 8001e9e:	2b02      	cmp	r3, #2
 8001ea0:	d901      	bls.n	8001ea6 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8001ea2:	2303      	movs	r3, #3
 8001ea4:	e187      	b.n	80021b6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001ea6:	4b1b      	ldr	r3, [pc, #108]	; (8001f14 <HAL_RCC_OscConfig+0x240>)
 8001ea8:	681b      	ldr	r3, [r3, #0]
 8001eaa:	f003 0302 	and.w	r3, r3, #2
 8001eae:	2b00      	cmp	r3, #0
 8001eb0:	d1f0      	bne.n	8001e94 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	681b      	ldr	r3, [r3, #0]
 8001eb6:	f003 0308 	and.w	r3, r3, #8
 8001eba:	2b00      	cmp	r3, #0
 8001ebc:	d036      	beq.n	8001f2c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	695b      	ldr	r3, [r3, #20]
 8001ec2:	2b00      	cmp	r3, #0
 8001ec4:	d016      	beq.n	8001ef4 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001ec6:	4b15      	ldr	r3, [pc, #84]	; (8001f1c <HAL_RCC_OscConfig+0x248>)
 8001ec8:	2201      	movs	r2, #1
 8001eca:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001ecc:	f7ff fb74 	bl	80015b8 <HAL_GetTick>
 8001ed0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001ed2:	e008      	b.n	8001ee6 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001ed4:	f7ff fb70 	bl	80015b8 <HAL_GetTick>
 8001ed8:	4602      	mov	r2, r0
 8001eda:	693b      	ldr	r3, [r7, #16]
 8001edc:	1ad3      	subs	r3, r2, r3
 8001ede:	2b02      	cmp	r3, #2
 8001ee0:	d901      	bls.n	8001ee6 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8001ee2:	2303      	movs	r3, #3
 8001ee4:	e167      	b.n	80021b6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001ee6:	4b0b      	ldr	r3, [pc, #44]	; (8001f14 <HAL_RCC_OscConfig+0x240>)
 8001ee8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001eea:	f003 0302 	and.w	r3, r3, #2
 8001eee:	2b00      	cmp	r3, #0
 8001ef0:	d0f0      	beq.n	8001ed4 <HAL_RCC_OscConfig+0x200>
 8001ef2:	e01b      	b.n	8001f2c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001ef4:	4b09      	ldr	r3, [pc, #36]	; (8001f1c <HAL_RCC_OscConfig+0x248>)
 8001ef6:	2200      	movs	r2, #0
 8001ef8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001efa:	f7ff fb5d 	bl	80015b8 <HAL_GetTick>
 8001efe:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001f00:	e00e      	b.n	8001f20 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001f02:	f7ff fb59 	bl	80015b8 <HAL_GetTick>
 8001f06:	4602      	mov	r2, r0
 8001f08:	693b      	ldr	r3, [r7, #16]
 8001f0a:	1ad3      	subs	r3, r2, r3
 8001f0c:	2b02      	cmp	r3, #2
 8001f0e:	d907      	bls.n	8001f20 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001f10:	2303      	movs	r3, #3
 8001f12:	e150      	b.n	80021b6 <HAL_RCC_OscConfig+0x4e2>
 8001f14:	40023800 	.word	0x40023800
 8001f18:	42470000 	.word	0x42470000
 8001f1c:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001f20:	4b88      	ldr	r3, [pc, #544]	; (8002144 <HAL_RCC_OscConfig+0x470>)
 8001f22:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001f24:	f003 0302 	and.w	r3, r3, #2
 8001f28:	2b00      	cmp	r3, #0
 8001f2a:	d1ea      	bne.n	8001f02 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	f003 0304 	and.w	r3, r3, #4
 8001f34:	2b00      	cmp	r3, #0
 8001f36:	f000 8097 	beq.w	8002068 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001f3a:	2300      	movs	r3, #0
 8001f3c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001f3e:	4b81      	ldr	r3, [pc, #516]	; (8002144 <HAL_RCC_OscConfig+0x470>)
 8001f40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f42:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f46:	2b00      	cmp	r3, #0
 8001f48:	d10f      	bne.n	8001f6a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001f4a:	2300      	movs	r3, #0
 8001f4c:	60bb      	str	r3, [r7, #8]
 8001f4e:	4b7d      	ldr	r3, [pc, #500]	; (8002144 <HAL_RCC_OscConfig+0x470>)
 8001f50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f52:	4a7c      	ldr	r2, [pc, #496]	; (8002144 <HAL_RCC_OscConfig+0x470>)
 8001f54:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001f58:	6413      	str	r3, [r2, #64]	; 0x40
 8001f5a:	4b7a      	ldr	r3, [pc, #488]	; (8002144 <HAL_RCC_OscConfig+0x470>)
 8001f5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f5e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f62:	60bb      	str	r3, [r7, #8]
 8001f64:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001f66:	2301      	movs	r3, #1
 8001f68:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001f6a:	4b77      	ldr	r3, [pc, #476]	; (8002148 <HAL_RCC_OscConfig+0x474>)
 8001f6c:	681b      	ldr	r3, [r3, #0]
 8001f6e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001f72:	2b00      	cmp	r3, #0
 8001f74:	d118      	bne.n	8001fa8 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001f76:	4b74      	ldr	r3, [pc, #464]	; (8002148 <HAL_RCC_OscConfig+0x474>)
 8001f78:	681b      	ldr	r3, [r3, #0]
 8001f7a:	4a73      	ldr	r2, [pc, #460]	; (8002148 <HAL_RCC_OscConfig+0x474>)
 8001f7c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001f80:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001f82:	f7ff fb19 	bl	80015b8 <HAL_GetTick>
 8001f86:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001f88:	e008      	b.n	8001f9c <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001f8a:	f7ff fb15 	bl	80015b8 <HAL_GetTick>
 8001f8e:	4602      	mov	r2, r0
 8001f90:	693b      	ldr	r3, [r7, #16]
 8001f92:	1ad3      	subs	r3, r2, r3
 8001f94:	2b02      	cmp	r3, #2
 8001f96:	d901      	bls.n	8001f9c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8001f98:	2303      	movs	r3, #3
 8001f9a:	e10c      	b.n	80021b6 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001f9c:	4b6a      	ldr	r3, [pc, #424]	; (8002148 <HAL_RCC_OscConfig+0x474>)
 8001f9e:	681b      	ldr	r3, [r3, #0]
 8001fa0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001fa4:	2b00      	cmp	r3, #0
 8001fa6:	d0f0      	beq.n	8001f8a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	689b      	ldr	r3, [r3, #8]
 8001fac:	2b01      	cmp	r3, #1
 8001fae:	d106      	bne.n	8001fbe <HAL_RCC_OscConfig+0x2ea>
 8001fb0:	4b64      	ldr	r3, [pc, #400]	; (8002144 <HAL_RCC_OscConfig+0x470>)
 8001fb2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001fb4:	4a63      	ldr	r2, [pc, #396]	; (8002144 <HAL_RCC_OscConfig+0x470>)
 8001fb6:	f043 0301 	orr.w	r3, r3, #1
 8001fba:	6713      	str	r3, [r2, #112]	; 0x70
 8001fbc:	e01c      	b.n	8001ff8 <HAL_RCC_OscConfig+0x324>
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	689b      	ldr	r3, [r3, #8]
 8001fc2:	2b05      	cmp	r3, #5
 8001fc4:	d10c      	bne.n	8001fe0 <HAL_RCC_OscConfig+0x30c>
 8001fc6:	4b5f      	ldr	r3, [pc, #380]	; (8002144 <HAL_RCC_OscConfig+0x470>)
 8001fc8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001fca:	4a5e      	ldr	r2, [pc, #376]	; (8002144 <HAL_RCC_OscConfig+0x470>)
 8001fcc:	f043 0304 	orr.w	r3, r3, #4
 8001fd0:	6713      	str	r3, [r2, #112]	; 0x70
 8001fd2:	4b5c      	ldr	r3, [pc, #368]	; (8002144 <HAL_RCC_OscConfig+0x470>)
 8001fd4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001fd6:	4a5b      	ldr	r2, [pc, #364]	; (8002144 <HAL_RCC_OscConfig+0x470>)
 8001fd8:	f043 0301 	orr.w	r3, r3, #1
 8001fdc:	6713      	str	r3, [r2, #112]	; 0x70
 8001fde:	e00b      	b.n	8001ff8 <HAL_RCC_OscConfig+0x324>
 8001fe0:	4b58      	ldr	r3, [pc, #352]	; (8002144 <HAL_RCC_OscConfig+0x470>)
 8001fe2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001fe4:	4a57      	ldr	r2, [pc, #348]	; (8002144 <HAL_RCC_OscConfig+0x470>)
 8001fe6:	f023 0301 	bic.w	r3, r3, #1
 8001fea:	6713      	str	r3, [r2, #112]	; 0x70
 8001fec:	4b55      	ldr	r3, [pc, #340]	; (8002144 <HAL_RCC_OscConfig+0x470>)
 8001fee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001ff0:	4a54      	ldr	r2, [pc, #336]	; (8002144 <HAL_RCC_OscConfig+0x470>)
 8001ff2:	f023 0304 	bic.w	r3, r3, #4
 8001ff6:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	689b      	ldr	r3, [r3, #8]
 8001ffc:	2b00      	cmp	r3, #0
 8001ffe:	d015      	beq.n	800202c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002000:	f7ff fada 	bl	80015b8 <HAL_GetTick>
 8002004:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002006:	e00a      	b.n	800201e <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002008:	f7ff fad6 	bl	80015b8 <HAL_GetTick>
 800200c:	4602      	mov	r2, r0
 800200e:	693b      	ldr	r3, [r7, #16]
 8002010:	1ad3      	subs	r3, r2, r3
 8002012:	f241 3288 	movw	r2, #5000	; 0x1388
 8002016:	4293      	cmp	r3, r2
 8002018:	d901      	bls.n	800201e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800201a:	2303      	movs	r3, #3
 800201c:	e0cb      	b.n	80021b6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800201e:	4b49      	ldr	r3, [pc, #292]	; (8002144 <HAL_RCC_OscConfig+0x470>)
 8002020:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002022:	f003 0302 	and.w	r3, r3, #2
 8002026:	2b00      	cmp	r3, #0
 8002028:	d0ee      	beq.n	8002008 <HAL_RCC_OscConfig+0x334>
 800202a:	e014      	b.n	8002056 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800202c:	f7ff fac4 	bl	80015b8 <HAL_GetTick>
 8002030:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002032:	e00a      	b.n	800204a <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002034:	f7ff fac0 	bl	80015b8 <HAL_GetTick>
 8002038:	4602      	mov	r2, r0
 800203a:	693b      	ldr	r3, [r7, #16]
 800203c:	1ad3      	subs	r3, r2, r3
 800203e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002042:	4293      	cmp	r3, r2
 8002044:	d901      	bls.n	800204a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8002046:	2303      	movs	r3, #3
 8002048:	e0b5      	b.n	80021b6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800204a:	4b3e      	ldr	r3, [pc, #248]	; (8002144 <HAL_RCC_OscConfig+0x470>)
 800204c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800204e:	f003 0302 	and.w	r3, r3, #2
 8002052:	2b00      	cmp	r3, #0
 8002054:	d1ee      	bne.n	8002034 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002056:	7dfb      	ldrb	r3, [r7, #23]
 8002058:	2b01      	cmp	r3, #1
 800205a:	d105      	bne.n	8002068 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800205c:	4b39      	ldr	r3, [pc, #228]	; (8002144 <HAL_RCC_OscConfig+0x470>)
 800205e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002060:	4a38      	ldr	r2, [pc, #224]	; (8002144 <HAL_RCC_OscConfig+0x470>)
 8002062:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002066:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	699b      	ldr	r3, [r3, #24]
 800206c:	2b00      	cmp	r3, #0
 800206e:	f000 80a1 	beq.w	80021b4 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002072:	4b34      	ldr	r3, [pc, #208]	; (8002144 <HAL_RCC_OscConfig+0x470>)
 8002074:	689b      	ldr	r3, [r3, #8]
 8002076:	f003 030c 	and.w	r3, r3, #12
 800207a:	2b08      	cmp	r3, #8
 800207c:	d05c      	beq.n	8002138 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	699b      	ldr	r3, [r3, #24]
 8002082:	2b02      	cmp	r3, #2
 8002084:	d141      	bne.n	800210a <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002086:	4b31      	ldr	r3, [pc, #196]	; (800214c <HAL_RCC_OscConfig+0x478>)
 8002088:	2200      	movs	r2, #0
 800208a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800208c:	f7ff fa94 	bl	80015b8 <HAL_GetTick>
 8002090:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002092:	e008      	b.n	80020a6 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002094:	f7ff fa90 	bl	80015b8 <HAL_GetTick>
 8002098:	4602      	mov	r2, r0
 800209a:	693b      	ldr	r3, [r7, #16]
 800209c:	1ad3      	subs	r3, r2, r3
 800209e:	2b02      	cmp	r3, #2
 80020a0:	d901      	bls.n	80020a6 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80020a2:	2303      	movs	r3, #3
 80020a4:	e087      	b.n	80021b6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80020a6:	4b27      	ldr	r3, [pc, #156]	; (8002144 <HAL_RCC_OscConfig+0x470>)
 80020a8:	681b      	ldr	r3, [r3, #0]
 80020aa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80020ae:	2b00      	cmp	r3, #0
 80020b0:	d1f0      	bne.n	8002094 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	69da      	ldr	r2, [r3, #28]
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	6a1b      	ldr	r3, [r3, #32]
 80020ba:	431a      	orrs	r2, r3
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020c0:	019b      	lsls	r3, r3, #6
 80020c2:	431a      	orrs	r2, r3
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80020c8:	085b      	lsrs	r3, r3, #1
 80020ca:	3b01      	subs	r3, #1
 80020cc:	041b      	lsls	r3, r3, #16
 80020ce:	431a      	orrs	r2, r3
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80020d4:	061b      	lsls	r3, r3, #24
 80020d6:	491b      	ldr	r1, [pc, #108]	; (8002144 <HAL_RCC_OscConfig+0x470>)
 80020d8:	4313      	orrs	r3, r2
 80020da:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80020dc:	4b1b      	ldr	r3, [pc, #108]	; (800214c <HAL_RCC_OscConfig+0x478>)
 80020de:	2201      	movs	r2, #1
 80020e0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80020e2:	f7ff fa69 	bl	80015b8 <HAL_GetTick>
 80020e6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80020e8:	e008      	b.n	80020fc <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80020ea:	f7ff fa65 	bl	80015b8 <HAL_GetTick>
 80020ee:	4602      	mov	r2, r0
 80020f0:	693b      	ldr	r3, [r7, #16]
 80020f2:	1ad3      	subs	r3, r2, r3
 80020f4:	2b02      	cmp	r3, #2
 80020f6:	d901      	bls.n	80020fc <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80020f8:	2303      	movs	r3, #3
 80020fa:	e05c      	b.n	80021b6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80020fc:	4b11      	ldr	r3, [pc, #68]	; (8002144 <HAL_RCC_OscConfig+0x470>)
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002104:	2b00      	cmp	r3, #0
 8002106:	d0f0      	beq.n	80020ea <HAL_RCC_OscConfig+0x416>
 8002108:	e054      	b.n	80021b4 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800210a:	4b10      	ldr	r3, [pc, #64]	; (800214c <HAL_RCC_OscConfig+0x478>)
 800210c:	2200      	movs	r2, #0
 800210e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002110:	f7ff fa52 	bl	80015b8 <HAL_GetTick>
 8002114:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002116:	e008      	b.n	800212a <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002118:	f7ff fa4e 	bl	80015b8 <HAL_GetTick>
 800211c:	4602      	mov	r2, r0
 800211e:	693b      	ldr	r3, [r7, #16]
 8002120:	1ad3      	subs	r3, r2, r3
 8002122:	2b02      	cmp	r3, #2
 8002124:	d901      	bls.n	800212a <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8002126:	2303      	movs	r3, #3
 8002128:	e045      	b.n	80021b6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800212a:	4b06      	ldr	r3, [pc, #24]	; (8002144 <HAL_RCC_OscConfig+0x470>)
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002132:	2b00      	cmp	r3, #0
 8002134:	d1f0      	bne.n	8002118 <HAL_RCC_OscConfig+0x444>
 8002136:	e03d      	b.n	80021b4 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	699b      	ldr	r3, [r3, #24]
 800213c:	2b01      	cmp	r3, #1
 800213e:	d107      	bne.n	8002150 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8002140:	2301      	movs	r3, #1
 8002142:	e038      	b.n	80021b6 <HAL_RCC_OscConfig+0x4e2>
 8002144:	40023800 	.word	0x40023800
 8002148:	40007000 	.word	0x40007000
 800214c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002150:	4b1b      	ldr	r3, [pc, #108]	; (80021c0 <HAL_RCC_OscConfig+0x4ec>)
 8002152:	685b      	ldr	r3, [r3, #4]
 8002154:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	699b      	ldr	r3, [r3, #24]
 800215a:	2b01      	cmp	r3, #1
 800215c:	d028      	beq.n	80021b0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800215e:	68fb      	ldr	r3, [r7, #12]
 8002160:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002168:	429a      	cmp	r2, r3
 800216a:	d121      	bne.n	80021b0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800216c:	68fb      	ldr	r3, [r7, #12]
 800216e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002176:	429a      	cmp	r2, r3
 8002178:	d11a      	bne.n	80021b0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800217a:	68fa      	ldr	r2, [r7, #12]
 800217c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002180:	4013      	ands	r3, r2
 8002182:	687a      	ldr	r2, [r7, #4]
 8002184:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002186:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002188:	4293      	cmp	r3, r2
 800218a:	d111      	bne.n	80021b0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800218c:	68fb      	ldr	r3, [r7, #12]
 800218e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002196:	085b      	lsrs	r3, r3, #1
 8002198:	3b01      	subs	r3, #1
 800219a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800219c:	429a      	cmp	r2, r3
 800219e:	d107      	bne.n	80021b0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80021a0:	68fb      	ldr	r3, [r7, #12]
 80021a2:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80021aa:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80021ac:	429a      	cmp	r2, r3
 80021ae:	d001      	beq.n	80021b4 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80021b0:	2301      	movs	r3, #1
 80021b2:	e000      	b.n	80021b6 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80021b4:	2300      	movs	r3, #0
}
 80021b6:	4618      	mov	r0, r3
 80021b8:	3718      	adds	r7, #24
 80021ba:	46bd      	mov	sp, r7
 80021bc:	bd80      	pop	{r7, pc}
 80021be:	bf00      	nop
 80021c0:	40023800 	.word	0x40023800

080021c4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80021c4:	b580      	push	{r7, lr}
 80021c6:	b084      	sub	sp, #16
 80021c8:	af00      	add	r7, sp, #0
 80021ca:	6078      	str	r0, [r7, #4]
 80021cc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	2b00      	cmp	r3, #0
 80021d2:	d101      	bne.n	80021d8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80021d4:	2301      	movs	r3, #1
 80021d6:	e0cc      	b.n	8002372 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80021d8:	4b68      	ldr	r3, [pc, #416]	; (800237c <HAL_RCC_ClockConfig+0x1b8>)
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	f003 030f 	and.w	r3, r3, #15
 80021e0:	683a      	ldr	r2, [r7, #0]
 80021e2:	429a      	cmp	r2, r3
 80021e4:	d90c      	bls.n	8002200 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80021e6:	4b65      	ldr	r3, [pc, #404]	; (800237c <HAL_RCC_ClockConfig+0x1b8>)
 80021e8:	683a      	ldr	r2, [r7, #0]
 80021ea:	b2d2      	uxtb	r2, r2
 80021ec:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80021ee:	4b63      	ldr	r3, [pc, #396]	; (800237c <HAL_RCC_ClockConfig+0x1b8>)
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	f003 030f 	and.w	r3, r3, #15
 80021f6:	683a      	ldr	r2, [r7, #0]
 80021f8:	429a      	cmp	r2, r3
 80021fa:	d001      	beq.n	8002200 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80021fc:	2301      	movs	r3, #1
 80021fe:	e0b8      	b.n	8002372 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	f003 0302 	and.w	r3, r3, #2
 8002208:	2b00      	cmp	r3, #0
 800220a:	d020      	beq.n	800224e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	f003 0304 	and.w	r3, r3, #4
 8002214:	2b00      	cmp	r3, #0
 8002216:	d005      	beq.n	8002224 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002218:	4b59      	ldr	r3, [pc, #356]	; (8002380 <HAL_RCC_ClockConfig+0x1bc>)
 800221a:	689b      	ldr	r3, [r3, #8]
 800221c:	4a58      	ldr	r2, [pc, #352]	; (8002380 <HAL_RCC_ClockConfig+0x1bc>)
 800221e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002222:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	f003 0308 	and.w	r3, r3, #8
 800222c:	2b00      	cmp	r3, #0
 800222e:	d005      	beq.n	800223c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002230:	4b53      	ldr	r3, [pc, #332]	; (8002380 <HAL_RCC_ClockConfig+0x1bc>)
 8002232:	689b      	ldr	r3, [r3, #8]
 8002234:	4a52      	ldr	r2, [pc, #328]	; (8002380 <HAL_RCC_ClockConfig+0x1bc>)
 8002236:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800223a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800223c:	4b50      	ldr	r3, [pc, #320]	; (8002380 <HAL_RCC_ClockConfig+0x1bc>)
 800223e:	689b      	ldr	r3, [r3, #8]
 8002240:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	689b      	ldr	r3, [r3, #8]
 8002248:	494d      	ldr	r1, [pc, #308]	; (8002380 <HAL_RCC_ClockConfig+0x1bc>)
 800224a:	4313      	orrs	r3, r2
 800224c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	f003 0301 	and.w	r3, r3, #1
 8002256:	2b00      	cmp	r3, #0
 8002258:	d044      	beq.n	80022e4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	685b      	ldr	r3, [r3, #4]
 800225e:	2b01      	cmp	r3, #1
 8002260:	d107      	bne.n	8002272 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002262:	4b47      	ldr	r3, [pc, #284]	; (8002380 <HAL_RCC_ClockConfig+0x1bc>)
 8002264:	681b      	ldr	r3, [r3, #0]
 8002266:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800226a:	2b00      	cmp	r3, #0
 800226c:	d119      	bne.n	80022a2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800226e:	2301      	movs	r3, #1
 8002270:	e07f      	b.n	8002372 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	685b      	ldr	r3, [r3, #4]
 8002276:	2b02      	cmp	r3, #2
 8002278:	d003      	beq.n	8002282 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800227e:	2b03      	cmp	r3, #3
 8002280:	d107      	bne.n	8002292 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002282:	4b3f      	ldr	r3, [pc, #252]	; (8002380 <HAL_RCC_ClockConfig+0x1bc>)
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800228a:	2b00      	cmp	r3, #0
 800228c:	d109      	bne.n	80022a2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800228e:	2301      	movs	r3, #1
 8002290:	e06f      	b.n	8002372 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002292:	4b3b      	ldr	r3, [pc, #236]	; (8002380 <HAL_RCC_ClockConfig+0x1bc>)
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	f003 0302 	and.w	r3, r3, #2
 800229a:	2b00      	cmp	r3, #0
 800229c:	d101      	bne.n	80022a2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800229e:	2301      	movs	r3, #1
 80022a0:	e067      	b.n	8002372 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80022a2:	4b37      	ldr	r3, [pc, #220]	; (8002380 <HAL_RCC_ClockConfig+0x1bc>)
 80022a4:	689b      	ldr	r3, [r3, #8]
 80022a6:	f023 0203 	bic.w	r2, r3, #3
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	685b      	ldr	r3, [r3, #4]
 80022ae:	4934      	ldr	r1, [pc, #208]	; (8002380 <HAL_RCC_ClockConfig+0x1bc>)
 80022b0:	4313      	orrs	r3, r2
 80022b2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80022b4:	f7ff f980 	bl	80015b8 <HAL_GetTick>
 80022b8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80022ba:	e00a      	b.n	80022d2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80022bc:	f7ff f97c 	bl	80015b8 <HAL_GetTick>
 80022c0:	4602      	mov	r2, r0
 80022c2:	68fb      	ldr	r3, [r7, #12]
 80022c4:	1ad3      	subs	r3, r2, r3
 80022c6:	f241 3288 	movw	r2, #5000	; 0x1388
 80022ca:	4293      	cmp	r3, r2
 80022cc:	d901      	bls.n	80022d2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80022ce:	2303      	movs	r3, #3
 80022d0:	e04f      	b.n	8002372 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80022d2:	4b2b      	ldr	r3, [pc, #172]	; (8002380 <HAL_RCC_ClockConfig+0x1bc>)
 80022d4:	689b      	ldr	r3, [r3, #8]
 80022d6:	f003 020c 	and.w	r2, r3, #12
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	685b      	ldr	r3, [r3, #4]
 80022de:	009b      	lsls	r3, r3, #2
 80022e0:	429a      	cmp	r2, r3
 80022e2:	d1eb      	bne.n	80022bc <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80022e4:	4b25      	ldr	r3, [pc, #148]	; (800237c <HAL_RCC_ClockConfig+0x1b8>)
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	f003 030f 	and.w	r3, r3, #15
 80022ec:	683a      	ldr	r2, [r7, #0]
 80022ee:	429a      	cmp	r2, r3
 80022f0:	d20c      	bcs.n	800230c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80022f2:	4b22      	ldr	r3, [pc, #136]	; (800237c <HAL_RCC_ClockConfig+0x1b8>)
 80022f4:	683a      	ldr	r2, [r7, #0]
 80022f6:	b2d2      	uxtb	r2, r2
 80022f8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80022fa:	4b20      	ldr	r3, [pc, #128]	; (800237c <HAL_RCC_ClockConfig+0x1b8>)
 80022fc:	681b      	ldr	r3, [r3, #0]
 80022fe:	f003 030f 	and.w	r3, r3, #15
 8002302:	683a      	ldr	r2, [r7, #0]
 8002304:	429a      	cmp	r2, r3
 8002306:	d001      	beq.n	800230c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002308:	2301      	movs	r3, #1
 800230a:	e032      	b.n	8002372 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	f003 0304 	and.w	r3, r3, #4
 8002314:	2b00      	cmp	r3, #0
 8002316:	d008      	beq.n	800232a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002318:	4b19      	ldr	r3, [pc, #100]	; (8002380 <HAL_RCC_ClockConfig+0x1bc>)
 800231a:	689b      	ldr	r3, [r3, #8]
 800231c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	68db      	ldr	r3, [r3, #12]
 8002324:	4916      	ldr	r1, [pc, #88]	; (8002380 <HAL_RCC_ClockConfig+0x1bc>)
 8002326:	4313      	orrs	r3, r2
 8002328:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	f003 0308 	and.w	r3, r3, #8
 8002332:	2b00      	cmp	r3, #0
 8002334:	d009      	beq.n	800234a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002336:	4b12      	ldr	r3, [pc, #72]	; (8002380 <HAL_RCC_ClockConfig+0x1bc>)
 8002338:	689b      	ldr	r3, [r3, #8]
 800233a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	691b      	ldr	r3, [r3, #16]
 8002342:	00db      	lsls	r3, r3, #3
 8002344:	490e      	ldr	r1, [pc, #56]	; (8002380 <HAL_RCC_ClockConfig+0x1bc>)
 8002346:	4313      	orrs	r3, r2
 8002348:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800234a:	f000 f821 	bl	8002390 <HAL_RCC_GetSysClockFreq>
 800234e:	4602      	mov	r2, r0
 8002350:	4b0b      	ldr	r3, [pc, #44]	; (8002380 <HAL_RCC_ClockConfig+0x1bc>)
 8002352:	689b      	ldr	r3, [r3, #8]
 8002354:	091b      	lsrs	r3, r3, #4
 8002356:	f003 030f 	and.w	r3, r3, #15
 800235a:	490a      	ldr	r1, [pc, #40]	; (8002384 <HAL_RCC_ClockConfig+0x1c0>)
 800235c:	5ccb      	ldrb	r3, [r1, r3]
 800235e:	fa22 f303 	lsr.w	r3, r2, r3
 8002362:	4a09      	ldr	r2, [pc, #36]	; (8002388 <HAL_RCC_ClockConfig+0x1c4>)
 8002364:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002366:	4b09      	ldr	r3, [pc, #36]	; (800238c <HAL_RCC_ClockConfig+0x1c8>)
 8002368:	681b      	ldr	r3, [r3, #0]
 800236a:	4618      	mov	r0, r3
 800236c:	f7ff f8e0 	bl	8001530 <HAL_InitTick>

  return HAL_OK;
 8002370:	2300      	movs	r3, #0
}
 8002372:	4618      	mov	r0, r3
 8002374:	3710      	adds	r7, #16
 8002376:	46bd      	mov	sp, r7
 8002378:	bd80      	pop	{r7, pc}
 800237a:	bf00      	nop
 800237c:	40023c00 	.word	0x40023c00
 8002380:	40023800 	.word	0x40023800
 8002384:	08004360 	.word	0x08004360
 8002388:	20000018 	.word	0x20000018
 800238c:	20000028 	.word	0x20000028

08002390 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002390:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002394:	b090      	sub	sp, #64	; 0x40
 8002396:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002398:	2300      	movs	r3, #0
 800239a:	637b      	str	r3, [r7, #52]	; 0x34
 800239c:	2300      	movs	r3, #0
 800239e:	63fb      	str	r3, [r7, #60]	; 0x3c
 80023a0:	2300      	movs	r3, #0
 80023a2:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 80023a4:	2300      	movs	r3, #0
 80023a6:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80023a8:	4b59      	ldr	r3, [pc, #356]	; (8002510 <HAL_RCC_GetSysClockFreq+0x180>)
 80023aa:	689b      	ldr	r3, [r3, #8]
 80023ac:	f003 030c 	and.w	r3, r3, #12
 80023b0:	2b08      	cmp	r3, #8
 80023b2:	d00d      	beq.n	80023d0 <HAL_RCC_GetSysClockFreq+0x40>
 80023b4:	2b08      	cmp	r3, #8
 80023b6:	f200 80a1 	bhi.w	80024fc <HAL_RCC_GetSysClockFreq+0x16c>
 80023ba:	2b00      	cmp	r3, #0
 80023bc:	d002      	beq.n	80023c4 <HAL_RCC_GetSysClockFreq+0x34>
 80023be:	2b04      	cmp	r3, #4
 80023c0:	d003      	beq.n	80023ca <HAL_RCC_GetSysClockFreq+0x3a>
 80023c2:	e09b      	b.n	80024fc <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80023c4:	4b53      	ldr	r3, [pc, #332]	; (8002514 <HAL_RCC_GetSysClockFreq+0x184>)
 80023c6:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 80023c8:	e09b      	b.n	8002502 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80023ca:	4b53      	ldr	r3, [pc, #332]	; (8002518 <HAL_RCC_GetSysClockFreq+0x188>)
 80023cc:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80023ce:	e098      	b.n	8002502 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80023d0:	4b4f      	ldr	r3, [pc, #316]	; (8002510 <HAL_RCC_GetSysClockFreq+0x180>)
 80023d2:	685b      	ldr	r3, [r3, #4]
 80023d4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80023d8:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80023da:	4b4d      	ldr	r3, [pc, #308]	; (8002510 <HAL_RCC_GetSysClockFreq+0x180>)
 80023dc:	685b      	ldr	r3, [r3, #4]
 80023de:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80023e2:	2b00      	cmp	r3, #0
 80023e4:	d028      	beq.n	8002438 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80023e6:	4b4a      	ldr	r3, [pc, #296]	; (8002510 <HAL_RCC_GetSysClockFreq+0x180>)
 80023e8:	685b      	ldr	r3, [r3, #4]
 80023ea:	099b      	lsrs	r3, r3, #6
 80023ec:	2200      	movs	r2, #0
 80023ee:	623b      	str	r3, [r7, #32]
 80023f0:	627a      	str	r2, [r7, #36]	; 0x24
 80023f2:	6a3b      	ldr	r3, [r7, #32]
 80023f4:	f3c3 0008 	ubfx	r0, r3, #0, #9
 80023f8:	2100      	movs	r1, #0
 80023fa:	4b47      	ldr	r3, [pc, #284]	; (8002518 <HAL_RCC_GetSysClockFreq+0x188>)
 80023fc:	fb03 f201 	mul.w	r2, r3, r1
 8002400:	2300      	movs	r3, #0
 8002402:	fb00 f303 	mul.w	r3, r0, r3
 8002406:	4413      	add	r3, r2
 8002408:	4a43      	ldr	r2, [pc, #268]	; (8002518 <HAL_RCC_GetSysClockFreq+0x188>)
 800240a:	fba0 1202 	umull	r1, r2, r0, r2
 800240e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002410:	460a      	mov	r2, r1
 8002412:	62ba      	str	r2, [r7, #40]	; 0x28
 8002414:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002416:	4413      	add	r3, r2
 8002418:	62fb      	str	r3, [r7, #44]	; 0x2c
 800241a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800241c:	2200      	movs	r2, #0
 800241e:	61bb      	str	r3, [r7, #24]
 8002420:	61fa      	str	r2, [r7, #28]
 8002422:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002426:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 800242a:	f7fd ff41 	bl	80002b0 <__aeabi_uldivmod>
 800242e:	4602      	mov	r2, r0
 8002430:	460b      	mov	r3, r1
 8002432:	4613      	mov	r3, r2
 8002434:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002436:	e053      	b.n	80024e0 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002438:	4b35      	ldr	r3, [pc, #212]	; (8002510 <HAL_RCC_GetSysClockFreq+0x180>)
 800243a:	685b      	ldr	r3, [r3, #4]
 800243c:	099b      	lsrs	r3, r3, #6
 800243e:	2200      	movs	r2, #0
 8002440:	613b      	str	r3, [r7, #16]
 8002442:	617a      	str	r2, [r7, #20]
 8002444:	693b      	ldr	r3, [r7, #16]
 8002446:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 800244a:	f04f 0b00 	mov.w	fp, #0
 800244e:	4652      	mov	r2, sl
 8002450:	465b      	mov	r3, fp
 8002452:	f04f 0000 	mov.w	r0, #0
 8002456:	f04f 0100 	mov.w	r1, #0
 800245a:	0159      	lsls	r1, r3, #5
 800245c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002460:	0150      	lsls	r0, r2, #5
 8002462:	4602      	mov	r2, r0
 8002464:	460b      	mov	r3, r1
 8002466:	ebb2 080a 	subs.w	r8, r2, sl
 800246a:	eb63 090b 	sbc.w	r9, r3, fp
 800246e:	f04f 0200 	mov.w	r2, #0
 8002472:	f04f 0300 	mov.w	r3, #0
 8002476:	ea4f 1389 	mov.w	r3, r9, lsl #6
 800247a:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 800247e:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8002482:	ebb2 0408 	subs.w	r4, r2, r8
 8002486:	eb63 0509 	sbc.w	r5, r3, r9
 800248a:	f04f 0200 	mov.w	r2, #0
 800248e:	f04f 0300 	mov.w	r3, #0
 8002492:	00eb      	lsls	r3, r5, #3
 8002494:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002498:	00e2      	lsls	r2, r4, #3
 800249a:	4614      	mov	r4, r2
 800249c:	461d      	mov	r5, r3
 800249e:	eb14 030a 	adds.w	r3, r4, sl
 80024a2:	603b      	str	r3, [r7, #0]
 80024a4:	eb45 030b 	adc.w	r3, r5, fp
 80024a8:	607b      	str	r3, [r7, #4]
 80024aa:	f04f 0200 	mov.w	r2, #0
 80024ae:	f04f 0300 	mov.w	r3, #0
 80024b2:	e9d7 4500 	ldrd	r4, r5, [r7]
 80024b6:	4629      	mov	r1, r5
 80024b8:	028b      	lsls	r3, r1, #10
 80024ba:	4621      	mov	r1, r4
 80024bc:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80024c0:	4621      	mov	r1, r4
 80024c2:	028a      	lsls	r2, r1, #10
 80024c4:	4610      	mov	r0, r2
 80024c6:	4619      	mov	r1, r3
 80024c8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80024ca:	2200      	movs	r2, #0
 80024cc:	60bb      	str	r3, [r7, #8]
 80024ce:	60fa      	str	r2, [r7, #12]
 80024d0:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80024d4:	f7fd feec 	bl	80002b0 <__aeabi_uldivmod>
 80024d8:	4602      	mov	r2, r0
 80024da:	460b      	mov	r3, r1
 80024dc:	4613      	mov	r3, r2
 80024de:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80024e0:	4b0b      	ldr	r3, [pc, #44]	; (8002510 <HAL_RCC_GetSysClockFreq+0x180>)
 80024e2:	685b      	ldr	r3, [r3, #4]
 80024e4:	0c1b      	lsrs	r3, r3, #16
 80024e6:	f003 0303 	and.w	r3, r3, #3
 80024ea:	3301      	adds	r3, #1
 80024ec:	005b      	lsls	r3, r3, #1
 80024ee:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 80024f0:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80024f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80024f4:	fbb2 f3f3 	udiv	r3, r2, r3
 80024f8:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80024fa:	e002      	b.n	8002502 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80024fc:	4b05      	ldr	r3, [pc, #20]	; (8002514 <HAL_RCC_GetSysClockFreq+0x184>)
 80024fe:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8002500:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002502:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8002504:	4618      	mov	r0, r3
 8002506:	3740      	adds	r7, #64	; 0x40
 8002508:	46bd      	mov	sp, r7
 800250a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800250e:	bf00      	nop
 8002510:	40023800 	.word	0x40023800
 8002514:	00f42400 	.word	0x00f42400
 8002518:	017d7840 	.word	0x017d7840

0800251c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800251c:	b480      	push	{r7}
 800251e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002520:	4b03      	ldr	r3, [pc, #12]	; (8002530 <HAL_RCC_GetHCLKFreq+0x14>)
 8002522:	681b      	ldr	r3, [r3, #0]
}
 8002524:	4618      	mov	r0, r3
 8002526:	46bd      	mov	sp, r7
 8002528:	f85d 7b04 	ldr.w	r7, [sp], #4
 800252c:	4770      	bx	lr
 800252e:	bf00      	nop
 8002530:	20000018 	.word	0x20000018

08002534 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002534:	b580      	push	{r7, lr}
 8002536:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002538:	f7ff fff0 	bl	800251c <HAL_RCC_GetHCLKFreq>
 800253c:	4602      	mov	r2, r0
 800253e:	4b05      	ldr	r3, [pc, #20]	; (8002554 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002540:	689b      	ldr	r3, [r3, #8]
 8002542:	0a9b      	lsrs	r3, r3, #10
 8002544:	f003 0307 	and.w	r3, r3, #7
 8002548:	4903      	ldr	r1, [pc, #12]	; (8002558 <HAL_RCC_GetPCLK1Freq+0x24>)
 800254a:	5ccb      	ldrb	r3, [r1, r3]
 800254c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002550:	4618      	mov	r0, r3
 8002552:	bd80      	pop	{r7, pc}
 8002554:	40023800 	.word	0x40023800
 8002558:	08004370 	.word	0x08004370

0800255c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800255c:	b580      	push	{r7, lr}
 800255e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8002560:	f7ff ffdc 	bl	800251c <HAL_RCC_GetHCLKFreq>
 8002564:	4602      	mov	r2, r0
 8002566:	4b05      	ldr	r3, [pc, #20]	; (800257c <HAL_RCC_GetPCLK2Freq+0x20>)
 8002568:	689b      	ldr	r3, [r3, #8]
 800256a:	0b5b      	lsrs	r3, r3, #13
 800256c:	f003 0307 	and.w	r3, r3, #7
 8002570:	4903      	ldr	r1, [pc, #12]	; (8002580 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002572:	5ccb      	ldrb	r3, [r1, r3]
 8002574:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002578:	4618      	mov	r0, r3
 800257a:	bd80      	pop	{r7, pc}
 800257c:	40023800 	.word	0x40023800
 8002580:	08004370 	.word	0x08004370

08002584 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002584:	b580      	push	{r7, lr}
 8002586:	b082      	sub	sp, #8
 8002588:	af00      	add	r7, sp, #0
 800258a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	2b00      	cmp	r3, #0
 8002590:	d101      	bne.n	8002596 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002592:	2301      	movs	r3, #1
 8002594:	e03f      	b.n	8002616 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800259c:	b2db      	uxtb	r3, r3
 800259e:	2b00      	cmp	r3, #0
 80025a0:	d106      	bne.n	80025b0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	2200      	movs	r2, #0
 80025a6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80025aa:	6878      	ldr	r0, [r7, #4]
 80025ac:	f7fe fcec 	bl	8000f88 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	2224      	movs	r2, #36	; 0x24
 80025b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	68da      	ldr	r2, [r3, #12]
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80025c6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80025c8:	6878      	ldr	r0, [r7, #4]
 80025ca:	f000 febb 	bl	8003344 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	691a      	ldr	r2, [r3, #16]
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80025dc:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	695a      	ldr	r2, [r3, #20]
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80025ec:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	68da      	ldr	r2, [r3, #12]
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80025fc:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	2200      	movs	r2, #0
 8002602:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	2220      	movs	r2, #32
 8002608:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	2220      	movs	r2, #32
 8002610:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002614:	2300      	movs	r3, #0
}
 8002616:	4618      	mov	r0, r3
 8002618:	3708      	adds	r7, #8
 800261a:	46bd      	mov	sp, r7
 800261c:	bd80      	pop	{r7, pc}

0800261e <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800261e:	b580      	push	{r7, lr}
 8002620:	b08a      	sub	sp, #40	; 0x28
 8002622:	af02      	add	r7, sp, #8
 8002624:	60f8      	str	r0, [r7, #12]
 8002626:	60b9      	str	r1, [r7, #8]
 8002628:	603b      	str	r3, [r7, #0]
 800262a:	4613      	mov	r3, r2
 800262c:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800262e:	2300      	movs	r3, #0
 8002630:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002632:	68fb      	ldr	r3, [r7, #12]
 8002634:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002638:	b2db      	uxtb	r3, r3
 800263a:	2b20      	cmp	r3, #32
 800263c:	d17c      	bne.n	8002738 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 800263e:	68bb      	ldr	r3, [r7, #8]
 8002640:	2b00      	cmp	r3, #0
 8002642:	d002      	beq.n	800264a <HAL_UART_Transmit+0x2c>
 8002644:	88fb      	ldrh	r3, [r7, #6]
 8002646:	2b00      	cmp	r3, #0
 8002648:	d101      	bne.n	800264e <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800264a:	2301      	movs	r3, #1
 800264c:	e075      	b.n	800273a <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800264e:	68fb      	ldr	r3, [r7, #12]
 8002650:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002654:	2b01      	cmp	r3, #1
 8002656:	d101      	bne.n	800265c <HAL_UART_Transmit+0x3e>
 8002658:	2302      	movs	r3, #2
 800265a:	e06e      	b.n	800273a <HAL_UART_Transmit+0x11c>
 800265c:	68fb      	ldr	r3, [r7, #12]
 800265e:	2201      	movs	r2, #1
 8002660:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002664:	68fb      	ldr	r3, [r7, #12]
 8002666:	2200      	movs	r2, #0
 8002668:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800266a:	68fb      	ldr	r3, [r7, #12]
 800266c:	2221      	movs	r2, #33	; 0x21
 800266e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002672:	f7fe ffa1 	bl	80015b8 <HAL_GetTick>
 8002676:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8002678:	68fb      	ldr	r3, [r7, #12]
 800267a:	88fa      	ldrh	r2, [r7, #6]
 800267c:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800267e:	68fb      	ldr	r3, [r7, #12]
 8002680:	88fa      	ldrh	r2, [r7, #6]
 8002682:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002684:	68fb      	ldr	r3, [r7, #12]
 8002686:	689b      	ldr	r3, [r3, #8]
 8002688:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800268c:	d108      	bne.n	80026a0 <HAL_UART_Transmit+0x82>
 800268e:	68fb      	ldr	r3, [r7, #12]
 8002690:	691b      	ldr	r3, [r3, #16]
 8002692:	2b00      	cmp	r3, #0
 8002694:	d104      	bne.n	80026a0 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8002696:	2300      	movs	r3, #0
 8002698:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800269a:	68bb      	ldr	r3, [r7, #8]
 800269c:	61bb      	str	r3, [r7, #24]
 800269e:	e003      	b.n	80026a8 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 80026a0:	68bb      	ldr	r3, [r7, #8]
 80026a2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80026a4:	2300      	movs	r3, #0
 80026a6:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80026a8:	68fb      	ldr	r3, [r7, #12]
 80026aa:	2200      	movs	r2, #0
 80026ac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 80026b0:	e02a      	b.n	8002708 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80026b2:	683b      	ldr	r3, [r7, #0]
 80026b4:	9300      	str	r3, [sp, #0]
 80026b6:	697b      	ldr	r3, [r7, #20]
 80026b8:	2200      	movs	r2, #0
 80026ba:	2180      	movs	r1, #128	; 0x80
 80026bc:	68f8      	ldr	r0, [r7, #12]
 80026be:	f000 fbfb 	bl	8002eb8 <UART_WaitOnFlagUntilTimeout>
 80026c2:	4603      	mov	r3, r0
 80026c4:	2b00      	cmp	r3, #0
 80026c6:	d001      	beq.n	80026cc <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 80026c8:	2303      	movs	r3, #3
 80026ca:	e036      	b.n	800273a <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 80026cc:	69fb      	ldr	r3, [r7, #28]
 80026ce:	2b00      	cmp	r3, #0
 80026d0:	d10b      	bne.n	80026ea <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80026d2:	69bb      	ldr	r3, [r7, #24]
 80026d4:	881b      	ldrh	r3, [r3, #0]
 80026d6:	461a      	mov	r2, r3
 80026d8:	68fb      	ldr	r3, [r7, #12]
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80026e0:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80026e2:	69bb      	ldr	r3, [r7, #24]
 80026e4:	3302      	adds	r3, #2
 80026e6:	61bb      	str	r3, [r7, #24]
 80026e8:	e007      	b.n	80026fa <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80026ea:	69fb      	ldr	r3, [r7, #28]
 80026ec:	781a      	ldrb	r2, [r3, #0]
 80026ee:	68fb      	ldr	r3, [r7, #12]
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80026f4:	69fb      	ldr	r3, [r7, #28]
 80026f6:	3301      	adds	r3, #1
 80026f8:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80026fa:	68fb      	ldr	r3, [r7, #12]
 80026fc:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80026fe:	b29b      	uxth	r3, r3
 8002700:	3b01      	subs	r3, #1
 8002702:	b29a      	uxth	r2, r3
 8002704:	68fb      	ldr	r3, [r7, #12]
 8002706:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8002708:	68fb      	ldr	r3, [r7, #12]
 800270a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800270c:	b29b      	uxth	r3, r3
 800270e:	2b00      	cmp	r3, #0
 8002710:	d1cf      	bne.n	80026b2 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002712:	683b      	ldr	r3, [r7, #0]
 8002714:	9300      	str	r3, [sp, #0]
 8002716:	697b      	ldr	r3, [r7, #20]
 8002718:	2200      	movs	r2, #0
 800271a:	2140      	movs	r1, #64	; 0x40
 800271c:	68f8      	ldr	r0, [r7, #12]
 800271e:	f000 fbcb 	bl	8002eb8 <UART_WaitOnFlagUntilTimeout>
 8002722:	4603      	mov	r3, r0
 8002724:	2b00      	cmp	r3, #0
 8002726:	d001      	beq.n	800272c <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8002728:	2303      	movs	r3, #3
 800272a:	e006      	b.n	800273a <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800272c:	68fb      	ldr	r3, [r7, #12]
 800272e:	2220      	movs	r2, #32
 8002730:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8002734:	2300      	movs	r3, #0
 8002736:	e000      	b.n	800273a <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8002738:	2302      	movs	r3, #2
  }
}
 800273a:	4618      	mov	r0, r3
 800273c:	3720      	adds	r7, #32
 800273e:	46bd      	mov	sp, r7
 8002740:	bd80      	pop	{r7, pc}

08002742 <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002742:	b580      	push	{r7, lr}
 8002744:	b08a      	sub	sp, #40	; 0x28
 8002746:	af02      	add	r7, sp, #8
 8002748:	60f8      	str	r0, [r7, #12]
 800274a:	60b9      	str	r1, [r7, #8]
 800274c:	603b      	str	r3, [r7, #0]
 800274e:	4613      	mov	r3, r2
 8002750:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8002752:	2300      	movs	r3, #0
 8002754:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8002756:	68fb      	ldr	r3, [r7, #12]
 8002758:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800275c:	b2db      	uxtb	r3, r3
 800275e:	2b20      	cmp	r3, #32
 8002760:	f040 808c 	bne.w	800287c <HAL_UART_Receive+0x13a>
  {
    if ((pData == NULL) || (Size == 0U))
 8002764:	68bb      	ldr	r3, [r7, #8]
 8002766:	2b00      	cmp	r3, #0
 8002768:	d002      	beq.n	8002770 <HAL_UART_Receive+0x2e>
 800276a:	88fb      	ldrh	r3, [r7, #6]
 800276c:	2b00      	cmp	r3, #0
 800276e:	d101      	bne.n	8002774 <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 8002770:	2301      	movs	r3, #1
 8002772:	e084      	b.n	800287e <HAL_UART_Receive+0x13c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8002774:	68fb      	ldr	r3, [r7, #12]
 8002776:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800277a:	2b01      	cmp	r3, #1
 800277c:	d101      	bne.n	8002782 <HAL_UART_Receive+0x40>
 800277e:	2302      	movs	r3, #2
 8002780:	e07d      	b.n	800287e <HAL_UART_Receive+0x13c>
 8002782:	68fb      	ldr	r3, [r7, #12]
 8002784:	2201      	movs	r2, #1
 8002786:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800278a:	68fb      	ldr	r3, [r7, #12]
 800278c:	2200      	movs	r2, #0
 800278e:	641a      	str	r2, [r3, #64]	; 0x40
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8002790:	68fb      	ldr	r3, [r7, #12]
 8002792:	2222      	movs	r2, #34	; 0x22
 8002794:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002798:	68fb      	ldr	r3, [r7, #12]
 800279a:	2200      	movs	r2, #0
 800279c:	631a      	str	r2, [r3, #48]	; 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800279e:	f7fe ff0b 	bl	80015b8 <HAL_GetTick>
 80027a2:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 80027a4:	68fb      	ldr	r3, [r7, #12]
 80027a6:	88fa      	ldrh	r2, [r7, #6]
 80027a8:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 80027aa:	68fb      	ldr	r3, [r7, #12]
 80027ac:	88fa      	ldrh	r2, [r7, #6]
 80027ae:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80027b0:	68fb      	ldr	r3, [r7, #12]
 80027b2:	689b      	ldr	r3, [r3, #8]
 80027b4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80027b8:	d108      	bne.n	80027cc <HAL_UART_Receive+0x8a>
 80027ba:	68fb      	ldr	r3, [r7, #12]
 80027bc:	691b      	ldr	r3, [r3, #16]
 80027be:	2b00      	cmp	r3, #0
 80027c0:	d104      	bne.n	80027cc <HAL_UART_Receive+0x8a>
    {
      pdata8bits  = NULL;
 80027c2:	2300      	movs	r3, #0
 80027c4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80027c6:	68bb      	ldr	r3, [r7, #8]
 80027c8:	61bb      	str	r3, [r7, #24]
 80027ca:	e003      	b.n	80027d4 <HAL_UART_Receive+0x92>
    }
    else
    {
      pdata8bits  = pData;
 80027cc:	68bb      	ldr	r3, [r7, #8]
 80027ce:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80027d0:	2300      	movs	r3, #0
 80027d2:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80027d4:	68fb      	ldr	r3, [r7, #12]
 80027d6:	2200      	movs	r2, #0
 80027d8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 80027dc:	e043      	b.n	8002866 <HAL_UART_Receive+0x124>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 80027de:	683b      	ldr	r3, [r7, #0]
 80027e0:	9300      	str	r3, [sp, #0]
 80027e2:	697b      	ldr	r3, [r7, #20]
 80027e4:	2200      	movs	r2, #0
 80027e6:	2120      	movs	r1, #32
 80027e8:	68f8      	ldr	r0, [r7, #12]
 80027ea:	f000 fb65 	bl	8002eb8 <UART_WaitOnFlagUntilTimeout>
 80027ee:	4603      	mov	r3, r0
 80027f0:	2b00      	cmp	r3, #0
 80027f2:	d001      	beq.n	80027f8 <HAL_UART_Receive+0xb6>
      {
        return HAL_TIMEOUT;
 80027f4:	2303      	movs	r3, #3
 80027f6:	e042      	b.n	800287e <HAL_UART_Receive+0x13c>
      }
      if (pdata8bits == NULL)
 80027f8:	69fb      	ldr	r3, [r7, #28]
 80027fa:	2b00      	cmp	r3, #0
 80027fc:	d10c      	bne.n	8002818 <HAL_UART_Receive+0xd6>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 80027fe:	68fb      	ldr	r3, [r7, #12]
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	685b      	ldr	r3, [r3, #4]
 8002804:	b29b      	uxth	r3, r3
 8002806:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800280a:	b29a      	uxth	r2, r3
 800280c:	69bb      	ldr	r3, [r7, #24]
 800280e:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8002810:	69bb      	ldr	r3, [r7, #24]
 8002812:	3302      	adds	r3, #2
 8002814:	61bb      	str	r3, [r7, #24]
 8002816:	e01f      	b.n	8002858 <HAL_UART_Receive+0x116>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8002818:	68fb      	ldr	r3, [r7, #12]
 800281a:	689b      	ldr	r3, [r3, #8]
 800281c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002820:	d007      	beq.n	8002832 <HAL_UART_Receive+0xf0>
 8002822:	68fb      	ldr	r3, [r7, #12]
 8002824:	689b      	ldr	r3, [r3, #8]
 8002826:	2b00      	cmp	r3, #0
 8002828:	d10a      	bne.n	8002840 <HAL_UART_Receive+0xfe>
 800282a:	68fb      	ldr	r3, [r7, #12]
 800282c:	691b      	ldr	r3, [r3, #16]
 800282e:	2b00      	cmp	r3, #0
 8002830:	d106      	bne.n	8002840 <HAL_UART_Receive+0xfe>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8002832:	68fb      	ldr	r3, [r7, #12]
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	685b      	ldr	r3, [r3, #4]
 8002838:	b2da      	uxtb	r2, r3
 800283a:	69fb      	ldr	r3, [r7, #28]
 800283c:	701a      	strb	r2, [r3, #0]
 800283e:	e008      	b.n	8002852 <HAL_UART_Receive+0x110>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8002840:	68fb      	ldr	r3, [r7, #12]
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	685b      	ldr	r3, [r3, #4]
 8002846:	b2db      	uxtb	r3, r3
 8002848:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800284c:	b2da      	uxtb	r2, r3
 800284e:	69fb      	ldr	r3, [r7, #28]
 8002850:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 8002852:	69fb      	ldr	r3, [r7, #28]
 8002854:	3301      	adds	r3, #1
 8002856:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8002858:	68fb      	ldr	r3, [r7, #12]
 800285a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800285c:	b29b      	uxth	r3, r3
 800285e:	3b01      	subs	r3, #1
 8002860:	b29a      	uxth	r2, r3
 8002862:	68fb      	ldr	r3, [r7, #12]
 8002864:	85da      	strh	r2, [r3, #46]	; 0x2e
    while (huart->RxXferCount > 0U)
 8002866:	68fb      	ldr	r3, [r7, #12]
 8002868:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800286a:	b29b      	uxth	r3, r3
 800286c:	2b00      	cmp	r3, #0
 800286e:	d1b6      	bne.n	80027de <HAL_UART_Receive+0x9c>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8002870:	68fb      	ldr	r3, [r7, #12]
 8002872:	2220      	movs	r2, #32
 8002874:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    return HAL_OK;
 8002878:	2300      	movs	r3, #0
 800287a:	e000      	b.n	800287e <HAL_UART_Receive+0x13c>
  }
  else
  {
    return HAL_BUSY;
 800287c:	2302      	movs	r3, #2
  }
}
 800287e:	4618      	mov	r0, r3
 8002880:	3720      	adds	r7, #32
 8002882:	46bd      	mov	sp, r7
 8002884:	bd80      	pop	{r7, pc}

08002886 <HAL_UART_Transmit_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8002886:	b480      	push	{r7}
 8002888:	b085      	sub	sp, #20
 800288a:	af00      	add	r7, sp, #0
 800288c:	60f8      	str	r0, [r7, #12]
 800288e:	60b9      	str	r1, [r7, #8]
 8002890:	4613      	mov	r3, r2
 8002892:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002894:	68fb      	ldr	r3, [r7, #12]
 8002896:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800289a:	b2db      	uxtb	r3, r3
 800289c:	2b20      	cmp	r3, #32
 800289e:	d130      	bne.n	8002902 <HAL_UART_Transmit_IT+0x7c>
  {
    if ((pData == NULL) || (Size == 0U))
 80028a0:	68bb      	ldr	r3, [r7, #8]
 80028a2:	2b00      	cmp	r3, #0
 80028a4:	d002      	beq.n	80028ac <HAL_UART_Transmit_IT+0x26>
 80028a6:	88fb      	ldrh	r3, [r7, #6]
 80028a8:	2b00      	cmp	r3, #0
 80028aa:	d101      	bne.n	80028b0 <HAL_UART_Transmit_IT+0x2a>
    {
      return HAL_ERROR;
 80028ac:	2301      	movs	r3, #1
 80028ae:	e029      	b.n	8002904 <HAL_UART_Transmit_IT+0x7e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80028b0:	68fb      	ldr	r3, [r7, #12]
 80028b2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80028b6:	2b01      	cmp	r3, #1
 80028b8:	d101      	bne.n	80028be <HAL_UART_Transmit_IT+0x38>
 80028ba:	2302      	movs	r3, #2
 80028bc:	e022      	b.n	8002904 <HAL_UART_Transmit_IT+0x7e>
 80028be:	68fb      	ldr	r3, [r7, #12]
 80028c0:	2201      	movs	r2, #1
 80028c2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->pTxBuffPtr = pData;
 80028c6:	68fb      	ldr	r3, [r7, #12]
 80028c8:	68ba      	ldr	r2, [r7, #8]
 80028ca:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 80028cc:	68fb      	ldr	r3, [r7, #12]
 80028ce:	88fa      	ldrh	r2, [r7, #6]
 80028d0:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80028d2:	68fb      	ldr	r3, [r7, #12]
 80028d4:	88fa      	ldrh	r2, [r7, #6]
 80028d6:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80028d8:	68fb      	ldr	r3, [r7, #12]
 80028da:	2200      	movs	r2, #0
 80028dc:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80028de:	68fb      	ldr	r3, [r7, #12]
 80028e0:	2221      	movs	r2, #33	; 0x21
 80028e2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80028e6:	68fb      	ldr	r3, [r7, #12]
 80028e8:	2200      	movs	r2, #0
 80028ea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Enable the UART Transmit data register empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_TXE);
 80028ee:	68fb      	ldr	r3, [r7, #12]
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	68da      	ldr	r2, [r3, #12]
 80028f4:	68fb      	ldr	r3, [r7, #12]
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80028fc:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 80028fe:	2300      	movs	r3, #0
 8002900:	e000      	b.n	8002904 <HAL_UART_Transmit_IT+0x7e>
  }
  else
  {
    return HAL_BUSY;
 8002902:	2302      	movs	r3, #2
  }
}
 8002904:	4618      	mov	r0, r3
 8002906:	3714      	adds	r7, #20
 8002908:	46bd      	mov	sp, r7
 800290a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800290e:	4770      	bx	lr

08002910 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8002910:	b580      	push	{r7, lr}
 8002912:	b084      	sub	sp, #16
 8002914:	af00      	add	r7, sp, #0
 8002916:	60f8      	str	r0, [r7, #12]
 8002918:	60b9      	str	r1, [r7, #8]
 800291a:	4613      	mov	r3, r2
 800291c:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800291e:	68fb      	ldr	r3, [r7, #12]
 8002920:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002924:	b2db      	uxtb	r3, r3
 8002926:	2b20      	cmp	r3, #32
 8002928:	d11d      	bne.n	8002966 <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 800292a:	68bb      	ldr	r3, [r7, #8]
 800292c:	2b00      	cmp	r3, #0
 800292e:	d002      	beq.n	8002936 <HAL_UART_Receive_IT+0x26>
 8002930:	88fb      	ldrh	r3, [r7, #6]
 8002932:	2b00      	cmp	r3, #0
 8002934:	d101      	bne.n	800293a <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8002936:	2301      	movs	r3, #1
 8002938:	e016      	b.n	8002968 <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800293a:	68fb      	ldr	r3, [r7, #12]
 800293c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002940:	2b01      	cmp	r3, #1
 8002942:	d101      	bne.n	8002948 <HAL_UART_Receive_IT+0x38>
 8002944:	2302      	movs	r3, #2
 8002946:	e00f      	b.n	8002968 <HAL_UART_Receive_IT+0x58>
 8002948:	68fb      	ldr	r3, [r7, #12]
 800294a:	2201      	movs	r2, #1
 800294c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002950:	68fb      	ldr	r3, [r7, #12]
 8002952:	2200      	movs	r2, #0
 8002954:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8002956:	88fb      	ldrh	r3, [r7, #6]
 8002958:	461a      	mov	r2, r3
 800295a:	68b9      	ldr	r1, [r7, #8]
 800295c:	68f8      	ldr	r0, [r7, #12]
 800295e:	f000 fb19 	bl	8002f94 <UART_Start_Receive_IT>
 8002962:	4603      	mov	r3, r0
 8002964:	e000      	b.n	8002968 <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 8002966:	2302      	movs	r3, #2
  }
}
 8002968:	4618      	mov	r0, r3
 800296a:	3710      	adds	r7, #16
 800296c:	46bd      	mov	sp, r7
 800296e:	bd80      	pop	{r7, pc}

08002970 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8002970:	b580      	push	{r7, lr}
 8002972:	b0ba      	sub	sp, #232	; 0xe8
 8002974:	af00      	add	r7, sp, #0
 8002976:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	68db      	ldr	r3, [r3, #12]
 8002988:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	695b      	ldr	r3, [r3, #20]
 8002992:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8002996:	2300      	movs	r3, #0
 8002998:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 800299c:	2300      	movs	r3, #0
 800299e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80029a2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80029a6:	f003 030f 	and.w	r3, r3, #15
 80029aa:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 80029ae:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80029b2:	2b00      	cmp	r3, #0
 80029b4:	d10f      	bne.n	80029d6 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80029b6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80029ba:	f003 0320 	and.w	r3, r3, #32
 80029be:	2b00      	cmp	r3, #0
 80029c0:	d009      	beq.n	80029d6 <HAL_UART_IRQHandler+0x66>
 80029c2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80029c6:	f003 0320 	and.w	r3, r3, #32
 80029ca:	2b00      	cmp	r3, #0
 80029cc:	d003      	beq.n	80029d6 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 80029ce:	6878      	ldr	r0, [r7, #4]
 80029d0:	f000 fbfd 	bl	80031ce <UART_Receive_IT>
      return;
 80029d4:	e256      	b.n	8002e84 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 80029d6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80029da:	2b00      	cmp	r3, #0
 80029dc:	f000 80de 	beq.w	8002b9c <HAL_UART_IRQHandler+0x22c>
 80029e0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80029e4:	f003 0301 	and.w	r3, r3, #1
 80029e8:	2b00      	cmp	r3, #0
 80029ea:	d106      	bne.n	80029fa <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80029ec:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80029f0:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80029f4:	2b00      	cmp	r3, #0
 80029f6:	f000 80d1 	beq.w	8002b9c <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80029fa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80029fe:	f003 0301 	and.w	r3, r3, #1
 8002a02:	2b00      	cmp	r3, #0
 8002a04:	d00b      	beq.n	8002a1e <HAL_UART_IRQHandler+0xae>
 8002a06:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002a0a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002a0e:	2b00      	cmp	r3, #0
 8002a10:	d005      	beq.n	8002a1e <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a16:	f043 0201 	orr.w	r2, r3, #1
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002a1e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002a22:	f003 0304 	and.w	r3, r3, #4
 8002a26:	2b00      	cmp	r3, #0
 8002a28:	d00b      	beq.n	8002a42 <HAL_UART_IRQHandler+0xd2>
 8002a2a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002a2e:	f003 0301 	and.w	r3, r3, #1
 8002a32:	2b00      	cmp	r3, #0
 8002a34:	d005      	beq.n	8002a42 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a3a:	f043 0202 	orr.w	r2, r3, #2
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002a42:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002a46:	f003 0302 	and.w	r3, r3, #2
 8002a4a:	2b00      	cmp	r3, #0
 8002a4c:	d00b      	beq.n	8002a66 <HAL_UART_IRQHandler+0xf6>
 8002a4e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002a52:	f003 0301 	and.w	r3, r3, #1
 8002a56:	2b00      	cmp	r3, #0
 8002a58:	d005      	beq.n	8002a66 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a5e:	f043 0204 	orr.w	r2, r3, #4
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8002a66:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002a6a:	f003 0308 	and.w	r3, r3, #8
 8002a6e:	2b00      	cmp	r3, #0
 8002a70:	d011      	beq.n	8002a96 <HAL_UART_IRQHandler+0x126>
 8002a72:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002a76:	f003 0320 	and.w	r3, r3, #32
 8002a7a:	2b00      	cmp	r3, #0
 8002a7c:	d105      	bne.n	8002a8a <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8002a7e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002a82:	f003 0301 	and.w	r3, r3, #1
 8002a86:	2b00      	cmp	r3, #0
 8002a88:	d005      	beq.n	8002a96 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a8e:	f043 0208 	orr.w	r2, r3, #8
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a9a:	2b00      	cmp	r3, #0
 8002a9c:	f000 81ed 	beq.w	8002e7a <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002aa0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002aa4:	f003 0320 	and.w	r3, r3, #32
 8002aa8:	2b00      	cmp	r3, #0
 8002aaa:	d008      	beq.n	8002abe <HAL_UART_IRQHandler+0x14e>
 8002aac:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002ab0:	f003 0320 	and.w	r3, r3, #32
 8002ab4:	2b00      	cmp	r3, #0
 8002ab6:	d002      	beq.n	8002abe <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8002ab8:	6878      	ldr	r0, [r7, #4]
 8002aba:	f000 fb88 	bl	80031ce <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	695b      	ldr	r3, [r3, #20]
 8002ac4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002ac8:	2b40      	cmp	r3, #64	; 0x40
 8002aca:	bf0c      	ite	eq
 8002acc:	2301      	moveq	r3, #1
 8002ace:	2300      	movne	r3, #0
 8002ad0:	b2db      	uxtb	r3, r3
 8002ad2:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ada:	f003 0308 	and.w	r3, r3, #8
 8002ade:	2b00      	cmp	r3, #0
 8002ae0:	d103      	bne.n	8002aea <HAL_UART_IRQHandler+0x17a>
 8002ae2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8002ae6:	2b00      	cmp	r3, #0
 8002ae8:	d04f      	beq.n	8002b8a <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8002aea:	6878      	ldr	r0, [r7, #4]
 8002aec:	f000 fa90 	bl	8003010 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	695b      	ldr	r3, [r3, #20]
 8002af6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002afa:	2b40      	cmp	r3, #64	; 0x40
 8002afc:	d141      	bne.n	8002b82 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	3314      	adds	r3, #20
 8002b04:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002b08:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8002b0c:	e853 3f00 	ldrex	r3, [r3]
 8002b10:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8002b14:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8002b18:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002b1c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	3314      	adds	r3, #20
 8002b26:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8002b2a:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8002b2e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002b32:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8002b36:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8002b3a:	e841 2300 	strex	r3, r2, [r1]
 8002b3e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8002b42:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8002b46:	2b00      	cmp	r3, #0
 8002b48:	d1d9      	bne.n	8002afe <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002b4e:	2b00      	cmp	r3, #0
 8002b50:	d013      	beq.n	8002b7a <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002b56:	4a7d      	ldr	r2, [pc, #500]	; (8002d4c <HAL_UART_IRQHandler+0x3dc>)
 8002b58:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002b5e:	4618      	mov	r0, r3
 8002b60:	f7fe feb7 	bl	80018d2 <HAL_DMA_Abort_IT>
 8002b64:	4603      	mov	r3, r0
 8002b66:	2b00      	cmp	r3, #0
 8002b68:	d016      	beq.n	8002b98 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002b6e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002b70:	687a      	ldr	r2, [r7, #4]
 8002b72:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002b74:	4610      	mov	r0, r2
 8002b76:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002b78:	e00e      	b.n	8002b98 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8002b7a:	6878      	ldr	r0, [r7, #4]
 8002b7c:	f000 f986 	bl	8002e8c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002b80:	e00a      	b.n	8002b98 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8002b82:	6878      	ldr	r0, [r7, #4]
 8002b84:	f000 f982 	bl	8002e8c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002b88:	e006      	b.n	8002b98 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8002b8a:	6878      	ldr	r0, [r7, #4]
 8002b8c:	f000 f97e 	bl	8002e8c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	2200      	movs	r2, #0
 8002b94:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8002b96:	e170      	b.n	8002e7a <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002b98:	bf00      	nop
    return;
 8002b9a:	e16e      	b.n	8002e7a <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ba0:	2b01      	cmp	r3, #1
 8002ba2:	f040 814a 	bne.w	8002e3a <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8002ba6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002baa:	f003 0310 	and.w	r3, r3, #16
 8002bae:	2b00      	cmp	r3, #0
 8002bb0:	f000 8143 	beq.w	8002e3a <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8002bb4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002bb8:	f003 0310 	and.w	r3, r3, #16
 8002bbc:	2b00      	cmp	r3, #0
 8002bbe:	f000 813c 	beq.w	8002e3a <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8002bc2:	2300      	movs	r3, #0
 8002bc4:	60bb      	str	r3, [r7, #8]
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	60bb      	str	r3, [r7, #8]
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	685b      	ldr	r3, [r3, #4]
 8002bd4:	60bb      	str	r3, [r7, #8]
 8002bd6:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	695b      	ldr	r3, [r3, #20]
 8002bde:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002be2:	2b40      	cmp	r3, #64	; 0x40
 8002be4:	f040 80b4 	bne.w	8002d50 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	685b      	ldr	r3, [r3, #4]
 8002bf0:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8002bf4:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8002bf8:	2b00      	cmp	r3, #0
 8002bfa:	f000 8140 	beq.w	8002e7e <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8002c02:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8002c06:	429a      	cmp	r2, r3
 8002c08:	f080 8139 	bcs.w	8002e7e <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8002c12:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002c18:	69db      	ldr	r3, [r3, #28]
 8002c1a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002c1e:	f000 8088 	beq.w	8002d32 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	330c      	adds	r3, #12
 8002c28:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002c2c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8002c30:	e853 3f00 	ldrex	r3, [r3]
 8002c34:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8002c38:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002c3c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002c40:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	330c      	adds	r3, #12
 8002c4a:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8002c4e:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8002c52:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002c56:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8002c5a:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8002c5e:	e841 2300 	strex	r3, r2, [r1]
 8002c62:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8002c66:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002c6a:	2b00      	cmp	r3, #0
 8002c6c:	d1d9      	bne.n	8002c22 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	3314      	adds	r3, #20
 8002c74:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002c76:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002c78:	e853 3f00 	ldrex	r3, [r3]
 8002c7c:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8002c7e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002c80:	f023 0301 	bic.w	r3, r3, #1
 8002c84:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	3314      	adds	r3, #20
 8002c8e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8002c92:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8002c96:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002c98:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8002c9a:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8002c9e:	e841 2300 	strex	r3, r2, [r1]
 8002ca2:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8002ca4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002ca6:	2b00      	cmp	r3, #0
 8002ca8:	d1e1      	bne.n	8002c6e <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	3314      	adds	r3, #20
 8002cb0:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002cb2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002cb4:	e853 3f00 	ldrex	r3, [r3]
 8002cb8:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8002cba:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002cbc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002cc0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	3314      	adds	r3, #20
 8002cca:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8002cce:	66fa      	str	r2, [r7, #108]	; 0x6c
 8002cd0:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002cd2:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8002cd4:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8002cd6:	e841 2300 	strex	r3, r2, [r1]
 8002cda:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8002cdc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002cde:	2b00      	cmp	r3, #0
 8002ce0:	d1e3      	bne.n	8002caa <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	2220      	movs	r2, #32
 8002ce6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	2200      	movs	r2, #0
 8002cee:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	330c      	adds	r3, #12
 8002cf6:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002cf8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002cfa:	e853 3f00 	ldrex	r3, [r3]
 8002cfe:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8002d00:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002d02:	f023 0310 	bic.w	r3, r3, #16
 8002d06:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	330c      	adds	r3, #12
 8002d10:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8002d14:	65ba      	str	r2, [r7, #88]	; 0x58
 8002d16:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002d18:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8002d1a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8002d1c:	e841 2300 	strex	r3, r2, [r1]
 8002d20:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8002d22:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002d24:	2b00      	cmp	r3, #0
 8002d26:	d1e3      	bne.n	8002cf0 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d2c:	4618      	mov	r0, r3
 8002d2e:	f7fe fd60 	bl	80017f2 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002d3a:	b29b      	uxth	r3, r3
 8002d3c:	1ad3      	subs	r3, r2, r3
 8002d3e:	b29b      	uxth	r3, r3
 8002d40:	4619      	mov	r1, r3
 8002d42:	6878      	ldr	r0, [r7, #4]
 8002d44:	f000 f8ac 	bl	8002ea0 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8002d48:	e099      	b.n	8002e7e <HAL_UART_IRQHandler+0x50e>
 8002d4a:	bf00      	nop
 8002d4c:	080030d7 	.word	0x080030d7
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002d58:	b29b      	uxth	r3, r3
 8002d5a:	1ad3      	subs	r3, r2, r3
 8002d5c:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002d64:	b29b      	uxth	r3, r3
 8002d66:	2b00      	cmp	r3, #0
 8002d68:	f000 808b 	beq.w	8002e82 <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8002d6c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8002d70:	2b00      	cmp	r3, #0
 8002d72:	f000 8086 	beq.w	8002e82 <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	330c      	adds	r3, #12
 8002d7c:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002d7e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002d80:	e853 3f00 	ldrex	r3, [r3]
 8002d84:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8002d86:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002d88:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8002d8c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	330c      	adds	r3, #12
 8002d96:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8002d9a:	647a      	str	r2, [r7, #68]	; 0x44
 8002d9c:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002d9e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8002da0:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8002da2:	e841 2300 	strex	r3, r2, [r1]
 8002da6:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8002da8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002daa:	2b00      	cmp	r3, #0
 8002dac:	d1e3      	bne.n	8002d76 <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	3314      	adds	r3, #20
 8002db4:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002db6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002db8:	e853 3f00 	ldrex	r3, [r3]
 8002dbc:	623b      	str	r3, [r7, #32]
   return(result);
 8002dbe:	6a3b      	ldr	r3, [r7, #32]
 8002dc0:	f023 0301 	bic.w	r3, r3, #1
 8002dc4:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	3314      	adds	r3, #20
 8002dce:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8002dd2:	633a      	str	r2, [r7, #48]	; 0x30
 8002dd4:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002dd6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8002dd8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002dda:	e841 2300 	strex	r3, r2, [r1]
 8002dde:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8002de0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002de2:	2b00      	cmp	r3, #0
 8002de4:	d1e3      	bne.n	8002dae <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	2220      	movs	r2, #32
 8002dea:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	2200      	movs	r2, #0
 8002df2:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	330c      	adds	r3, #12
 8002dfa:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002dfc:	693b      	ldr	r3, [r7, #16]
 8002dfe:	e853 3f00 	ldrex	r3, [r3]
 8002e02:	60fb      	str	r3, [r7, #12]
   return(result);
 8002e04:	68fb      	ldr	r3, [r7, #12]
 8002e06:	f023 0310 	bic.w	r3, r3, #16
 8002e0a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	330c      	adds	r3, #12
 8002e14:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8002e18:	61fa      	str	r2, [r7, #28]
 8002e1a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002e1c:	69b9      	ldr	r1, [r7, #24]
 8002e1e:	69fa      	ldr	r2, [r7, #28]
 8002e20:	e841 2300 	strex	r3, r2, [r1]
 8002e24:	617b      	str	r3, [r7, #20]
   return(result);
 8002e26:	697b      	ldr	r3, [r7, #20]
 8002e28:	2b00      	cmp	r3, #0
 8002e2a:	d1e3      	bne.n	8002df4 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8002e2c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8002e30:	4619      	mov	r1, r3
 8002e32:	6878      	ldr	r0, [r7, #4]
 8002e34:	f000 f834 	bl	8002ea0 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8002e38:	e023      	b.n	8002e82 <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8002e3a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002e3e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002e42:	2b00      	cmp	r3, #0
 8002e44:	d009      	beq.n	8002e5a <HAL_UART_IRQHandler+0x4ea>
 8002e46:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002e4a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002e4e:	2b00      	cmp	r3, #0
 8002e50:	d003      	beq.n	8002e5a <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8002e52:	6878      	ldr	r0, [r7, #4]
 8002e54:	f000 f953 	bl	80030fe <UART_Transmit_IT>
    return;
 8002e58:	e014      	b.n	8002e84 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8002e5a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002e5e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002e62:	2b00      	cmp	r3, #0
 8002e64:	d00e      	beq.n	8002e84 <HAL_UART_IRQHandler+0x514>
 8002e66:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002e6a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002e6e:	2b00      	cmp	r3, #0
 8002e70:	d008      	beq.n	8002e84 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8002e72:	6878      	ldr	r0, [r7, #4]
 8002e74:	f000 f993 	bl	800319e <UART_EndTransmit_IT>
    return;
 8002e78:	e004      	b.n	8002e84 <HAL_UART_IRQHandler+0x514>
    return;
 8002e7a:	bf00      	nop
 8002e7c:	e002      	b.n	8002e84 <HAL_UART_IRQHandler+0x514>
      return;
 8002e7e:	bf00      	nop
 8002e80:	e000      	b.n	8002e84 <HAL_UART_IRQHandler+0x514>
      return;
 8002e82:	bf00      	nop
  }
}
 8002e84:	37e8      	adds	r7, #232	; 0xe8
 8002e86:	46bd      	mov	sp, r7
 8002e88:	bd80      	pop	{r7, pc}
 8002e8a:	bf00      	nop

08002e8c <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8002e8c:	b480      	push	{r7}
 8002e8e:	b083      	sub	sp, #12
 8002e90:	af00      	add	r7, sp, #0
 8002e92:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8002e94:	bf00      	nop
 8002e96:	370c      	adds	r7, #12
 8002e98:	46bd      	mov	sp, r7
 8002e9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e9e:	4770      	bx	lr

08002ea0 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8002ea0:	b480      	push	{r7}
 8002ea2:	b083      	sub	sp, #12
 8002ea4:	af00      	add	r7, sp, #0
 8002ea6:	6078      	str	r0, [r7, #4]
 8002ea8:	460b      	mov	r3, r1
 8002eaa:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8002eac:	bf00      	nop
 8002eae:	370c      	adds	r7, #12
 8002eb0:	46bd      	mov	sp, r7
 8002eb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eb6:	4770      	bx	lr

08002eb8 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8002eb8:	b580      	push	{r7, lr}
 8002eba:	b090      	sub	sp, #64	; 0x40
 8002ebc:	af00      	add	r7, sp, #0
 8002ebe:	60f8      	str	r0, [r7, #12]
 8002ec0:	60b9      	str	r1, [r7, #8]
 8002ec2:	603b      	str	r3, [r7, #0]
 8002ec4:	4613      	mov	r3, r2
 8002ec6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002ec8:	e050      	b.n	8002f6c <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002eca:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002ecc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002ed0:	d04c      	beq.n	8002f6c <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8002ed2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002ed4:	2b00      	cmp	r3, #0
 8002ed6:	d007      	beq.n	8002ee8 <UART_WaitOnFlagUntilTimeout+0x30>
 8002ed8:	f7fe fb6e 	bl	80015b8 <HAL_GetTick>
 8002edc:	4602      	mov	r2, r0
 8002ede:	683b      	ldr	r3, [r7, #0]
 8002ee0:	1ad3      	subs	r3, r2, r3
 8002ee2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8002ee4:	429a      	cmp	r2, r3
 8002ee6:	d241      	bcs.n	8002f6c <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002ee8:	68fb      	ldr	r3, [r7, #12]
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	330c      	adds	r3, #12
 8002eee:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002ef0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002ef2:	e853 3f00 	ldrex	r3, [r3]
 8002ef6:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8002ef8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002efa:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8002efe:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002f00:	68fb      	ldr	r3, [r7, #12]
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	330c      	adds	r3, #12
 8002f06:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002f08:	637a      	str	r2, [r7, #52]	; 0x34
 8002f0a:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002f0c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8002f0e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002f10:	e841 2300 	strex	r3, r2, [r1]
 8002f14:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8002f16:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002f18:	2b00      	cmp	r3, #0
 8002f1a:	d1e5      	bne.n	8002ee8 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002f1c:	68fb      	ldr	r3, [r7, #12]
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	3314      	adds	r3, #20
 8002f22:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002f24:	697b      	ldr	r3, [r7, #20]
 8002f26:	e853 3f00 	ldrex	r3, [r3]
 8002f2a:	613b      	str	r3, [r7, #16]
   return(result);
 8002f2c:	693b      	ldr	r3, [r7, #16]
 8002f2e:	f023 0301 	bic.w	r3, r3, #1
 8002f32:	63bb      	str	r3, [r7, #56]	; 0x38
 8002f34:	68fb      	ldr	r3, [r7, #12]
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	3314      	adds	r3, #20
 8002f3a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002f3c:	623a      	str	r2, [r7, #32]
 8002f3e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002f40:	69f9      	ldr	r1, [r7, #28]
 8002f42:	6a3a      	ldr	r2, [r7, #32]
 8002f44:	e841 2300 	strex	r3, r2, [r1]
 8002f48:	61bb      	str	r3, [r7, #24]
   return(result);
 8002f4a:	69bb      	ldr	r3, [r7, #24]
 8002f4c:	2b00      	cmp	r3, #0
 8002f4e:	d1e5      	bne.n	8002f1c <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8002f50:	68fb      	ldr	r3, [r7, #12]
 8002f52:	2220      	movs	r2, #32
 8002f54:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8002f58:	68fb      	ldr	r3, [r7, #12]
 8002f5a:	2220      	movs	r2, #32
 8002f5c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8002f60:	68fb      	ldr	r3, [r7, #12]
 8002f62:	2200      	movs	r2, #0
 8002f64:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8002f68:	2303      	movs	r3, #3
 8002f6a:	e00f      	b.n	8002f8c <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002f6c:	68fb      	ldr	r3, [r7, #12]
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	681a      	ldr	r2, [r3, #0]
 8002f72:	68bb      	ldr	r3, [r7, #8]
 8002f74:	4013      	ands	r3, r2
 8002f76:	68ba      	ldr	r2, [r7, #8]
 8002f78:	429a      	cmp	r2, r3
 8002f7a:	bf0c      	ite	eq
 8002f7c:	2301      	moveq	r3, #1
 8002f7e:	2300      	movne	r3, #0
 8002f80:	b2db      	uxtb	r3, r3
 8002f82:	461a      	mov	r2, r3
 8002f84:	79fb      	ldrb	r3, [r7, #7]
 8002f86:	429a      	cmp	r2, r3
 8002f88:	d09f      	beq.n	8002eca <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002f8a:	2300      	movs	r3, #0
}
 8002f8c:	4618      	mov	r0, r3
 8002f8e:	3740      	adds	r7, #64	; 0x40
 8002f90:	46bd      	mov	sp, r7
 8002f92:	bd80      	pop	{r7, pc}

08002f94 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8002f94:	b480      	push	{r7}
 8002f96:	b085      	sub	sp, #20
 8002f98:	af00      	add	r7, sp, #0
 8002f9a:	60f8      	str	r0, [r7, #12]
 8002f9c:	60b9      	str	r1, [r7, #8]
 8002f9e:	4613      	mov	r3, r2
 8002fa0:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8002fa2:	68fb      	ldr	r3, [r7, #12]
 8002fa4:	68ba      	ldr	r2, [r7, #8]
 8002fa6:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8002fa8:	68fb      	ldr	r3, [r7, #12]
 8002faa:	88fa      	ldrh	r2, [r7, #6]
 8002fac:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 8002fae:	68fb      	ldr	r3, [r7, #12]
 8002fb0:	88fa      	ldrh	r2, [r7, #6]
 8002fb2:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002fb4:	68fb      	ldr	r3, [r7, #12]
 8002fb6:	2200      	movs	r2, #0
 8002fb8:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8002fba:	68fb      	ldr	r3, [r7, #12]
 8002fbc:	2222      	movs	r2, #34	; 0x22
 8002fbe:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8002fc2:	68fb      	ldr	r3, [r7, #12]
 8002fc4:	2200      	movs	r2, #0
 8002fc6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 8002fca:	68fb      	ldr	r3, [r7, #12]
 8002fcc:	691b      	ldr	r3, [r3, #16]
 8002fce:	2b00      	cmp	r3, #0
 8002fd0:	d007      	beq.n	8002fe2 <UART_Start_Receive_IT+0x4e>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8002fd2:	68fb      	ldr	r3, [r7, #12]
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	68da      	ldr	r2, [r3, #12]
 8002fd8:	68fb      	ldr	r3, [r7, #12]
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002fe0:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8002fe2:	68fb      	ldr	r3, [r7, #12]
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	695a      	ldr	r2, [r3, #20]
 8002fe8:	68fb      	ldr	r3, [r7, #12]
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	f042 0201 	orr.w	r2, r2, #1
 8002ff0:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8002ff2:	68fb      	ldr	r3, [r7, #12]
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	68da      	ldr	r2, [r3, #12]
 8002ff8:	68fb      	ldr	r3, [r7, #12]
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	f042 0220 	orr.w	r2, r2, #32
 8003000:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8003002:	2300      	movs	r3, #0
}
 8003004:	4618      	mov	r0, r3
 8003006:	3714      	adds	r7, #20
 8003008:	46bd      	mov	sp, r7
 800300a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800300e:	4770      	bx	lr

08003010 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003010:	b480      	push	{r7}
 8003012:	b095      	sub	sp, #84	; 0x54
 8003014:	af00      	add	r7, sp, #0
 8003016:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	330c      	adds	r3, #12
 800301e:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003020:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003022:	e853 3f00 	ldrex	r3, [r3]
 8003026:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8003028:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800302a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800302e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	330c      	adds	r3, #12
 8003036:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003038:	643a      	str	r2, [r7, #64]	; 0x40
 800303a:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800303c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800303e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8003040:	e841 2300 	strex	r3, r2, [r1]
 8003044:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8003046:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003048:	2b00      	cmp	r3, #0
 800304a:	d1e5      	bne.n	8003018 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	3314      	adds	r3, #20
 8003052:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003054:	6a3b      	ldr	r3, [r7, #32]
 8003056:	e853 3f00 	ldrex	r3, [r3]
 800305a:	61fb      	str	r3, [r7, #28]
   return(result);
 800305c:	69fb      	ldr	r3, [r7, #28]
 800305e:	f023 0301 	bic.w	r3, r3, #1
 8003062:	64bb      	str	r3, [r7, #72]	; 0x48
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	3314      	adds	r3, #20
 800306a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800306c:	62fa      	str	r2, [r7, #44]	; 0x2c
 800306e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003070:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003072:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003074:	e841 2300 	strex	r3, r2, [r1]
 8003078:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800307a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800307c:	2b00      	cmp	r3, #0
 800307e:	d1e5      	bne.n	800304c <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003084:	2b01      	cmp	r3, #1
 8003086:	d119      	bne.n	80030bc <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	330c      	adds	r3, #12
 800308e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003090:	68fb      	ldr	r3, [r7, #12]
 8003092:	e853 3f00 	ldrex	r3, [r3]
 8003096:	60bb      	str	r3, [r7, #8]
   return(result);
 8003098:	68bb      	ldr	r3, [r7, #8]
 800309a:	f023 0310 	bic.w	r3, r3, #16
 800309e:	647b      	str	r3, [r7, #68]	; 0x44
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	330c      	adds	r3, #12
 80030a6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80030a8:	61ba      	str	r2, [r7, #24]
 80030aa:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80030ac:	6979      	ldr	r1, [r7, #20]
 80030ae:	69ba      	ldr	r2, [r7, #24]
 80030b0:	e841 2300 	strex	r3, r2, [r1]
 80030b4:	613b      	str	r3, [r7, #16]
   return(result);
 80030b6:	693b      	ldr	r3, [r7, #16]
 80030b8:	2b00      	cmp	r3, #0
 80030ba:	d1e5      	bne.n	8003088 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	2220      	movs	r2, #32
 80030c0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	2200      	movs	r2, #0
 80030c8:	631a      	str	r2, [r3, #48]	; 0x30
}
 80030ca:	bf00      	nop
 80030cc:	3754      	adds	r7, #84	; 0x54
 80030ce:	46bd      	mov	sp, r7
 80030d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030d4:	4770      	bx	lr

080030d6 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80030d6:	b580      	push	{r7, lr}
 80030d8:	b084      	sub	sp, #16
 80030da:	af00      	add	r7, sp, #0
 80030dc:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80030e2:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80030e4:	68fb      	ldr	r3, [r7, #12]
 80030e6:	2200      	movs	r2, #0
 80030e8:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 80030ea:	68fb      	ldr	r3, [r7, #12]
 80030ec:	2200      	movs	r2, #0
 80030ee:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80030f0:	68f8      	ldr	r0, [r7, #12]
 80030f2:	f7ff fecb 	bl	8002e8c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80030f6:	bf00      	nop
 80030f8:	3710      	adds	r7, #16
 80030fa:	46bd      	mov	sp, r7
 80030fc:	bd80      	pop	{r7, pc}

080030fe <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80030fe:	b480      	push	{r7}
 8003100:	b085      	sub	sp, #20
 8003102:	af00      	add	r7, sp, #0
 8003104:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800310c:	b2db      	uxtb	r3, r3
 800310e:	2b21      	cmp	r3, #33	; 0x21
 8003110:	d13e      	bne.n	8003190 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	689b      	ldr	r3, [r3, #8]
 8003116:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800311a:	d114      	bne.n	8003146 <UART_Transmit_IT+0x48>
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	691b      	ldr	r3, [r3, #16]
 8003120:	2b00      	cmp	r3, #0
 8003122:	d110      	bne.n	8003146 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	6a1b      	ldr	r3, [r3, #32]
 8003128:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800312a:	68fb      	ldr	r3, [r7, #12]
 800312c:	881b      	ldrh	r3, [r3, #0]
 800312e:	461a      	mov	r2, r3
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003138:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	6a1b      	ldr	r3, [r3, #32]
 800313e:	1c9a      	adds	r2, r3, #2
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	621a      	str	r2, [r3, #32]
 8003144:	e008      	b.n	8003158 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	6a1b      	ldr	r3, [r3, #32]
 800314a:	1c59      	adds	r1, r3, #1
 800314c:	687a      	ldr	r2, [r7, #4]
 800314e:	6211      	str	r1, [r2, #32]
 8003150:	781a      	ldrb	r2, [r3, #0]
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800315c:	b29b      	uxth	r3, r3
 800315e:	3b01      	subs	r3, #1
 8003160:	b29b      	uxth	r3, r3
 8003162:	687a      	ldr	r2, [r7, #4]
 8003164:	4619      	mov	r1, r3
 8003166:	84d1      	strh	r1, [r2, #38]	; 0x26
 8003168:	2b00      	cmp	r3, #0
 800316a:	d10f      	bne.n	800318c <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	68da      	ldr	r2, [r3, #12]
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800317a:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	68da      	ldr	r2, [r3, #12]
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800318a:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800318c:	2300      	movs	r3, #0
 800318e:	e000      	b.n	8003192 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8003190:	2302      	movs	r3, #2
  }
}
 8003192:	4618      	mov	r0, r3
 8003194:	3714      	adds	r7, #20
 8003196:	46bd      	mov	sp, r7
 8003198:	f85d 7b04 	ldr.w	r7, [sp], #4
 800319c:	4770      	bx	lr

0800319e <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800319e:	b580      	push	{r7, lr}
 80031a0:	b082      	sub	sp, #8
 80031a2:	af00      	add	r7, sp, #0
 80031a4:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	68da      	ldr	r2, [r3, #12]
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80031b4:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	2220      	movs	r2, #32
 80031ba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80031be:	6878      	ldr	r0, [r7, #4]
 80031c0:	f7fe f912 	bl	80013e8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80031c4:	2300      	movs	r3, #0
}
 80031c6:	4618      	mov	r0, r3
 80031c8:	3708      	adds	r7, #8
 80031ca:	46bd      	mov	sp, r7
 80031cc:	bd80      	pop	{r7, pc}

080031ce <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80031ce:	b580      	push	{r7, lr}
 80031d0:	b08c      	sub	sp, #48	; 0x30
 80031d2:	af00      	add	r7, sp, #0
 80031d4:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80031dc:	b2db      	uxtb	r3, r3
 80031de:	2b22      	cmp	r3, #34	; 0x22
 80031e0:	f040 80ab 	bne.w	800333a <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	689b      	ldr	r3, [r3, #8]
 80031e8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80031ec:	d117      	bne.n	800321e <UART_Receive_IT+0x50>
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	691b      	ldr	r3, [r3, #16]
 80031f2:	2b00      	cmp	r3, #0
 80031f4:	d113      	bne.n	800321e <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 80031f6:	2300      	movs	r3, #0
 80031f8:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80031fe:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	685b      	ldr	r3, [r3, #4]
 8003206:	b29b      	uxth	r3, r3
 8003208:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800320c:	b29a      	uxth	r2, r3
 800320e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003210:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003216:	1c9a      	adds	r2, r3, #2
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	629a      	str	r2, [r3, #40]	; 0x28
 800321c:	e026      	b.n	800326c <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003222:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8003224:	2300      	movs	r3, #0
 8003226:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	689b      	ldr	r3, [r3, #8]
 800322c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003230:	d007      	beq.n	8003242 <UART_Receive_IT+0x74>
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	689b      	ldr	r3, [r3, #8]
 8003236:	2b00      	cmp	r3, #0
 8003238:	d10a      	bne.n	8003250 <UART_Receive_IT+0x82>
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	691b      	ldr	r3, [r3, #16]
 800323e:	2b00      	cmp	r3, #0
 8003240:	d106      	bne.n	8003250 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	685b      	ldr	r3, [r3, #4]
 8003248:	b2da      	uxtb	r2, r3
 800324a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800324c:	701a      	strb	r2, [r3, #0]
 800324e:	e008      	b.n	8003262 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	685b      	ldr	r3, [r3, #4]
 8003256:	b2db      	uxtb	r3, r3
 8003258:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800325c:	b2da      	uxtb	r2, r3
 800325e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003260:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003266:	1c5a      	adds	r2, r3, #1
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003270:	b29b      	uxth	r3, r3
 8003272:	3b01      	subs	r3, #1
 8003274:	b29b      	uxth	r3, r3
 8003276:	687a      	ldr	r2, [r7, #4]
 8003278:	4619      	mov	r1, r3
 800327a:	85d1      	strh	r1, [r2, #46]	; 0x2e
 800327c:	2b00      	cmp	r3, #0
 800327e:	d15a      	bne.n	8003336 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	68da      	ldr	r2, [r3, #12]
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	f022 0220 	bic.w	r2, r2, #32
 800328e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	68da      	ldr	r2, [r3, #12]
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800329e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	695a      	ldr	r2, [r3, #20]
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	f022 0201 	bic.w	r2, r2, #1
 80032ae:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	2220      	movs	r2, #32
 80032b4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032bc:	2b01      	cmp	r3, #1
 80032be:	d135      	bne.n	800332c <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	2200      	movs	r2, #0
 80032c4:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	330c      	adds	r3, #12
 80032cc:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80032ce:	697b      	ldr	r3, [r7, #20]
 80032d0:	e853 3f00 	ldrex	r3, [r3]
 80032d4:	613b      	str	r3, [r7, #16]
   return(result);
 80032d6:	693b      	ldr	r3, [r7, #16]
 80032d8:	f023 0310 	bic.w	r3, r3, #16
 80032dc:	627b      	str	r3, [r7, #36]	; 0x24
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	330c      	adds	r3, #12
 80032e4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80032e6:	623a      	str	r2, [r7, #32]
 80032e8:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80032ea:	69f9      	ldr	r1, [r7, #28]
 80032ec:	6a3a      	ldr	r2, [r7, #32]
 80032ee:	e841 2300 	strex	r3, r2, [r1]
 80032f2:	61bb      	str	r3, [r7, #24]
   return(result);
 80032f4:	69bb      	ldr	r3, [r7, #24]
 80032f6:	2b00      	cmp	r3, #0
 80032f8:	d1e5      	bne.n	80032c6 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	f003 0310 	and.w	r3, r3, #16
 8003304:	2b10      	cmp	r3, #16
 8003306:	d10a      	bne.n	800331e <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003308:	2300      	movs	r3, #0
 800330a:	60fb      	str	r3, [r7, #12]
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	60fb      	str	r3, [r7, #12]
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	685b      	ldr	r3, [r3, #4]
 800331a:	60fb      	str	r3, [r7, #12]
 800331c:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8003322:	4619      	mov	r1, r3
 8003324:	6878      	ldr	r0, [r7, #4]
 8003326:	f7ff fdbb 	bl	8002ea0 <HAL_UARTEx_RxEventCallback>
 800332a:	e002      	b.n	8003332 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800332c:	6878      	ldr	r0, [r7, #4]
 800332e:	f7fe f84b 	bl	80013c8 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8003332:	2300      	movs	r3, #0
 8003334:	e002      	b.n	800333c <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8003336:	2300      	movs	r3, #0
 8003338:	e000      	b.n	800333c <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 800333a:	2302      	movs	r3, #2
  }
}
 800333c:	4618      	mov	r0, r3
 800333e:	3730      	adds	r7, #48	; 0x30
 8003340:	46bd      	mov	sp, r7
 8003342:	bd80      	pop	{r7, pc}

08003344 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003344:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003348:	b0c0      	sub	sp, #256	; 0x100
 800334a:	af00      	add	r7, sp, #0
 800334c:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003350:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	691b      	ldr	r3, [r3, #16]
 8003358:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 800335c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003360:	68d9      	ldr	r1, [r3, #12]
 8003362:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003366:	681a      	ldr	r2, [r3, #0]
 8003368:	ea40 0301 	orr.w	r3, r0, r1
 800336c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800336e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003372:	689a      	ldr	r2, [r3, #8]
 8003374:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003378:	691b      	ldr	r3, [r3, #16]
 800337a:	431a      	orrs	r2, r3
 800337c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003380:	695b      	ldr	r3, [r3, #20]
 8003382:	431a      	orrs	r2, r3
 8003384:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003388:	69db      	ldr	r3, [r3, #28]
 800338a:	4313      	orrs	r3, r2
 800338c:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8003390:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	68db      	ldr	r3, [r3, #12]
 8003398:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 800339c:	f021 010c 	bic.w	r1, r1, #12
 80033a0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80033a4:	681a      	ldr	r2, [r3, #0]
 80033a6:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80033aa:	430b      	orrs	r3, r1
 80033ac:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80033ae:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	695b      	ldr	r3, [r3, #20]
 80033b6:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 80033ba:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80033be:	6999      	ldr	r1, [r3, #24]
 80033c0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80033c4:	681a      	ldr	r2, [r3, #0]
 80033c6:	ea40 0301 	orr.w	r3, r0, r1
 80033ca:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80033cc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80033d0:	681a      	ldr	r2, [r3, #0]
 80033d2:	4b8f      	ldr	r3, [pc, #572]	; (8003610 <UART_SetConfig+0x2cc>)
 80033d4:	429a      	cmp	r2, r3
 80033d6:	d005      	beq.n	80033e4 <UART_SetConfig+0xa0>
 80033d8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80033dc:	681a      	ldr	r2, [r3, #0]
 80033de:	4b8d      	ldr	r3, [pc, #564]	; (8003614 <UART_SetConfig+0x2d0>)
 80033e0:	429a      	cmp	r2, r3
 80033e2:	d104      	bne.n	80033ee <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80033e4:	f7ff f8ba 	bl	800255c <HAL_RCC_GetPCLK2Freq>
 80033e8:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 80033ec:	e003      	b.n	80033f6 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80033ee:	f7ff f8a1 	bl	8002534 <HAL_RCC_GetPCLK1Freq>
 80033f2:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80033f6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80033fa:	69db      	ldr	r3, [r3, #28]
 80033fc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003400:	f040 810c 	bne.w	800361c <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003404:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003408:	2200      	movs	r2, #0
 800340a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800340e:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8003412:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8003416:	4622      	mov	r2, r4
 8003418:	462b      	mov	r3, r5
 800341a:	1891      	adds	r1, r2, r2
 800341c:	65b9      	str	r1, [r7, #88]	; 0x58
 800341e:	415b      	adcs	r3, r3
 8003420:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003422:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8003426:	4621      	mov	r1, r4
 8003428:	eb12 0801 	adds.w	r8, r2, r1
 800342c:	4629      	mov	r1, r5
 800342e:	eb43 0901 	adc.w	r9, r3, r1
 8003432:	f04f 0200 	mov.w	r2, #0
 8003436:	f04f 0300 	mov.w	r3, #0
 800343a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800343e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003442:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003446:	4690      	mov	r8, r2
 8003448:	4699      	mov	r9, r3
 800344a:	4623      	mov	r3, r4
 800344c:	eb18 0303 	adds.w	r3, r8, r3
 8003450:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8003454:	462b      	mov	r3, r5
 8003456:	eb49 0303 	adc.w	r3, r9, r3
 800345a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800345e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003462:	685b      	ldr	r3, [r3, #4]
 8003464:	2200      	movs	r2, #0
 8003466:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800346a:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 800346e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8003472:	460b      	mov	r3, r1
 8003474:	18db      	adds	r3, r3, r3
 8003476:	653b      	str	r3, [r7, #80]	; 0x50
 8003478:	4613      	mov	r3, r2
 800347a:	eb42 0303 	adc.w	r3, r2, r3
 800347e:	657b      	str	r3, [r7, #84]	; 0x54
 8003480:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8003484:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8003488:	f7fc ff12 	bl	80002b0 <__aeabi_uldivmod>
 800348c:	4602      	mov	r2, r0
 800348e:	460b      	mov	r3, r1
 8003490:	4b61      	ldr	r3, [pc, #388]	; (8003618 <UART_SetConfig+0x2d4>)
 8003492:	fba3 2302 	umull	r2, r3, r3, r2
 8003496:	095b      	lsrs	r3, r3, #5
 8003498:	011c      	lsls	r4, r3, #4
 800349a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800349e:	2200      	movs	r2, #0
 80034a0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80034a4:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 80034a8:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 80034ac:	4642      	mov	r2, r8
 80034ae:	464b      	mov	r3, r9
 80034b0:	1891      	adds	r1, r2, r2
 80034b2:	64b9      	str	r1, [r7, #72]	; 0x48
 80034b4:	415b      	adcs	r3, r3
 80034b6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80034b8:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80034bc:	4641      	mov	r1, r8
 80034be:	eb12 0a01 	adds.w	sl, r2, r1
 80034c2:	4649      	mov	r1, r9
 80034c4:	eb43 0b01 	adc.w	fp, r3, r1
 80034c8:	f04f 0200 	mov.w	r2, #0
 80034cc:	f04f 0300 	mov.w	r3, #0
 80034d0:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80034d4:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80034d8:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80034dc:	4692      	mov	sl, r2
 80034de:	469b      	mov	fp, r3
 80034e0:	4643      	mov	r3, r8
 80034e2:	eb1a 0303 	adds.w	r3, sl, r3
 80034e6:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80034ea:	464b      	mov	r3, r9
 80034ec:	eb4b 0303 	adc.w	r3, fp, r3
 80034f0:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80034f4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80034f8:	685b      	ldr	r3, [r3, #4]
 80034fa:	2200      	movs	r2, #0
 80034fc:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8003500:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8003504:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8003508:	460b      	mov	r3, r1
 800350a:	18db      	adds	r3, r3, r3
 800350c:	643b      	str	r3, [r7, #64]	; 0x40
 800350e:	4613      	mov	r3, r2
 8003510:	eb42 0303 	adc.w	r3, r2, r3
 8003514:	647b      	str	r3, [r7, #68]	; 0x44
 8003516:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800351a:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 800351e:	f7fc fec7 	bl	80002b0 <__aeabi_uldivmod>
 8003522:	4602      	mov	r2, r0
 8003524:	460b      	mov	r3, r1
 8003526:	4611      	mov	r1, r2
 8003528:	4b3b      	ldr	r3, [pc, #236]	; (8003618 <UART_SetConfig+0x2d4>)
 800352a:	fba3 2301 	umull	r2, r3, r3, r1
 800352e:	095b      	lsrs	r3, r3, #5
 8003530:	2264      	movs	r2, #100	; 0x64
 8003532:	fb02 f303 	mul.w	r3, r2, r3
 8003536:	1acb      	subs	r3, r1, r3
 8003538:	00db      	lsls	r3, r3, #3
 800353a:	f103 0232 	add.w	r2, r3, #50	; 0x32
 800353e:	4b36      	ldr	r3, [pc, #216]	; (8003618 <UART_SetConfig+0x2d4>)
 8003540:	fba3 2302 	umull	r2, r3, r3, r2
 8003544:	095b      	lsrs	r3, r3, #5
 8003546:	005b      	lsls	r3, r3, #1
 8003548:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800354c:	441c      	add	r4, r3
 800354e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003552:	2200      	movs	r2, #0
 8003554:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8003558:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 800355c:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8003560:	4642      	mov	r2, r8
 8003562:	464b      	mov	r3, r9
 8003564:	1891      	adds	r1, r2, r2
 8003566:	63b9      	str	r1, [r7, #56]	; 0x38
 8003568:	415b      	adcs	r3, r3
 800356a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800356c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8003570:	4641      	mov	r1, r8
 8003572:	1851      	adds	r1, r2, r1
 8003574:	6339      	str	r1, [r7, #48]	; 0x30
 8003576:	4649      	mov	r1, r9
 8003578:	414b      	adcs	r3, r1
 800357a:	637b      	str	r3, [r7, #52]	; 0x34
 800357c:	f04f 0200 	mov.w	r2, #0
 8003580:	f04f 0300 	mov.w	r3, #0
 8003584:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8003588:	4659      	mov	r1, fp
 800358a:	00cb      	lsls	r3, r1, #3
 800358c:	4651      	mov	r1, sl
 800358e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003592:	4651      	mov	r1, sl
 8003594:	00ca      	lsls	r2, r1, #3
 8003596:	4610      	mov	r0, r2
 8003598:	4619      	mov	r1, r3
 800359a:	4603      	mov	r3, r0
 800359c:	4642      	mov	r2, r8
 800359e:	189b      	adds	r3, r3, r2
 80035a0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80035a4:	464b      	mov	r3, r9
 80035a6:	460a      	mov	r2, r1
 80035a8:	eb42 0303 	adc.w	r3, r2, r3
 80035ac:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80035b0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80035b4:	685b      	ldr	r3, [r3, #4]
 80035b6:	2200      	movs	r2, #0
 80035b8:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80035bc:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 80035c0:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 80035c4:	460b      	mov	r3, r1
 80035c6:	18db      	adds	r3, r3, r3
 80035c8:	62bb      	str	r3, [r7, #40]	; 0x28
 80035ca:	4613      	mov	r3, r2
 80035cc:	eb42 0303 	adc.w	r3, r2, r3
 80035d0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80035d2:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80035d6:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 80035da:	f7fc fe69 	bl	80002b0 <__aeabi_uldivmod>
 80035de:	4602      	mov	r2, r0
 80035e0:	460b      	mov	r3, r1
 80035e2:	4b0d      	ldr	r3, [pc, #52]	; (8003618 <UART_SetConfig+0x2d4>)
 80035e4:	fba3 1302 	umull	r1, r3, r3, r2
 80035e8:	095b      	lsrs	r3, r3, #5
 80035ea:	2164      	movs	r1, #100	; 0x64
 80035ec:	fb01 f303 	mul.w	r3, r1, r3
 80035f0:	1ad3      	subs	r3, r2, r3
 80035f2:	00db      	lsls	r3, r3, #3
 80035f4:	3332      	adds	r3, #50	; 0x32
 80035f6:	4a08      	ldr	r2, [pc, #32]	; (8003618 <UART_SetConfig+0x2d4>)
 80035f8:	fba2 2303 	umull	r2, r3, r2, r3
 80035fc:	095b      	lsrs	r3, r3, #5
 80035fe:	f003 0207 	and.w	r2, r3, #7
 8003602:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	4422      	add	r2, r4
 800360a:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800360c:	e105      	b.n	800381a <UART_SetConfig+0x4d6>
 800360e:	bf00      	nop
 8003610:	40011000 	.word	0x40011000
 8003614:	40011400 	.word	0x40011400
 8003618:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800361c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003620:	2200      	movs	r2, #0
 8003622:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8003626:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800362a:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 800362e:	4642      	mov	r2, r8
 8003630:	464b      	mov	r3, r9
 8003632:	1891      	adds	r1, r2, r2
 8003634:	6239      	str	r1, [r7, #32]
 8003636:	415b      	adcs	r3, r3
 8003638:	627b      	str	r3, [r7, #36]	; 0x24
 800363a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800363e:	4641      	mov	r1, r8
 8003640:	1854      	adds	r4, r2, r1
 8003642:	4649      	mov	r1, r9
 8003644:	eb43 0501 	adc.w	r5, r3, r1
 8003648:	f04f 0200 	mov.w	r2, #0
 800364c:	f04f 0300 	mov.w	r3, #0
 8003650:	00eb      	lsls	r3, r5, #3
 8003652:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003656:	00e2      	lsls	r2, r4, #3
 8003658:	4614      	mov	r4, r2
 800365a:	461d      	mov	r5, r3
 800365c:	4643      	mov	r3, r8
 800365e:	18e3      	adds	r3, r4, r3
 8003660:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8003664:	464b      	mov	r3, r9
 8003666:	eb45 0303 	adc.w	r3, r5, r3
 800366a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800366e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003672:	685b      	ldr	r3, [r3, #4]
 8003674:	2200      	movs	r2, #0
 8003676:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800367a:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800367e:	f04f 0200 	mov.w	r2, #0
 8003682:	f04f 0300 	mov.w	r3, #0
 8003686:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800368a:	4629      	mov	r1, r5
 800368c:	008b      	lsls	r3, r1, #2
 800368e:	4621      	mov	r1, r4
 8003690:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003694:	4621      	mov	r1, r4
 8003696:	008a      	lsls	r2, r1, #2
 8003698:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 800369c:	f7fc fe08 	bl	80002b0 <__aeabi_uldivmod>
 80036a0:	4602      	mov	r2, r0
 80036a2:	460b      	mov	r3, r1
 80036a4:	4b60      	ldr	r3, [pc, #384]	; (8003828 <UART_SetConfig+0x4e4>)
 80036a6:	fba3 2302 	umull	r2, r3, r3, r2
 80036aa:	095b      	lsrs	r3, r3, #5
 80036ac:	011c      	lsls	r4, r3, #4
 80036ae:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80036b2:	2200      	movs	r2, #0
 80036b4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80036b8:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80036bc:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 80036c0:	4642      	mov	r2, r8
 80036c2:	464b      	mov	r3, r9
 80036c4:	1891      	adds	r1, r2, r2
 80036c6:	61b9      	str	r1, [r7, #24]
 80036c8:	415b      	adcs	r3, r3
 80036ca:	61fb      	str	r3, [r7, #28]
 80036cc:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80036d0:	4641      	mov	r1, r8
 80036d2:	1851      	adds	r1, r2, r1
 80036d4:	6139      	str	r1, [r7, #16]
 80036d6:	4649      	mov	r1, r9
 80036d8:	414b      	adcs	r3, r1
 80036da:	617b      	str	r3, [r7, #20]
 80036dc:	f04f 0200 	mov.w	r2, #0
 80036e0:	f04f 0300 	mov.w	r3, #0
 80036e4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80036e8:	4659      	mov	r1, fp
 80036ea:	00cb      	lsls	r3, r1, #3
 80036ec:	4651      	mov	r1, sl
 80036ee:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80036f2:	4651      	mov	r1, sl
 80036f4:	00ca      	lsls	r2, r1, #3
 80036f6:	4610      	mov	r0, r2
 80036f8:	4619      	mov	r1, r3
 80036fa:	4603      	mov	r3, r0
 80036fc:	4642      	mov	r2, r8
 80036fe:	189b      	adds	r3, r3, r2
 8003700:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8003704:	464b      	mov	r3, r9
 8003706:	460a      	mov	r2, r1
 8003708:	eb42 0303 	adc.w	r3, r2, r3
 800370c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8003710:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003714:	685b      	ldr	r3, [r3, #4]
 8003716:	2200      	movs	r2, #0
 8003718:	67bb      	str	r3, [r7, #120]	; 0x78
 800371a:	67fa      	str	r2, [r7, #124]	; 0x7c
 800371c:	f04f 0200 	mov.w	r2, #0
 8003720:	f04f 0300 	mov.w	r3, #0
 8003724:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8003728:	4649      	mov	r1, r9
 800372a:	008b      	lsls	r3, r1, #2
 800372c:	4641      	mov	r1, r8
 800372e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003732:	4641      	mov	r1, r8
 8003734:	008a      	lsls	r2, r1, #2
 8003736:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800373a:	f7fc fdb9 	bl	80002b0 <__aeabi_uldivmod>
 800373e:	4602      	mov	r2, r0
 8003740:	460b      	mov	r3, r1
 8003742:	4b39      	ldr	r3, [pc, #228]	; (8003828 <UART_SetConfig+0x4e4>)
 8003744:	fba3 1302 	umull	r1, r3, r3, r2
 8003748:	095b      	lsrs	r3, r3, #5
 800374a:	2164      	movs	r1, #100	; 0x64
 800374c:	fb01 f303 	mul.w	r3, r1, r3
 8003750:	1ad3      	subs	r3, r2, r3
 8003752:	011b      	lsls	r3, r3, #4
 8003754:	3332      	adds	r3, #50	; 0x32
 8003756:	4a34      	ldr	r2, [pc, #208]	; (8003828 <UART_SetConfig+0x4e4>)
 8003758:	fba2 2303 	umull	r2, r3, r2, r3
 800375c:	095b      	lsrs	r3, r3, #5
 800375e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003762:	441c      	add	r4, r3
 8003764:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003768:	2200      	movs	r2, #0
 800376a:	673b      	str	r3, [r7, #112]	; 0x70
 800376c:	677a      	str	r2, [r7, #116]	; 0x74
 800376e:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8003772:	4642      	mov	r2, r8
 8003774:	464b      	mov	r3, r9
 8003776:	1891      	adds	r1, r2, r2
 8003778:	60b9      	str	r1, [r7, #8]
 800377a:	415b      	adcs	r3, r3
 800377c:	60fb      	str	r3, [r7, #12]
 800377e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003782:	4641      	mov	r1, r8
 8003784:	1851      	adds	r1, r2, r1
 8003786:	6039      	str	r1, [r7, #0]
 8003788:	4649      	mov	r1, r9
 800378a:	414b      	adcs	r3, r1
 800378c:	607b      	str	r3, [r7, #4]
 800378e:	f04f 0200 	mov.w	r2, #0
 8003792:	f04f 0300 	mov.w	r3, #0
 8003796:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800379a:	4659      	mov	r1, fp
 800379c:	00cb      	lsls	r3, r1, #3
 800379e:	4651      	mov	r1, sl
 80037a0:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80037a4:	4651      	mov	r1, sl
 80037a6:	00ca      	lsls	r2, r1, #3
 80037a8:	4610      	mov	r0, r2
 80037aa:	4619      	mov	r1, r3
 80037ac:	4603      	mov	r3, r0
 80037ae:	4642      	mov	r2, r8
 80037b0:	189b      	adds	r3, r3, r2
 80037b2:	66bb      	str	r3, [r7, #104]	; 0x68
 80037b4:	464b      	mov	r3, r9
 80037b6:	460a      	mov	r2, r1
 80037b8:	eb42 0303 	adc.w	r3, r2, r3
 80037bc:	66fb      	str	r3, [r7, #108]	; 0x6c
 80037be:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80037c2:	685b      	ldr	r3, [r3, #4]
 80037c4:	2200      	movs	r2, #0
 80037c6:	663b      	str	r3, [r7, #96]	; 0x60
 80037c8:	667a      	str	r2, [r7, #100]	; 0x64
 80037ca:	f04f 0200 	mov.w	r2, #0
 80037ce:	f04f 0300 	mov.w	r3, #0
 80037d2:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 80037d6:	4649      	mov	r1, r9
 80037d8:	008b      	lsls	r3, r1, #2
 80037da:	4641      	mov	r1, r8
 80037dc:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80037e0:	4641      	mov	r1, r8
 80037e2:	008a      	lsls	r2, r1, #2
 80037e4:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 80037e8:	f7fc fd62 	bl	80002b0 <__aeabi_uldivmod>
 80037ec:	4602      	mov	r2, r0
 80037ee:	460b      	mov	r3, r1
 80037f0:	4b0d      	ldr	r3, [pc, #52]	; (8003828 <UART_SetConfig+0x4e4>)
 80037f2:	fba3 1302 	umull	r1, r3, r3, r2
 80037f6:	095b      	lsrs	r3, r3, #5
 80037f8:	2164      	movs	r1, #100	; 0x64
 80037fa:	fb01 f303 	mul.w	r3, r1, r3
 80037fe:	1ad3      	subs	r3, r2, r3
 8003800:	011b      	lsls	r3, r3, #4
 8003802:	3332      	adds	r3, #50	; 0x32
 8003804:	4a08      	ldr	r2, [pc, #32]	; (8003828 <UART_SetConfig+0x4e4>)
 8003806:	fba2 2303 	umull	r2, r3, r2, r3
 800380a:	095b      	lsrs	r3, r3, #5
 800380c:	f003 020f 	and.w	r2, r3, #15
 8003810:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	4422      	add	r2, r4
 8003818:	609a      	str	r2, [r3, #8]
}
 800381a:	bf00      	nop
 800381c:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8003820:	46bd      	mov	sp, r7
 8003822:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003826:	bf00      	nop
 8003828:	51eb851f 	.word	0x51eb851f

0800382c <atoi>:
 800382c:	220a      	movs	r2, #10
 800382e:	2100      	movs	r1, #0
 8003830:	f000 b9ea 	b.w	8003c08 <strtol>

08003834 <__errno>:
 8003834:	4b01      	ldr	r3, [pc, #4]	; (800383c <__errno+0x8>)
 8003836:	6818      	ldr	r0, [r3, #0]
 8003838:	4770      	bx	lr
 800383a:	bf00      	nop
 800383c:	20000030 	.word	0x20000030

08003840 <__libc_init_array>:
 8003840:	b570      	push	{r4, r5, r6, lr}
 8003842:	4d0d      	ldr	r5, [pc, #52]	; (8003878 <__libc_init_array+0x38>)
 8003844:	4c0d      	ldr	r4, [pc, #52]	; (800387c <__libc_init_array+0x3c>)
 8003846:	1b64      	subs	r4, r4, r5
 8003848:	10a4      	asrs	r4, r4, #2
 800384a:	2600      	movs	r6, #0
 800384c:	42a6      	cmp	r6, r4
 800384e:	d109      	bne.n	8003864 <__libc_init_array+0x24>
 8003850:	4d0b      	ldr	r5, [pc, #44]	; (8003880 <__libc_init_array+0x40>)
 8003852:	4c0c      	ldr	r4, [pc, #48]	; (8003884 <__libc_init_array+0x44>)
 8003854:	f000 fd32 	bl	80042bc <_init>
 8003858:	1b64      	subs	r4, r4, r5
 800385a:	10a4      	asrs	r4, r4, #2
 800385c:	2600      	movs	r6, #0
 800385e:	42a6      	cmp	r6, r4
 8003860:	d105      	bne.n	800386e <__libc_init_array+0x2e>
 8003862:	bd70      	pop	{r4, r5, r6, pc}
 8003864:	f855 3b04 	ldr.w	r3, [r5], #4
 8003868:	4798      	blx	r3
 800386a:	3601      	adds	r6, #1
 800386c:	e7ee      	b.n	800384c <__libc_init_array+0xc>
 800386e:	f855 3b04 	ldr.w	r3, [r5], #4
 8003872:	4798      	blx	r3
 8003874:	3601      	adds	r6, #1
 8003876:	e7f2      	b.n	800385e <__libc_init_array+0x1e>
 8003878:	080044b4 	.word	0x080044b4
 800387c:	080044b4 	.word	0x080044b4
 8003880:	080044b4 	.word	0x080044b4
 8003884:	080044b8 	.word	0x080044b8

08003888 <malloc>:
 8003888:	4b02      	ldr	r3, [pc, #8]	; (8003894 <malloc+0xc>)
 800388a:	4601      	mov	r1, r0
 800388c:	6818      	ldr	r0, [r3, #0]
 800388e:	f000 b885 	b.w	800399c <_malloc_r>
 8003892:	bf00      	nop
 8003894:	20000030 	.word	0x20000030

08003898 <memcpy>:
 8003898:	440a      	add	r2, r1
 800389a:	4291      	cmp	r1, r2
 800389c:	f100 33ff 	add.w	r3, r0, #4294967295
 80038a0:	d100      	bne.n	80038a4 <memcpy+0xc>
 80038a2:	4770      	bx	lr
 80038a4:	b510      	push	{r4, lr}
 80038a6:	f811 4b01 	ldrb.w	r4, [r1], #1
 80038aa:	f803 4f01 	strb.w	r4, [r3, #1]!
 80038ae:	4291      	cmp	r1, r2
 80038b0:	d1f9      	bne.n	80038a6 <memcpy+0xe>
 80038b2:	bd10      	pop	{r4, pc}

080038b4 <memset>:
 80038b4:	4402      	add	r2, r0
 80038b6:	4603      	mov	r3, r0
 80038b8:	4293      	cmp	r3, r2
 80038ba:	d100      	bne.n	80038be <memset+0xa>
 80038bc:	4770      	bx	lr
 80038be:	f803 1b01 	strb.w	r1, [r3], #1
 80038c2:	e7f9      	b.n	80038b8 <memset+0x4>

080038c4 <_free_r>:
 80038c4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80038c6:	2900      	cmp	r1, #0
 80038c8:	d044      	beq.n	8003954 <_free_r+0x90>
 80038ca:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80038ce:	9001      	str	r0, [sp, #4]
 80038d0:	2b00      	cmp	r3, #0
 80038d2:	f1a1 0404 	sub.w	r4, r1, #4
 80038d6:	bfb8      	it	lt
 80038d8:	18e4      	addlt	r4, r4, r3
 80038da:	f000 f99f 	bl	8003c1c <__malloc_lock>
 80038de:	4a1e      	ldr	r2, [pc, #120]	; (8003958 <_free_r+0x94>)
 80038e0:	9801      	ldr	r0, [sp, #4]
 80038e2:	6813      	ldr	r3, [r2, #0]
 80038e4:	b933      	cbnz	r3, 80038f4 <_free_r+0x30>
 80038e6:	6063      	str	r3, [r4, #4]
 80038e8:	6014      	str	r4, [r2, #0]
 80038ea:	b003      	add	sp, #12
 80038ec:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80038f0:	f000 b99a 	b.w	8003c28 <__malloc_unlock>
 80038f4:	42a3      	cmp	r3, r4
 80038f6:	d908      	bls.n	800390a <_free_r+0x46>
 80038f8:	6825      	ldr	r5, [r4, #0]
 80038fa:	1961      	adds	r1, r4, r5
 80038fc:	428b      	cmp	r3, r1
 80038fe:	bf01      	itttt	eq
 8003900:	6819      	ldreq	r1, [r3, #0]
 8003902:	685b      	ldreq	r3, [r3, #4]
 8003904:	1949      	addeq	r1, r1, r5
 8003906:	6021      	streq	r1, [r4, #0]
 8003908:	e7ed      	b.n	80038e6 <_free_r+0x22>
 800390a:	461a      	mov	r2, r3
 800390c:	685b      	ldr	r3, [r3, #4]
 800390e:	b10b      	cbz	r3, 8003914 <_free_r+0x50>
 8003910:	42a3      	cmp	r3, r4
 8003912:	d9fa      	bls.n	800390a <_free_r+0x46>
 8003914:	6811      	ldr	r1, [r2, #0]
 8003916:	1855      	adds	r5, r2, r1
 8003918:	42a5      	cmp	r5, r4
 800391a:	d10b      	bne.n	8003934 <_free_r+0x70>
 800391c:	6824      	ldr	r4, [r4, #0]
 800391e:	4421      	add	r1, r4
 8003920:	1854      	adds	r4, r2, r1
 8003922:	42a3      	cmp	r3, r4
 8003924:	6011      	str	r1, [r2, #0]
 8003926:	d1e0      	bne.n	80038ea <_free_r+0x26>
 8003928:	681c      	ldr	r4, [r3, #0]
 800392a:	685b      	ldr	r3, [r3, #4]
 800392c:	6053      	str	r3, [r2, #4]
 800392e:	4421      	add	r1, r4
 8003930:	6011      	str	r1, [r2, #0]
 8003932:	e7da      	b.n	80038ea <_free_r+0x26>
 8003934:	d902      	bls.n	800393c <_free_r+0x78>
 8003936:	230c      	movs	r3, #12
 8003938:	6003      	str	r3, [r0, #0]
 800393a:	e7d6      	b.n	80038ea <_free_r+0x26>
 800393c:	6825      	ldr	r5, [r4, #0]
 800393e:	1961      	adds	r1, r4, r5
 8003940:	428b      	cmp	r3, r1
 8003942:	bf04      	itt	eq
 8003944:	6819      	ldreq	r1, [r3, #0]
 8003946:	685b      	ldreq	r3, [r3, #4]
 8003948:	6063      	str	r3, [r4, #4]
 800394a:	bf04      	itt	eq
 800394c:	1949      	addeq	r1, r1, r5
 800394e:	6021      	streq	r1, [r4, #0]
 8003950:	6054      	str	r4, [r2, #4]
 8003952:	e7ca      	b.n	80038ea <_free_r+0x26>
 8003954:	b003      	add	sp, #12
 8003956:	bd30      	pop	{r4, r5, pc}
 8003958:	20000438 	.word	0x20000438

0800395c <sbrk_aligned>:
 800395c:	b570      	push	{r4, r5, r6, lr}
 800395e:	4e0e      	ldr	r6, [pc, #56]	; (8003998 <sbrk_aligned+0x3c>)
 8003960:	460c      	mov	r4, r1
 8003962:	6831      	ldr	r1, [r6, #0]
 8003964:	4605      	mov	r5, r0
 8003966:	b911      	cbnz	r1, 800396e <sbrk_aligned+0x12>
 8003968:	f000 f88c 	bl	8003a84 <_sbrk_r>
 800396c:	6030      	str	r0, [r6, #0]
 800396e:	4621      	mov	r1, r4
 8003970:	4628      	mov	r0, r5
 8003972:	f000 f887 	bl	8003a84 <_sbrk_r>
 8003976:	1c43      	adds	r3, r0, #1
 8003978:	d00a      	beq.n	8003990 <sbrk_aligned+0x34>
 800397a:	1cc4      	adds	r4, r0, #3
 800397c:	f024 0403 	bic.w	r4, r4, #3
 8003980:	42a0      	cmp	r0, r4
 8003982:	d007      	beq.n	8003994 <sbrk_aligned+0x38>
 8003984:	1a21      	subs	r1, r4, r0
 8003986:	4628      	mov	r0, r5
 8003988:	f000 f87c 	bl	8003a84 <_sbrk_r>
 800398c:	3001      	adds	r0, #1
 800398e:	d101      	bne.n	8003994 <sbrk_aligned+0x38>
 8003990:	f04f 34ff 	mov.w	r4, #4294967295
 8003994:	4620      	mov	r0, r4
 8003996:	bd70      	pop	{r4, r5, r6, pc}
 8003998:	2000043c 	.word	0x2000043c

0800399c <_malloc_r>:
 800399c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80039a0:	1ccd      	adds	r5, r1, #3
 80039a2:	f025 0503 	bic.w	r5, r5, #3
 80039a6:	3508      	adds	r5, #8
 80039a8:	2d0c      	cmp	r5, #12
 80039aa:	bf38      	it	cc
 80039ac:	250c      	movcc	r5, #12
 80039ae:	2d00      	cmp	r5, #0
 80039b0:	4607      	mov	r7, r0
 80039b2:	db01      	blt.n	80039b8 <_malloc_r+0x1c>
 80039b4:	42a9      	cmp	r1, r5
 80039b6:	d905      	bls.n	80039c4 <_malloc_r+0x28>
 80039b8:	230c      	movs	r3, #12
 80039ba:	603b      	str	r3, [r7, #0]
 80039bc:	2600      	movs	r6, #0
 80039be:	4630      	mov	r0, r6
 80039c0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80039c4:	4e2e      	ldr	r6, [pc, #184]	; (8003a80 <_malloc_r+0xe4>)
 80039c6:	f000 f929 	bl	8003c1c <__malloc_lock>
 80039ca:	6833      	ldr	r3, [r6, #0]
 80039cc:	461c      	mov	r4, r3
 80039ce:	bb34      	cbnz	r4, 8003a1e <_malloc_r+0x82>
 80039d0:	4629      	mov	r1, r5
 80039d2:	4638      	mov	r0, r7
 80039d4:	f7ff ffc2 	bl	800395c <sbrk_aligned>
 80039d8:	1c43      	adds	r3, r0, #1
 80039da:	4604      	mov	r4, r0
 80039dc:	d14d      	bne.n	8003a7a <_malloc_r+0xde>
 80039de:	6834      	ldr	r4, [r6, #0]
 80039e0:	4626      	mov	r6, r4
 80039e2:	2e00      	cmp	r6, #0
 80039e4:	d140      	bne.n	8003a68 <_malloc_r+0xcc>
 80039e6:	6823      	ldr	r3, [r4, #0]
 80039e8:	4631      	mov	r1, r6
 80039ea:	4638      	mov	r0, r7
 80039ec:	eb04 0803 	add.w	r8, r4, r3
 80039f0:	f000 f848 	bl	8003a84 <_sbrk_r>
 80039f4:	4580      	cmp	r8, r0
 80039f6:	d13a      	bne.n	8003a6e <_malloc_r+0xd2>
 80039f8:	6821      	ldr	r1, [r4, #0]
 80039fa:	3503      	adds	r5, #3
 80039fc:	1a6d      	subs	r5, r5, r1
 80039fe:	f025 0503 	bic.w	r5, r5, #3
 8003a02:	3508      	adds	r5, #8
 8003a04:	2d0c      	cmp	r5, #12
 8003a06:	bf38      	it	cc
 8003a08:	250c      	movcc	r5, #12
 8003a0a:	4629      	mov	r1, r5
 8003a0c:	4638      	mov	r0, r7
 8003a0e:	f7ff ffa5 	bl	800395c <sbrk_aligned>
 8003a12:	3001      	adds	r0, #1
 8003a14:	d02b      	beq.n	8003a6e <_malloc_r+0xd2>
 8003a16:	6823      	ldr	r3, [r4, #0]
 8003a18:	442b      	add	r3, r5
 8003a1a:	6023      	str	r3, [r4, #0]
 8003a1c:	e00e      	b.n	8003a3c <_malloc_r+0xa0>
 8003a1e:	6822      	ldr	r2, [r4, #0]
 8003a20:	1b52      	subs	r2, r2, r5
 8003a22:	d41e      	bmi.n	8003a62 <_malloc_r+0xc6>
 8003a24:	2a0b      	cmp	r2, #11
 8003a26:	d916      	bls.n	8003a56 <_malloc_r+0xba>
 8003a28:	1961      	adds	r1, r4, r5
 8003a2a:	42a3      	cmp	r3, r4
 8003a2c:	6025      	str	r5, [r4, #0]
 8003a2e:	bf18      	it	ne
 8003a30:	6059      	strne	r1, [r3, #4]
 8003a32:	6863      	ldr	r3, [r4, #4]
 8003a34:	bf08      	it	eq
 8003a36:	6031      	streq	r1, [r6, #0]
 8003a38:	5162      	str	r2, [r4, r5]
 8003a3a:	604b      	str	r3, [r1, #4]
 8003a3c:	4638      	mov	r0, r7
 8003a3e:	f104 060b 	add.w	r6, r4, #11
 8003a42:	f000 f8f1 	bl	8003c28 <__malloc_unlock>
 8003a46:	f026 0607 	bic.w	r6, r6, #7
 8003a4a:	1d23      	adds	r3, r4, #4
 8003a4c:	1af2      	subs	r2, r6, r3
 8003a4e:	d0b6      	beq.n	80039be <_malloc_r+0x22>
 8003a50:	1b9b      	subs	r3, r3, r6
 8003a52:	50a3      	str	r3, [r4, r2]
 8003a54:	e7b3      	b.n	80039be <_malloc_r+0x22>
 8003a56:	6862      	ldr	r2, [r4, #4]
 8003a58:	42a3      	cmp	r3, r4
 8003a5a:	bf0c      	ite	eq
 8003a5c:	6032      	streq	r2, [r6, #0]
 8003a5e:	605a      	strne	r2, [r3, #4]
 8003a60:	e7ec      	b.n	8003a3c <_malloc_r+0xa0>
 8003a62:	4623      	mov	r3, r4
 8003a64:	6864      	ldr	r4, [r4, #4]
 8003a66:	e7b2      	b.n	80039ce <_malloc_r+0x32>
 8003a68:	4634      	mov	r4, r6
 8003a6a:	6876      	ldr	r6, [r6, #4]
 8003a6c:	e7b9      	b.n	80039e2 <_malloc_r+0x46>
 8003a6e:	230c      	movs	r3, #12
 8003a70:	603b      	str	r3, [r7, #0]
 8003a72:	4638      	mov	r0, r7
 8003a74:	f000 f8d8 	bl	8003c28 <__malloc_unlock>
 8003a78:	e7a1      	b.n	80039be <_malloc_r+0x22>
 8003a7a:	6025      	str	r5, [r4, #0]
 8003a7c:	e7de      	b.n	8003a3c <_malloc_r+0xa0>
 8003a7e:	bf00      	nop
 8003a80:	20000438 	.word	0x20000438

08003a84 <_sbrk_r>:
 8003a84:	b538      	push	{r3, r4, r5, lr}
 8003a86:	4d06      	ldr	r5, [pc, #24]	; (8003aa0 <_sbrk_r+0x1c>)
 8003a88:	2300      	movs	r3, #0
 8003a8a:	4604      	mov	r4, r0
 8003a8c:	4608      	mov	r0, r1
 8003a8e:	602b      	str	r3, [r5, #0]
 8003a90:	f7fd f8dc 	bl	8000c4c <_sbrk>
 8003a94:	1c43      	adds	r3, r0, #1
 8003a96:	d102      	bne.n	8003a9e <_sbrk_r+0x1a>
 8003a98:	682b      	ldr	r3, [r5, #0]
 8003a9a:	b103      	cbz	r3, 8003a9e <_sbrk_r+0x1a>
 8003a9c:	6023      	str	r3, [r4, #0]
 8003a9e:	bd38      	pop	{r3, r4, r5, pc}
 8003aa0:	20000440 	.word	0x20000440

08003aa4 <siprintf>:
 8003aa4:	b40e      	push	{r1, r2, r3}
 8003aa6:	b500      	push	{lr}
 8003aa8:	b09c      	sub	sp, #112	; 0x70
 8003aaa:	ab1d      	add	r3, sp, #116	; 0x74
 8003aac:	9002      	str	r0, [sp, #8]
 8003aae:	9006      	str	r0, [sp, #24]
 8003ab0:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8003ab4:	4809      	ldr	r0, [pc, #36]	; (8003adc <siprintf+0x38>)
 8003ab6:	9107      	str	r1, [sp, #28]
 8003ab8:	9104      	str	r1, [sp, #16]
 8003aba:	4909      	ldr	r1, [pc, #36]	; (8003ae0 <siprintf+0x3c>)
 8003abc:	f853 2b04 	ldr.w	r2, [r3], #4
 8003ac0:	9105      	str	r1, [sp, #20]
 8003ac2:	6800      	ldr	r0, [r0, #0]
 8003ac4:	9301      	str	r3, [sp, #4]
 8003ac6:	a902      	add	r1, sp, #8
 8003ac8:	f000 f910 	bl	8003cec <_svfiprintf_r>
 8003acc:	9b02      	ldr	r3, [sp, #8]
 8003ace:	2200      	movs	r2, #0
 8003ad0:	701a      	strb	r2, [r3, #0]
 8003ad2:	b01c      	add	sp, #112	; 0x70
 8003ad4:	f85d eb04 	ldr.w	lr, [sp], #4
 8003ad8:	b003      	add	sp, #12
 8003ada:	4770      	bx	lr
 8003adc:	20000030 	.word	0x20000030
 8003ae0:	ffff0208 	.word	0xffff0208

08003ae4 <strcat>:
 8003ae4:	b510      	push	{r4, lr}
 8003ae6:	4602      	mov	r2, r0
 8003ae8:	7814      	ldrb	r4, [r2, #0]
 8003aea:	4613      	mov	r3, r2
 8003aec:	3201      	adds	r2, #1
 8003aee:	2c00      	cmp	r4, #0
 8003af0:	d1fa      	bne.n	8003ae8 <strcat+0x4>
 8003af2:	3b01      	subs	r3, #1
 8003af4:	f811 2b01 	ldrb.w	r2, [r1], #1
 8003af8:	f803 2f01 	strb.w	r2, [r3, #1]!
 8003afc:	2a00      	cmp	r2, #0
 8003afe:	d1f9      	bne.n	8003af4 <strcat+0x10>
 8003b00:	bd10      	pop	{r4, pc}
	...

08003b04 <_strtol_l.constprop.0>:
 8003b04:	2b01      	cmp	r3, #1
 8003b06:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003b0a:	d001      	beq.n	8003b10 <_strtol_l.constprop.0+0xc>
 8003b0c:	2b24      	cmp	r3, #36	; 0x24
 8003b0e:	d906      	bls.n	8003b1e <_strtol_l.constprop.0+0x1a>
 8003b10:	f7ff fe90 	bl	8003834 <__errno>
 8003b14:	2316      	movs	r3, #22
 8003b16:	6003      	str	r3, [r0, #0]
 8003b18:	2000      	movs	r0, #0
 8003b1a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003b1e:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 8003c04 <_strtol_l.constprop.0+0x100>
 8003b22:	460d      	mov	r5, r1
 8003b24:	462e      	mov	r6, r5
 8003b26:	f815 4b01 	ldrb.w	r4, [r5], #1
 8003b2a:	f814 700c 	ldrb.w	r7, [r4, ip]
 8003b2e:	f017 0708 	ands.w	r7, r7, #8
 8003b32:	d1f7      	bne.n	8003b24 <_strtol_l.constprop.0+0x20>
 8003b34:	2c2d      	cmp	r4, #45	; 0x2d
 8003b36:	d132      	bne.n	8003b9e <_strtol_l.constprop.0+0x9a>
 8003b38:	782c      	ldrb	r4, [r5, #0]
 8003b3a:	2701      	movs	r7, #1
 8003b3c:	1cb5      	adds	r5, r6, #2
 8003b3e:	2b00      	cmp	r3, #0
 8003b40:	d05b      	beq.n	8003bfa <_strtol_l.constprop.0+0xf6>
 8003b42:	2b10      	cmp	r3, #16
 8003b44:	d109      	bne.n	8003b5a <_strtol_l.constprop.0+0x56>
 8003b46:	2c30      	cmp	r4, #48	; 0x30
 8003b48:	d107      	bne.n	8003b5a <_strtol_l.constprop.0+0x56>
 8003b4a:	782c      	ldrb	r4, [r5, #0]
 8003b4c:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 8003b50:	2c58      	cmp	r4, #88	; 0x58
 8003b52:	d14d      	bne.n	8003bf0 <_strtol_l.constprop.0+0xec>
 8003b54:	786c      	ldrb	r4, [r5, #1]
 8003b56:	2310      	movs	r3, #16
 8003b58:	3502      	adds	r5, #2
 8003b5a:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 8003b5e:	f108 38ff 	add.w	r8, r8, #4294967295
 8003b62:	f04f 0c00 	mov.w	ip, #0
 8003b66:	fbb8 f9f3 	udiv	r9, r8, r3
 8003b6a:	4666      	mov	r6, ip
 8003b6c:	fb03 8a19 	mls	sl, r3, r9, r8
 8003b70:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 8003b74:	f1be 0f09 	cmp.w	lr, #9
 8003b78:	d816      	bhi.n	8003ba8 <_strtol_l.constprop.0+0xa4>
 8003b7a:	4674      	mov	r4, lr
 8003b7c:	42a3      	cmp	r3, r4
 8003b7e:	dd24      	ble.n	8003bca <_strtol_l.constprop.0+0xc6>
 8003b80:	f1bc 0f00 	cmp.w	ip, #0
 8003b84:	db1e      	blt.n	8003bc4 <_strtol_l.constprop.0+0xc0>
 8003b86:	45b1      	cmp	r9, r6
 8003b88:	d31c      	bcc.n	8003bc4 <_strtol_l.constprop.0+0xc0>
 8003b8a:	d101      	bne.n	8003b90 <_strtol_l.constprop.0+0x8c>
 8003b8c:	45a2      	cmp	sl, r4
 8003b8e:	db19      	blt.n	8003bc4 <_strtol_l.constprop.0+0xc0>
 8003b90:	fb06 4603 	mla	r6, r6, r3, r4
 8003b94:	f04f 0c01 	mov.w	ip, #1
 8003b98:	f815 4b01 	ldrb.w	r4, [r5], #1
 8003b9c:	e7e8      	b.n	8003b70 <_strtol_l.constprop.0+0x6c>
 8003b9e:	2c2b      	cmp	r4, #43	; 0x2b
 8003ba0:	bf04      	itt	eq
 8003ba2:	782c      	ldrbeq	r4, [r5, #0]
 8003ba4:	1cb5      	addeq	r5, r6, #2
 8003ba6:	e7ca      	b.n	8003b3e <_strtol_l.constprop.0+0x3a>
 8003ba8:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 8003bac:	f1be 0f19 	cmp.w	lr, #25
 8003bb0:	d801      	bhi.n	8003bb6 <_strtol_l.constprop.0+0xb2>
 8003bb2:	3c37      	subs	r4, #55	; 0x37
 8003bb4:	e7e2      	b.n	8003b7c <_strtol_l.constprop.0+0x78>
 8003bb6:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 8003bba:	f1be 0f19 	cmp.w	lr, #25
 8003bbe:	d804      	bhi.n	8003bca <_strtol_l.constprop.0+0xc6>
 8003bc0:	3c57      	subs	r4, #87	; 0x57
 8003bc2:	e7db      	b.n	8003b7c <_strtol_l.constprop.0+0x78>
 8003bc4:	f04f 3cff 	mov.w	ip, #4294967295
 8003bc8:	e7e6      	b.n	8003b98 <_strtol_l.constprop.0+0x94>
 8003bca:	f1bc 0f00 	cmp.w	ip, #0
 8003bce:	da05      	bge.n	8003bdc <_strtol_l.constprop.0+0xd8>
 8003bd0:	2322      	movs	r3, #34	; 0x22
 8003bd2:	6003      	str	r3, [r0, #0]
 8003bd4:	4646      	mov	r6, r8
 8003bd6:	b942      	cbnz	r2, 8003bea <_strtol_l.constprop.0+0xe6>
 8003bd8:	4630      	mov	r0, r6
 8003bda:	e79e      	b.n	8003b1a <_strtol_l.constprop.0+0x16>
 8003bdc:	b107      	cbz	r7, 8003be0 <_strtol_l.constprop.0+0xdc>
 8003bde:	4276      	negs	r6, r6
 8003be0:	2a00      	cmp	r2, #0
 8003be2:	d0f9      	beq.n	8003bd8 <_strtol_l.constprop.0+0xd4>
 8003be4:	f1bc 0f00 	cmp.w	ip, #0
 8003be8:	d000      	beq.n	8003bec <_strtol_l.constprop.0+0xe8>
 8003bea:	1e69      	subs	r1, r5, #1
 8003bec:	6011      	str	r1, [r2, #0]
 8003bee:	e7f3      	b.n	8003bd8 <_strtol_l.constprop.0+0xd4>
 8003bf0:	2430      	movs	r4, #48	; 0x30
 8003bf2:	2b00      	cmp	r3, #0
 8003bf4:	d1b1      	bne.n	8003b5a <_strtol_l.constprop.0+0x56>
 8003bf6:	2308      	movs	r3, #8
 8003bf8:	e7af      	b.n	8003b5a <_strtol_l.constprop.0+0x56>
 8003bfa:	2c30      	cmp	r4, #48	; 0x30
 8003bfc:	d0a5      	beq.n	8003b4a <_strtol_l.constprop.0+0x46>
 8003bfe:	230a      	movs	r3, #10
 8003c00:	e7ab      	b.n	8003b5a <_strtol_l.constprop.0+0x56>
 8003c02:	bf00      	nop
 8003c04:	08004379 	.word	0x08004379

08003c08 <strtol>:
 8003c08:	4613      	mov	r3, r2
 8003c0a:	460a      	mov	r2, r1
 8003c0c:	4601      	mov	r1, r0
 8003c0e:	4802      	ldr	r0, [pc, #8]	; (8003c18 <strtol+0x10>)
 8003c10:	6800      	ldr	r0, [r0, #0]
 8003c12:	f7ff bf77 	b.w	8003b04 <_strtol_l.constprop.0>
 8003c16:	bf00      	nop
 8003c18:	20000030 	.word	0x20000030

08003c1c <__malloc_lock>:
 8003c1c:	4801      	ldr	r0, [pc, #4]	; (8003c24 <__malloc_lock+0x8>)
 8003c1e:	f000 baf9 	b.w	8004214 <__retarget_lock_acquire_recursive>
 8003c22:	bf00      	nop
 8003c24:	20000444 	.word	0x20000444

08003c28 <__malloc_unlock>:
 8003c28:	4801      	ldr	r0, [pc, #4]	; (8003c30 <__malloc_unlock+0x8>)
 8003c2a:	f000 baf4 	b.w	8004216 <__retarget_lock_release_recursive>
 8003c2e:	bf00      	nop
 8003c30:	20000444 	.word	0x20000444

08003c34 <__ssputs_r>:
 8003c34:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003c38:	688e      	ldr	r6, [r1, #8]
 8003c3a:	429e      	cmp	r6, r3
 8003c3c:	4682      	mov	sl, r0
 8003c3e:	460c      	mov	r4, r1
 8003c40:	4690      	mov	r8, r2
 8003c42:	461f      	mov	r7, r3
 8003c44:	d838      	bhi.n	8003cb8 <__ssputs_r+0x84>
 8003c46:	898a      	ldrh	r2, [r1, #12]
 8003c48:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8003c4c:	d032      	beq.n	8003cb4 <__ssputs_r+0x80>
 8003c4e:	6825      	ldr	r5, [r4, #0]
 8003c50:	6909      	ldr	r1, [r1, #16]
 8003c52:	eba5 0901 	sub.w	r9, r5, r1
 8003c56:	6965      	ldr	r5, [r4, #20]
 8003c58:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8003c5c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8003c60:	3301      	adds	r3, #1
 8003c62:	444b      	add	r3, r9
 8003c64:	106d      	asrs	r5, r5, #1
 8003c66:	429d      	cmp	r5, r3
 8003c68:	bf38      	it	cc
 8003c6a:	461d      	movcc	r5, r3
 8003c6c:	0553      	lsls	r3, r2, #21
 8003c6e:	d531      	bpl.n	8003cd4 <__ssputs_r+0xa0>
 8003c70:	4629      	mov	r1, r5
 8003c72:	f7ff fe93 	bl	800399c <_malloc_r>
 8003c76:	4606      	mov	r6, r0
 8003c78:	b950      	cbnz	r0, 8003c90 <__ssputs_r+0x5c>
 8003c7a:	230c      	movs	r3, #12
 8003c7c:	f8ca 3000 	str.w	r3, [sl]
 8003c80:	89a3      	ldrh	r3, [r4, #12]
 8003c82:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003c86:	81a3      	strh	r3, [r4, #12]
 8003c88:	f04f 30ff 	mov.w	r0, #4294967295
 8003c8c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003c90:	6921      	ldr	r1, [r4, #16]
 8003c92:	464a      	mov	r2, r9
 8003c94:	f7ff fe00 	bl	8003898 <memcpy>
 8003c98:	89a3      	ldrh	r3, [r4, #12]
 8003c9a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8003c9e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003ca2:	81a3      	strh	r3, [r4, #12]
 8003ca4:	6126      	str	r6, [r4, #16]
 8003ca6:	6165      	str	r5, [r4, #20]
 8003ca8:	444e      	add	r6, r9
 8003caa:	eba5 0509 	sub.w	r5, r5, r9
 8003cae:	6026      	str	r6, [r4, #0]
 8003cb0:	60a5      	str	r5, [r4, #8]
 8003cb2:	463e      	mov	r6, r7
 8003cb4:	42be      	cmp	r6, r7
 8003cb6:	d900      	bls.n	8003cba <__ssputs_r+0x86>
 8003cb8:	463e      	mov	r6, r7
 8003cba:	6820      	ldr	r0, [r4, #0]
 8003cbc:	4632      	mov	r2, r6
 8003cbe:	4641      	mov	r1, r8
 8003cc0:	f000 faaa 	bl	8004218 <memmove>
 8003cc4:	68a3      	ldr	r3, [r4, #8]
 8003cc6:	1b9b      	subs	r3, r3, r6
 8003cc8:	60a3      	str	r3, [r4, #8]
 8003cca:	6823      	ldr	r3, [r4, #0]
 8003ccc:	4433      	add	r3, r6
 8003cce:	6023      	str	r3, [r4, #0]
 8003cd0:	2000      	movs	r0, #0
 8003cd2:	e7db      	b.n	8003c8c <__ssputs_r+0x58>
 8003cd4:	462a      	mov	r2, r5
 8003cd6:	f000 fab9 	bl	800424c <_realloc_r>
 8003cda:	4606      	mov	r6, r0
 8003cdc:	2800      	cmp	r0, #0
 8003cde:	d1e1      	bne.n	8003ca4 <__ssputs_r+0x70>
 8003ce0:	6921      	ldr	r1, [r4, #16]
 8003ce2:	4650      	mov	r0, sl
 8003ce4:	f7ff fdee 	bl	80038c4 <_free_r>
 8003ce8:	e7c7      	b.n	8003c7a <__ssputs_r+0x46>
	...

08003cec <_svfiprintf_r>:
 8003cec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003cf0:	4698      	mov	r8, r3
 8003cf2:	898b      	ldrh	r3, [r1, #12]
 8003cf4:	061b      	lsls	r3, r3, #24
 8003cf6:	b09d      	sub	sp, #116	; 0x74
 8003cf8:	4607      	mov	r7, r0
 8003cfa:	460d      	mov	r5, r1
 8003cfc:	4614      	mov	r4, r2
 8003cfe:	d50e      	bpl.n	8003d1e <_svfiprintf_r+0x32>
 8003d00:	690b      	ldr	r3, [r1, #16]
 8003d02:	b963      	cbnz	r3, 8003d1e <_svfiprintf_r+0x32>
 8003d04:	2140      	movs	r1, #64	; 0x40
 8003d06:	f7ff fe49 	bl	800399c <_malloc_r>
 8003d0a:	6028      	str	r0, [r5, #0]
 8003d0c:	6128      	str	r0, [r5, #16]
 8003d0e:	b920      	cbnz	r0, 8003d1a <_svfiprintf_r+0x2e>
 8003d10:	230c      	movs	r3, #12
 8003d12:	603b      	str	r3, [r7, #0]
 8003d14:	f04f 30ff 	mov.w	r0, #4294967295
 8003d18:	e0d1      	b.n	8003ebe <_svfiprintf_r+0x1d2>
 8003d1a:	2340      	movs	r3, #64	; 0x40
 8003d1c:	616b      	str	r3, [r5, #20]
 8003d1e:	2300      	movs	r3, #0
 8003d20:	9309      	str	r3, [sp, #36]	; 0x24
 8003d22:	2320      	movs	r3, #32
 8003d24:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8003d28:	f8cd 800c 	str.w	r8, [sp, #12]
 8003d2c:	2330      	movs	r3, #48	; 0x30
 8003d2e:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8003ed8 <_svfiprintf_r+0x1ec>
 8003d32:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8003d36:	f04f 0901 	mov.w	r9, #1
 8003d3a:	4623      	mov	r3, r4
 8003d3c:	469a      	mov	sl, r3
 8003d3e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8003d42:	b10a      	cbz	r2, 8003d48 <_svfiprintf_r+0x5c>
 8003d44:	2a25      	cmp	r2, #37	; 0x25
 8003d46:	d1f9      	bne.n	8003d3c <_svfiprintf_r+0x50>
 8003d48:	ebba 0b04 	subs.w	fp, sl, r4
 8003d4c:	d00b      	beq.n	8003d66 <_svfiprintf_r+0x7a>
 8003d4e:	465b      	mov	r3, fp
 8003d50:	4622      	mov	r2, r4
 8003d52:	4629      	mov	r1, r5
 8003d54:	4638      	mov	r0, r7
 8003d56:	f7ff ff6d 	bl	8003c34 <__ssputs_r>
 8003d5a:	3001      	adds	r0, #1
 8003d5c:	f000 80aa 	beq.w	8003eb4 <_svfiprintf_r+0x1c8>
 8003d60:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8003d62:	445a      	add	r2, fp
 8003d64:	9209      	str	r2, [sp, #36]	; 0x24
 8003d66:	f89a 3000 	ldrb.w	r3, [sl]
 8003d6a:	2b00      	cmp	r3, #0
 8003d6c:	f000 80a2 	beq.w	8003eb4 <_svfiprintf_r+0x1c8>
 8003d70:	2300      	movs	r3, #0
 8003d72:	f04f 32ff 	mov.w	r2, #4294967295
 8003d76:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8003d7a:	f10a 0a01 	add.w	sl, sl, #1
 8003d7e:	9304      	str	r3, [sp, #16]
 8003d80:	9307      	str	r3, [sp, #28]
 8003d82:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8003d86:	931a      	str	r3, [sp, #104]	; 0x68
 8003d88:	4654      	mov	r4, sl
 8003d8a:	2205      	movs	r2, #5
 8003d8c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003d90:	4851      	ldr	r0, [pc, #324]	; (8003ed8 <_svfiprintf_r+0x1ec>)
 8003d92:	f7fc fa3d 	bl	8000210 <memchr>
 8003d96:	9a04      	ldr	r2, [sp, #16]
 8003d98:	b9d8      	cbnz	r0, 8003dd2 <_svfiprintf_r+0xe6>
 8003d9a:	06d0      	lsls	r0, r2, #27
 8003d9c:	bf44      	itt	mi
 8003d9e:	2320      	movmi	r3, #32
 8003da0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003da4:	0711      	lsls	r1, r2, #28
 8003da6:	bf44      	itt	mi
 8003da8:	232b      	movmi	r3, #43	; 0x2b
 8003daa:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003dae:	f89a 3000 	ldrb.w	r3, [sl]
 8003db2:	2b2a      	cmp	r3, #42	; 0x2a
 8003db4:	d015      	beq.n	8003de2 <_svfiprintf_r+0xf6>
 8003db6:	9a07      	ldr	r2, [sp, #28]
 8003db8:	4654      	mov	r4, sl
 8003dba:	2000      	movs	r0, #0
 8003dbc:	f04f 0c0a 	mov.w	ip, #10
 8003dc0:	4621      	mov	r1, r4
 8003dc2:	f811 3b01 	ldrb.w	r3, [r1], #1
 8003dc6:	3b30      	subs	r3, #48	; 0x30
 8003dc8:	2b09      	cmp	r3, #9
 8003dca:	d94e      	bls.n	8003e6a <_svfiprintf_r+0x17e>
 8003dcc:	b1b0      	cbz	r0, 8003dfc <_svfiprintf_r+0x110>
 8003dce:	9207      	str	r2, [sp, #28]
 8003dd0:	e014      	b.n	8003dfc <_svfiprintf_r+0x110>
 8003dd2:	eba0 0308 	sub.w	r3, r0, r8
 8003dd6:	fa09 f303 	lsl.w	r3, r9, r3
 8003dda:	4313      	orrs	r3, r2
 8003ddc:	9304      	str	r3, [sp, #16]
 8003dde:	46a2      	mov	sl, r4
 8003de0:	e7d2      	b.n	8003d88 <_svfiprintf_r+0x9c>
 8003de2:	9b03      	ldr	r3, [sp, #12]
 8003de4:	1d19      	adds	r1, r3, #4
 8003de6:	681b      	ldr	r3, [r3, #0]
 8003de8:	9103      	str	r1, [sp, #12]
 8003dea:	2b00      	cmp	r3, #0
 8003dec:	bfbb      	ittet	lt
 8003dee:	425b      	neglt	r3, r3
 8003df0:	f042 0202 	orrlt.w	r2, r2, #2
 8003df4:	9307      	strge	r3, [sp, #28]
 8003df6:	9307      	strlt	r3, [sp, #28]
 8003df8:	bfb8      	it	lt
 8003dfa:	9204      	strlt	r2, [sp, #16]
 8003dfc:	7823      	ldrb	r3, [r4, #0]
 8003dfe:	2b2e      	cmp	r3, #46	; 0x2e
 8003e00:	d10c      	bne.n	8003e1c <_svfiprintf_r+0x130>
 8003e02:	7863      	ldrb	r3, [r4, #1]
 8003e04:	2b2a      	cmp	r3, #42	; 0x2a
 8003e06:	d135      	bne.n	8003e74 <_svfiprintf_r+0x188>
 8003e08:	9b03      	ldr	r3, [sp, #12]
 8003e0a:	1d1a      	adds	r2, r3, #4
 8003e0c:	681b      	ldr	r3, [r3, #0]
 8003e0e:	9203      	str	r2, [sp, #12]
 8003e10:	2b00      	cmp	r3, #0
 8003e12:	bfb8      	it	lt
 8003e14:	f04f 33ff 	movlt.w	r3, #4294967295
 8003e18:	3402      	adds	r4, #2
 8003e1a:	9305      	str	r3, [sp, #20]
 8003e1c:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8003ee8 <_svfiprintf_r+0x1fc>
 8003e20:	7821      	ldrb	r1, [r4, #0]
 8003e22:	2203      	movs	r2, #3
 8003e24:	4650      	mov	r0, sl
 8003e26:	f7fc f9f3 	bl	8000210 <memchr>
 8003e2a:	b140      	cbz	r0, 8003e3e <_svfiprintf_r+0x152>
 8003e2c:	2340      	movs	r3, #64	; 0x40
 8003e2e:	eba0 000a 	sub.w	r0, r0, sl
 8003e32:	fa03 f000 	lsl.w	r0, r3, r0
 8003e36:	9b04      	ldr	r3, [sp, #16]
 8003e38:	4303      	orrs	r3, r0
 8003e3a:	3401      	adds	r4, #1
 8003e3c:	9304      	str	r3, [sp, #16]
 8003e3e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003e42:	4826      	ldr	r0, [pc, #152]	; (8003edc <_svfiprintf_r+0x1f0>)
 8003e44:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8003e48:	2206      	movs	r2, #6
 8003e4a:	f7fc f9e1 	bl	8000210 <memchr>
 8003e4e:	2800      	cmp	r0, #0
 8003e50:	d038      	beq.n	8003ec4 <_svfiprintf_r+0x1d8>
 8003e52:	4b23      	ldr	r3, [pc, #140]	; (8003ee0 <_svfiprintf_r+0x1f4>)
 8003e54:	bb1b      	cbnz	r3, 8003e9e <_svfiprintf_r+0x1b2>
 8003e56:	9b03      	ldr	r3, [sp, #12]
 8003e58:	3307      	adds	r3, #7
 8003e5a:	f023 0307 	bic.w	r3, r3, #7
 8003e5e:	3308      	adds	r3, #8
 8003e60:	9303      	str	r3, [sp, #12]
 8003e62:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003e64:	4433      	add	r3, r6
 8003e66:	9309      	str	r3, [sp, #36]	; 0x24
 8003e68:	e767      	b.n	8003d3a <_svfiprintf_r+0x4e>
 8003e6a:	fb0c 3202 	mla	r2, ip, r2, r3
 8003e6e:	460c      	mov	r4, r1
 8003e70:	2001      	movs	r0, #1
 8003e72:	e7a5      	b.n	8003dc0 <_svfiprintf_r+0xd4>
 8003e74:	2300      	movs	r3, #0
 8003e76:	3401      	adds	r4, #1
 8003e78:	9305      	str	r3, [sp, #20]
 8003e7a:	4619      	mov	r1, r3
 8003e7c:	f04f 0c0a 	mov.w	ip, #10
 8003e80:	4620      	mov	r0, r4
 8003e82:	f810 2b01 	ldrb.w	r2, [r0], #1
 8003e86:	3a30      	subs	r2, #48	; 0x30
 8003e88:	2a09      	cmp	r2, #9
 8003e8a:	d903      	bls.n	8003e94 <_svfiprintf_r+0x1a8>
 8003e8c:	2b00      	cmp	r3, #0
 8003e8e:	d0c5      	beq.n	8003e1c <_svfiprintf_r+0x130>
 8003e90:	9105      	str	r1, [sp, #20]
 8003e92:	e7c3      	b.n	8003e1c <_svfiprintf_r+0x130>
 8003e94:	fb0c 2101 	mla	r1, ip, r1, r2
 8003e98:	4604      	mov	r4, r0
 8003e9a:	2301      	movs	r3, #1
 8003e9c:	e7f0      	b.n	8003e80 <_svfiprintf_r+0x194>
 8003e9e:	ab03      	add	r3, sp, #12
 8003ea0:	9300      	str	r3, [sp, #0]
 8003ea2:	462a      	mov	r2, r5
 8003ea4:	4b0f      	ldr	r3, [pc, #60]	; (8003ee4 <_svfiprintf_r+0x1f8>)
 8003ea6:	a904      	add	r1, sp, #16
 8003ea8:	4638      	mov	r0, r7
 8003eaa:	f3af 8000 	nop.w
 8003eae:	1c42      	adds	r2, r0, #1
 8003eb0:	4606      	mov	r6, r0
 8003eb2:	d1d6      	bne.n	8003e62 <_svfiprintf_r+0x176>
 8003eb4:	89ab      	ldrh	r3, [r5, #12]
 8003eb6:	065b      	lsls	r3, r3, #25
 8003eb8:	f53f af2c 	bmi.w	8003d14 <_svfiprintf_r+0x28>
 8003ebc:	9809      	ldr	r0, [sp, #36]	; 0x24
 8003ebe:	b01d      	add	sp, #116	; 0x74
 8003ec0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003ec4:	ab03      	add	r3, sp, #12
 8003ec6:	9300      	str	r3, [sp, #0]
 8003ec8:	462a      	mov	r2, r5
 8003eca:	4b06      	ldr	r3, [pc, #24]	; (8003ee4 <_svfiprintf_r+0x1f8>)
 8003ecc:	a904      	add	r1, sp, #16
 8003ece:	4638      	mov	r0, r7
 8003ed0:	f000 f87a 	bl	8003fc8 <_printf_i>
 8003ed4:	e7eb      	b.n	8003eae <_svfiprintf_r+0x1c2>
 8003ed6:	bf00      	nop
 8003ed8:	08004479 	.word	0x08004479
 8003edc:	08004483 	.word	0x08004483
 8003ee0:	00000000 	.word	0x00000000
 8003ee4:	08003c35 	.word	0x08003c35
 8003ee8:	0800447f 	.word	0x0800447f

08003eec <_printf_common>:
 8003eec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003ef0:	4616      	mov	r6, r2
 8003ef2:	4699      	mov	r9, r3
 8003ef4:	688a      	ldr	r2, [r1, #8]
 8003ef6:	690b      	ldr	r3, [r1, #16]
 8003ef8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8003efc:	4293      	cmp	r3, r2
 8003efe:	bfb8      	it	lt
 8003f00:	4613      	movlt	r3, r2
 8003f02:	6033      	str	r3, [r6, #0]
 8003f04:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8003f08:	4607      	mov	r7, r0
 8003f0a:	460c      	mov	r4, r1
 8003f0c:	b10a      	cbz	r2, 8003f12 <_printf_common+0x26>
 8003f0e:	3301      	adds	r3, #1
 8003f10:	6033      	str	r3, [r6, #0]
 8003f12:	6823      	ldr	r3, [r4, #0]
 8003f14:	0699      	lsls	r1, r3, #26
 8003f16:	bf42      	ittt	mi
 8003f18:	6833      	ldrmi	r3, [r6, #0]
 8003f1a:	3302      	addmi	r3, #2
 8003f1c:	6033      	strmi	r3, [r6, #0]
 8003f1e:	6825      	ldr	r5, [r4, #0]
 8003f20:	f015 0506 	ands.w	r5, r5, #6
 8003f24:	d106      	bne.n	8003f34 <_printf_common+0x48>
 8003f26:	f104 0a19 	add.w	sl, r4, #25
 8003f2a:	68e3      	ldr	r3, [r4, #12]
 8003f2c:	6832      	ldr	r2, [r6, #0]
 8003f2e:	1a9b      	subs	r3, r3, r2
 8003f30:	42ab      	cmp	r3, r5
 8003f32:	dc26      	bgt.n	8003f82 <_printf_common+0x96>
 8003f34:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8003f38:	1e13      	subs	r3, r2, #0
 8003f3a:	6822      	ldr	r2, [r4, #0]
 8003f3c:	bf18      	it	ne
 8003f3e:	2301      	movne	r3, #1
 8003f40:	0692      	lsls	r2, r2, #26
 8003f42:	d42b      	bmi.n	8003f9c <_printf_common+0xb0>
 8003f44:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8003f48:	4649      	mov	r1, r9
 8003f4a:	4638      	mov	r0, r7
 8003f4c:	47c0      	blx	r8
 8003f4e:	3001      	adds	r0, #1
 8003f50:	d01e      	beq.n	8003f90 <_printf_common+0xa4>
 8003f52:	6823      	ldr	r3, [r4, #0]
 8003f54:	68e5      	ldr	r5, [r4, #12]
 8003f56:	6832      	ldr	r2, [r6, #0]
 8003f58:	f003 0306 	and.w	r3, r3, #6
 8003f5c:	2b04      	cmp	r3, #4
 8003f5e:	bf08      	it	eq
 8003f60:	1aad      	subeq	r5, r5, r2
 8003f62:	68a3      	ldr	r3, [r4, #8]
 8003f64:	6922      	ldr	r2, [r4, #16]
 8003f66:	bf0c      	ite	eq
 8003f68:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003f6c:	2500      	movne	r5, #0
 8003f6e:	4293      	cmp	r3, r2
 8003f70:	bfc4      	itt	gt
 8003f72:	1a9b      	subgt	r3, r3, r2
 8003f74:	18ed      	addgt	r5, r5, r3
 8003f76:	2600      	movs	r6, #0
 8003f78:	341a      	adds	r4, #26
 8003f7a:	42b5      	cmp	r5, r6
 8003f7c:	d11a      	bne.n	8003fb4 <_printf_common+0xc8>
 8003f7e:	2000      	movs	r0, #0
 8003f80:	e008      	b.n	8003f94 <_printf_common+0xa8>
 8003f82:	2301      	movs	r3, #1
 8003f84:	4652      	mov	r2, sl
 8003f86:	4649      	mov	r1, r9
 8003f88:	4638      	mov	r0, r7
 8003f8a:	47c0      	blx	r8
 8003f8c:	3001      	adds	r0, #1
 8003f8e:	d103      	bne.n	8003f98 <_printf_common+0xac>
 8003f90:	f04f 30ff 	mov.w	r0, #4294967295
 8003f94:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003f98:	3501      	adds	r5, #1
 8003f9a:	e7c6      	b.n	8003f2a <_printf_common+0x3e>
 8003f9c:	18e1      	adds	r1, r4, r3
 8003f9e:	1c5a      	adds	r2, r3, #1
 8003fa0:	2030      	movs	r0, #48	; 0x30
 8003fa2:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8003fa6:	4422      	add	r2, r4
 8003fa8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8003fac:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8003fb0:	3302      	adds	r3, #2
 8003fb2:	e7c7      	b.n	8003f44 <_printf_common+0x58>
 8003fb4:	2301      	movs	r3, #1
 8003fb6:	4622      	mov	r2, r4
 8003fb8:	4649      	mov	r1, r9
 8003fba:	4638      	mov	r0, r7
 8003fbc:	47c0      	blx	r8
 8003fbe:	3001      	adds	r0, #1
 8003fc0:	d0e6      	beq.n	8003f90 <_printf_common+0xa4>
 8003fc2:	3601      	adds	r6, #1
 8003fc4:	e7d9      	b.n	8003f7a <_printf_common+0x8e>
	...

08003fc8 <_printf_i>:
 8003fc8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003fcc:	7e0f      	ldrb	r7, [r1, #24]
 8003fce:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8003fd0:	2f78      	cmp	r7, #120	; 0x78
 8003fd2:	4691      	mov	r9, r2
 8003fd4:	4680      	mov	r8, r0
 8003fd6:	460c      	mov	r4, r1
 8003fd8:	469a      	mov	sl, r3
 8003fda:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8003fde:	d807      	bhi.n	8003ff0 <_printf_i+0x28>
 8003fe0:	2f62      	cmp	r7, #98	; 0x62
 8003fe2:	d80a      	bhi.n	8003ffa <_printf_i+0x32>
 8003fe4:	2f00      	cmp	r7, #0
 8003fe6:	f000 80d8 	beq.w	800419a <_printf_i+0x1d2>
 8003fea:	2f58      	cmp	r7, #88	; 0x58
 8003fec:	f000 80a3 	beq.w	8004136 <_printf_i+0x16e>
 8003ff0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003ff4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8003ff8:	e03a      	b.n	8004070 <_printf_i+0xa8>
 8003ffa:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8003ffe:	2b15      	cmp	r3, #21
 8004000:	d8f6      	bhi.n	8003ff0 <_printf_i+0x28>
 8004002:	a101      	add	r1, pc, #4	; (adr r1, 8004008 <_printf_i+0x40>)
 8004004:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8004008:	08004061 	.word	0x08004061
 800400c:	08004075 	.word	0x08004075
 8004010:	08003ff1 	.word	0x08003ff1
 8004014:	08003ff1 	.word	0x08003ff1
 8004018:	08003ff1 	.word	0x08003ff1
 800401c:	08003ff1 	.word	0x08003ff1
 8004020:	08004075 	.word	0x08004075
 8004024:	08003ff1 	.word	0x08003ff1
 8004028:	08003ff1 	.word	0x08003ff1
 800402c:	08003ff1 	.word	0x08003ff1
 8004030:	08003ff1 	.word	0x08003ff1
 8004034:	08004181 	.word	0x08004181
 8004038:	080040a5 	.word	0x080040a5
 800403c:	08004163 	.word	0x08004163
 8004040:	08003ff1 	.word	0x08003ff1
 8004044:	08003ff1 	.word	0x08003ff1
 8004048:	080041a3 	.word	0x080041a3
 800404c:	08003ff1 	.word	0x08003ff1
 8004050:	080040a5 	.word	0x080040a5
 8004054:	08003ff1 	.word	0x08003ff1
 8004058:	08003ff1 	.word	0x08003ff1
 800405c:	0800416b 	.word	0x0800416b
 8004060:	682b      	ldr	r3, [r5, #0]
 8004062:	1d1a      	adds	r2, r3, #4
 8004064:	681b      	ldr	r3, [r3, #0]
 8004066:	602a      	str	r2, [r5, #0]
 8004068:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800406c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004070:	2301      	movs	r3, #1
 8004072:	e0a3      	b.n	80041bc <_printf_i+0x1f4>
 8004074:	6820      	ldr	r0, [r4, #0]
 8004076:	6829      	ldr	r1, [r5, #0]
 8004078:	0606      	lsls	r6, r0, #24
 800407a:	f101 0304 	add.w	r3, r1, #4
 800407e:	d50a      	bpl.n	8004096 <_printf_i+0xce>
 8004080:	680e      	ldr	r6, [r1, #0]
 8004082:	602b      	str	r3, [r5, #0]
 8004084:	2e00      	cmp	r6, #0
 8004086:	da03      	bge.n	8004090 <_printf_i+0xc8>
 8004088:	232d      	movs	r3, #45	; 0x2d
 800408a:	4276      	negs	r6, r6
 800408c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004090:	485e      	ldr	r0, [pc, #376]	; (800420c <_printf_i+0x244>)
 8004092:	230a      	movs	r3, #10
 8004094:	e019      	b.n	80040ca <_printf_i+0x102>
 8004096:	680e      	ldr	r6, [r1, #0]
 8004098:	602b      	str	r3, [r5, #0]
 800409a:	f010 0f40 	tst.w	r0, #64	; 0x40
 800409e:	bf18      	it	ne
 80040a0:	b236      	sxthne	r6, r6
 80040a2:	e7ef      	b.n	8004084 <_printf_i+0xbc>
 80040a4:	682b      	ldr	r3, [r5, #0]
 80040a6:	6820      	ldr	r0, [r4, #0]
 80040a8:	1d19      	adds	r1, r3, #4
 80040aa:	6029      	str	r1, [r5, #0]
 80040ac:	0601      	lsls	r1, r0, #24
 80040ae:	d501      	bpl.n	80040b4 <_printf_i+0xec>
 80040b0:	681e      	ldr	r6, [r3, #0]
 80040b2:	e002      	b.n	80040ba <_printf_i+0xf2>
 80040b4:	0646      	lsls	r6, r0, #25
 80040b6:	d5fb      	bpl.n	80040b0 <_printf_i+0xe8>
 80040b8:	881e      	ldrh	r6, [r3, #0]
 80040ba:	4854      	ldr	r0, [pc, #336]	; (800420c <_printf_i+0x244>)
 80040bc:	2f6f      	cmp	r7, #111	; 0x6f
 80040be:	bf0c      	ite	eq
 80040c0:	2308      	moveq	r3, #8
 80040c2:	230a      	movne	r3, #10
 80040c4:	2100      	movs	r1, #0
 80040c6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80040ca:	6865      	ldr	r5, [r4, #4]
 80040cc:	60a5      	str	r5, [r4, #8]
 80040ce:	2d00      	cmp	r5, #0
 80040d0:	bfa2      	ittt	ge
 80040d2:	6821      	ldrge	r1, [r4, #0]
 80040d4:	f021 0104 	bicge.w	r1, r1, #4
 80040d8:	6021      	strge	r1, [r4, #0]
 80040da:	b90e      	cbnz	r6, 80040e0 <_printf_i+0x118>
 80040dc:	2d00      	cmp	r5, #0
 80040de:	d04d      	beq.n	800417c <_printf_i+0x1b4>
 80040e0:	4615      	mov	r5, r2
 80040e2:	fbb6 f1f3 	udiv	r1, r6, r3
 80040e6:	fb03 6711 	mls	r7, r3, r1, r6
 80040ea:	5dc7      	ldrb	r7, [r0, r7]
 80040ec:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80040f0:	4637      	mov	r7, r6
 80040f2:	42bb      	cmp	r3, r7
 80040f4:	460e      	mov	r6, r1
 80040f6:	d9f4      	bls.n	80040e2 <_printf_i+0x11a>
 80040f8:	2b08      	cmp	r3, #8
 80040fa:	d10b      	bne.n	8004114 <_printf_i+0x14c>
 80040fc:	6823      	ldr	r3, [r4, #0]
 80040fe:	07de      	lsls	r6, r3, #31
 8004100:	d508      	bpl.n	8004114 <_printf_i+0x14c>
 8004102:	6923      	ldr	r3, [r4, #16]
 8004104:	6861      	ldr	r1, [r4, #4]
 8004106:	4299      	cmp	r1, r3
 8004108:	bfde      	ittt	le
 800410a:	2330      	movle	r3, #48	; 0x30
 800410c:	f805 3c01 	strble.w	r3, [r5, #-1]
 8004110:	f105 35ff 	addle.w	r5, r5, #4294967295
 8004114:	1b52      	subs	r2, r2, r5
 8004116:	6122      	str	r2, [r4, #16]
 8004118:	f8cd a000 	str.w	sl, [sp]
 800411c:	464b      	mov	r3, r9
 800411e:	aa03      	add	r2, sp, #12
 8004120:	4621      	mov	r1, r4
 8004122:	4640      	mov	r0, r8
 8004124:	f7ff fee2 	bl	8003eec <_printf_common>
 8004128:	3001      	adds	r0, #1
 800412a:	d14c      	bne.n	80041c6 <_printf_i+0x1fe>
 800412c:	f04f 30ff 	mov.w	r0, #4294967295
 8004130:	b004      	add	sp, #16
 8004132:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004136:	4835      	ldr	r0, [pc, #212]	; (800420c <_printf_i+0x244>)
 8004138:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800413c:	6829      	ldr	r1, [r5, #0]
 800413e:	6823      	ldr	r3, [r4, #0]
 8004140:	f851 6b04 	ldr.w	r6, [r1], #4
 8004144:	6029      	str	r1, [r5, #0]
 8004146:	061d      	lsls	r5, r3, #24
 8004148:	d514      	bpl.n	8004174 <_printf_i+0x1ac>
 800414a:	07df      	lsls	r7, r3, #31
 800414c:	bf44      	itt	mi
 800414e:	f043 0320 	orrmi.w	r3, r3, #32
 8004152:	6023      	strmi	r3, [r4, #0]
 8004154:	b91e      	cbnz	r6, 800415e <_printf_i+0x196>
 8004156:	6823      	ldr	r3, [r4, #0]
 8004158:	f023 0320 	bic.w	r3, r3, #32
 800415c:	6023      	str	r3, [r4, #0]
 800415e:	2310      	movs	r3, #16
 8004160:	e7b0      	b.n	80040c4 <_printf_i+0xfc>
 8004162:	6823      	ldr	r3, [r4, #0]
 8004164:	f043 0320 	orr.w	r3, r3, #32
 8004168:	6023      	str	r3, [r4, #0]
 800416a:	2378      	movs	r3, #120	; 0x78
 800416c:	4828      	ldr	r0, [pc, #160]	; (8004210 <_printf_i+0x248>)
 800416e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8004172:	e7e3      	b.n	800413c <_printf_i+0x174>
 8004174:	0659      	lsls	r1, r3, #25
 8004176:	bf48      	it	mi
 8004178:	b2b6      	uxthmi	r6, r6
 800417a:	e7e6      	b.n	800414a <_printf_i+0x182>
 800417c:	4615      	mov	r5, r2
 800417e:	e7bb      	b.n	80040f8 <_printf_i+0x130>
 8004180:	682b      	ldr	r3, [r5, #0]
 8004182:	6826      	ldr	r6, [r4, #0]
 8004184:	6961      	ldr	r1, [r4, #20]
 8004186:	1d18      	adds	r0, r3, #4
 8004188:	6028      	str	r0, [r5, #0]
 800418a:	0635      	lsls	r5, r6, #24
 800418c:	681b      	ldr	r3, [r3, #0]
 800418e:	d501      	bpl.n	8004194 <_printf_i+0x1cc>
 8004190:	6019      	str	r1, [r3, #0]
 8004192:	e002      	b.n	800419a <_printf_i+0x1d2>
 8004194:	0670      	lsls	r0, r6, #25
 8004196:	d5fb      	bpl.n	8004190 <_printf_i+0x1c8>
 8004198:	8019      	strh	r1, [r3, #0]
 800419a:	2300      	movs	r3, #0
 800419c:	6123      	str	r3, [r4, #16]
 800419e:	4615      	mov	r5, r2
 80041a0:	e7ba      	b.n	8004118 <_printf_i+0x150>
 80041a2:	682b      	ldr	r3, [r5, #0]
 80041a4:	1d1a      	adds	r2, r3, #4
 80041a6:	602a      	str	r2, [r5, #0]
 80041a8:	681d      	ldr	r5, [r3, #0]
 80041aa:	6862      	ldr	r2, [r4, #4]
 80041ac:	2100      	movs	r1, #0
 80041ae:	4628      	mov	r0, r5
 80041b0:	f7fc f82e 	bl	8000210 <memchr>
 80041b4:	b108      	cbz	r0, 80041ba <_printf_i+0x1f2>
 80041b6:	1b40      	subs	r0, r0, r5
 80041b8:	6060      	str	r0, [r4, #4]
 80041ba:	6863      	ldr	r3, [r4, #4]
 80041bc:	6123      	str	r3, [r4, #16]
 80041be:	2300      	movs	r3, #0
 80041c0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80041c4:	e7a8      	b.n	8004118 <_printf_i+0x150>
 80041c6:	6923      	ldr	r3, [r4, #16]
 80041c8:	462a      	mov	r2, r5
 80041ca:	4649      	mov	r1, r9
 80041cc:	4640      	mov	r0, r8
 80041ce:	47d0      	blx	sl
 80041d0:	3001      	adds	r0, #1
 80041d2:	d0ab      	beq.n	800412c <_printf_i+0x164>
 80041d4:	6823      	ldr	r3, [r4, #0]
 80041d6:	079b      	lsls	r3, r3, #30
 80041d8:	d413      	bmi.n	8004202 <_printf_i+0x23a>
 80041da:	68e0      	ldr	r0, [r4, #12]
 80041dc:	9b03      	ldr	r3, [sp, #12]
 80041de:	4298      	cmp	r0, r3
 80041e0:	bfb8      	it	lt
 80041e2:	4618      	movlt	r0, r3
 80041e4:	e7a4      	b.n	8004130 <_printf_i+0x168>
 80041e6:	2301      	movs	r3, #1
 80041e8:	4632      	mov	r2, r6
 80041ea:	4649      	mov	r1, r9
 80041ec:	4640      	mov	r0, r8
 80041ee:	47d0      	blx	sl
 80041f0:	3001      	adds	r0, #1
 80041f2:	d09b      	beq.n	800412c <_printf_i+0x164>
 80041f4:	3501      	adds	r5, #1
 80041f6:	68e3      	ldr	r3, [r4, #12]
 80041f8:	9903      	ldr	r1, [sp, #12]
 80041fa:	1a5b      	subs	r3, r3, r1
 80041fc:	42ab      	cmp	r3, r5
 80041fe:	dcf2      	bgt.n	80041e6 <_printf_i+0x21e>
 8004200:	e7eb      	b.n	80041da <_printf_i+0x212>
 8004202:	2500      	movs	r5, #0
 8004204:	f104 0619 	add.w	r6, r4, #25
 8004208:	e7f5      	b.n	80041f6 <_printf_i+0x22e>
 800420a:	bf00      	nop
 800420c:	0800448a 	.word	0x0800448a
 8004210:	0800449b 	.word	0x0800449b

08004214 <__retarget_lock_acquire_recursive>:
 8004214:	4770      	bx	lr

08004216 <__retarget_lock_release_recursive>:
 8004216:	4770      	bx	lr

08004218 <memmove>:
 8004218:	4288      	cmp	r0, r1
 800421a:	b510      	push	{r4, lr}
 800421c:	eb01 0402 	add.w	r4, r1, r2
 8004220:	d902      	bls.n	8004228 <memmove+0x10>
 8004222:	4284      	cmp	r4, r0
 8004224:	4623      	mov	r3, r4
 8004226:	d807      	bhi.n	8004238 <memmove+0x20>
 8004228:	1e43      	subs	r3, r0, #1
 800422a:	42a1      	cmp	r1, r4
 800422c:	d008      	beq.n	8004240 <memmove+0x28>
 800422e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8004232:	f803 2f01 	strb.w	r2, [r3, #1]!
 8004236:	e7f8      	b.n	800422a <memmove+0x12>
 8004238:	4402      	add	r2, r0
 800423a:	4601      	mov	r1, r0
 800423c:	428a      	cmp	r2, r1
 800423e:	d100      	bne.n	8004242 <memmove+0x2a>
 8004240:	bd10      	pop	{r4, pc}
 8004242:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8004246:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800424a:	e7f7      	b.n	800423c <memmove+0x24>

0800424c <_realloc_r>:
 800424c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004250:	4680      	mov	r8, r0
 8004252:	4614      	mov	r4, r2
 8004254:	460e      	mov	r6, r1
 8004256:	b921      	cbnz	r1, 8004262 <_realloc_r+0x16>
 8004258:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800425c:	4611      	mov	r1, r2
 800425e:	f7ff bb9d 	b.w	800399c <_malloc_r>
 8004262:	b92a      	cbnz	r2, 8004270 <_realloc_r+0x24>
 8004264:	f7ff fb2e 	bl	80038c4 <_free_r>
 8004268:	4625      	mov	r5, r4
 800426a:	4628      	mov	r0, r5
 800426c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004270:	f000 f81b 	bl	80042aa <_malloc_usable_size_r>
 8004274:	4284      	cmp	r4, r0
 8004276:	4607      	mov	r7, r0
 8004278:	d802      	bhi.n	8004280 <_realloc_r+0x34>
 800427a:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800427e:	d812      	bhi.n	80042a6 <_realloc_r+0x5a>
 8004280:	4621      	mov	r1, r4
 8004282:	4640      	mov	r0, r8
 8004284:	f7ff fb8a 	bl	800399c <_malloc_r>
 8004288:	4605      	mov	r5, r0
 800428a:	2800      	cmp	r0, #0
 800428c:	d0ed      	beq.n	800426a <_realloc_r+0x1e>
 800428e:	42bc      	cmp	r4, r7
 8004290:	4622      	mov	r2, r4
 8004292:	4631      	mov	r1, r6
 8004294:	bf28      	it	cs
 8004296:	463a      	movcs	r2, r7
 8004298:	f7ff fafe 	bl	8003898 <memcpy>
 800429c:	4631      	mov	r1, r6
 800429e:	4640      	mov	r0, r8
 80042a0:	f7ff fb10 	bl	80038c4 <_free_r>
 80042a4:	e7e1      	b.n	800426a <_realloc_r+0x1e>
 80042a6:	4635      	mov	r5, r6
 80042a8:	e7df      	b.n	800426a <_realloc_r+0x1e>

080042aa <_malloc_usable_size_r>:
 80042aa:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80042ae:	1f18      	subs	r0, r3, #4
 80042b0:	2b00      	cmp	r3, #0
 80042b2:	bfbc      	itt	lt
 80042b4:	580b      	ldrlt	r3, [r1, r0]
 80042b6:	18c0      	addlt	r0, r0, r3
 80042b8:	4770      	bx	lr
	...

080042bc <_init>:
 80042bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80042be:	bf00      	nop
 80042c0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80042c2:	bc08      	pop	{r3}
 80042c4:	469e      	mov	lr, r3
 80042c6:	4770      	bx	lr

080042c8 <_fini>:
 80042c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80042ca:	bf00      	nop
 80042cc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80042ce:	bc08      	pop	{r3}
 80042d0:	469e      	mov	lr, r3
 80042d2:	4770      	bx	lr
