
lab2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004184  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001dc  08004334  08004334  00014334  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004510  08004510  00020094  2**0
                  CONTENTS
  4 .ARM          00000008  08004510  08004510  00014510  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004518  08004518  00020094  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004518  08004518  00014518  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800451c  0800451c  0001451c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000094  20000000  08004520  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020094  2**0
                  CONTENTS
 10 .bss          000002b8  20000094  20000094  00020094  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  2000034c  2000034c  00020094  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020094  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000a6a7  00000000  00000000  000200c4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000233e  00000000  00000000  0002a76b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000008b0  00000000  00000000  0002cab0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 000007a8  00000000  00000000  0002d360  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000235c6  00000000  00000000  0002db08  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000c570  00000000  00000000  000510ce  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000cfda6  00000000  00000000  0005d63e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  0012d3e4  2**0
                  CONTENTS, READONLY
 21 .debug_frame  0000254c  00000000  00000000  0012d434  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	20000094 	.word	0x20000094
 80001cc:	00000000 	.word	0x00000000
 80001d0:	0800431c 	.word	0x0800431c

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	20000098 	.word	0x20000098
 80001ec:	0800431c 	.word	0x0800431c

080001f0 <strcmp>:
 80001f0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001f4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001f8:	2a01      	cmp	r2, #1
 80001fa:	bf28      	it	cs
 80001fc:	429a      	cmpcs	r2, r3
 80001fe:	d0f7      	beq.n	80001f0 <strcmp>
 8000200:	1ad0      	subs	r0, r2, r3
 8000202:	4770      	bx	lr

08000204 <strlen>:
 8000204:	4603      	mov	r3, r0
 8000206:	f813 2b01 	ldrb.w	r2, [r3], #1
 800020a:	2a00      	cmp	r2, #0
 800020c:	d1fb      	bne.n	8000206 <strlen+0x2>
 800020e:	1a18      	subs	r0, r3, r0
 8000210:	3801      	subs	r0, #1
 8000212:	4770      	bx	lr
	...

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_uldivmod>:
 80002c0:	b953      	cbnz	r3, 80002d8 <__aeabi_uldivmod+0x18>
 80002c2:	b94a      	cbnz	r2, 80002d8 <__aeabi_uldivmod+0x18>
 80002c4:	2900      	cmp	r1, #0
 80002c6:	bf08      	it	eq
 80002c8:	2800      	cmpeq	r0, #0
 80002ca:	bf1c      	itt	ne
 80002cc:	f04f 31ff 	movne.w	r1, #4294967295
 80002d0:	f04f 30ff 	movne.w	r0, #4294967295
 80002d4:	f000 b974 	b.w	80005c0 <__aeabi_idiv0>
 80002d8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002dc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002e0:	f000 f806 	bl	80002f0 <__udivmoddi4>
 80002e4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002e8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ec:	b004      	add	sp, #16
 80002ee:	4770      	bx	lr

080002f0 <__udivmoddi4>:
 80002f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002f4:	9d08      	ldr	r5, [sp, #32]
 80002f6:	4604      	mov	r4, r0
 80002f8:	468e      	mov	lr, r1
 80002fa:	2b00      	cmp	r3, #0
 80002fc:	d14d      	bne.n	800039a <__udivmoddi4+0xaa>
 80002fe:	428a      	cmp	r2, r1
 8000300:	4694      	mov	ip, r2
 8000302:	d969      	bls.n	80003d8 <__udivmoddi4+0xe8>
 8000304:	fab2 f282 	clz	r2, r2
 8000308:	b152      	cbz	r2, 8000320 <__udivmoddi4+0x30>
 800030a:	fa01 f302 	lsl.w	r3, r1, r2
 800030e:	f1c2 0120 	rsb	r1, r2, #32
 8000312:	fa20 f101 	lsr.w	r1, r0, r1
 8000316:	fa0c fc02 	lsl.w	ip, ip, r2
 800031a:	ea41 0e03 	orr.w	lr, r1, r3
 800031e:	4094      	lsls	r4, r2
 8000320:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000324:	0c21      	lsrs	r1, r4, #16
 8000326:	fbbe f6f8 	udiv	r6, lr, r8
 800032a:	fa1f f78c 	uxth.w	r7, ip
 800032e:	fb08 e316 	mls	r3, r8, r6, lr
 8000332:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000336:	fb06 f107 	mul.w	r1, r6, r7
 800033a:	4299      	cmp	r1, r3
 800033c:	d90a      	bls.n	8000354 <__udivmoddi4+0x64>
 800033e:	eb1c 0303 	adds.w	r3, ip, r3
 8000342:	f106 30ff 	add.w	r0, r6, #4294967295
 8000346:	f080 811f 	bcs.w	8000588 <__udivmoddi4+0x298>
 800034a:	4299      	cmp	r1, r3
 800034c:	f240 811c 	bls.w	8000588 <__udivmoddi4+0x298>
 8000350:	3e02      	subs	r6, #2
 8000352:	4463      	add	r3, ip
 8000354:	1a5b      	subs	r3, r3, r1
 8000356:	b2a4      	uxth	r4, r4
 8000358:	fbb3 f0f8 	udiv	r0, r3, r8
 800035c:	fb08 3310 	mls	r3, r8, r0, r3
 8000360:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000364:	fb00 f707 	mul.w	r7, r0, r7
 8000368:	42a7      	cmp	r7, r4
 800036a:	d90a      	bls.n	8000382 <__udivmoddi4+0x92>
 800036c:	eb1c 0404 	adds.w	r4, ip, r4
 8000370:	f100 33ff 	add.w	r3, r0, #4294967295
 8000374:	f080 810a 	bcs.w	800058c <__udivmoddi4+0x29c>
 8000378:	42a7      	cmp	r7, r4
 800037a:	f240 8107 	bls.w	800058c <__udivmoddi4+0x29c>
 800037e:	4464      	add	r4, ip
 8000380:	3802      	subs	r0, #2
 8000382:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000386:	1be4      	subs	r4, r4, r7
 8000388:	2600      	movs	r6, #0
 800038a:	b11d      	cbz	r5, 8000394 <__udivmoddi4+0xa4>
 800038c:	40d4      	lsrs	r4, r2
 800038e:	2300      	movs	r3, #0
 8000390:	e9c5 4300 	strd	r4, r3, [r5]
 8000394:	4631      	mov	r1, r6
 8000396:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800039a:	428b      	cmp	r3, r1
 800039c:	d909      	bls.n	80003b2 <__udivmoddi4+0xc2>
 800039e:	2d00      	cmp	r5, #0
 80003a0:	f000 80ef 	beq.w	8000582 <__udivmoddi4+0x292>
 80003a4:	2600      	movs	r6, #0
 80003a6:	e9c5 0100 	strd	r0, r1, [r5]
 80003aa:	4630      	mov	r0, r6
 80003ac:	4631      	mov	r1, r6
 80003ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003b2:	fab3 f683 	clz	r6, r3
 80003b6:	2e00      	cmp	r6, #0
 80003b8:	d14a      	bne.n	8000450 <__udivmoddi4+0x160>
 80003ba:	428b      	cmp	r3, r1
 80003bc:	d302      	bcc.n	80003c4 <__udivmoddi4+0xd4>
 80003be:	4282      	cmp	r2, r0
 80003c0:	f200 80f9 	bhi.w	80005b6 <__udivmoddi4+0x2c6>
 80003c4:	1a84      	subs	r4, r0, r2
 80003c6:	eb61 0303 	sbc.w	r3, r1, r3
 80003ca:	2001      	movs	r0, #1
 80003cc:	469e      	mov	lr, r3
 80003ce:	2d00      	cmp	r5, #0
 80003d0:	d0e0      	beq.n	8000394 <__udivmoddi4+0xa4>
 80003d2:	e9c5 4e00 	strd	r4, lr, [r5]
 80003d6:	e7dd      	b.n	8000394 <__udivmoddi4+0xa4>
 80003d8:	b902      	cbnz	r2, 80003dc <__udivmoddi4+0xec>
 80003da:	deff      	udf	#255	; 0xff
 80003dc:	fab2 f282 	clz	r2, r2
 80003e0:	2a00      	cmp	r2, #0
 80003e2:	f040 8092 	bne.w	800050a <__udivmoddi4+0x21a>
 80003e6:	eba1 010c 	sub.w	r1, r1, ip
 80003ea:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003ee:	fa1f fe8c 	uxth.w	lr, ip
 80003f2:	2601      	movs	r6, #1
 80003f4:	0c20      	lsrs	r0, r4, #16
 80003f6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003fa:	fb07 1113 	mls	r1, r7, r3, r1
 80003fe:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000402:	fb0e f003 	mul.w	r0, lr, r3
 8000406:	4288      	cmp	r0, r1
 8000408:	d908      	bls.n	800041c <__udivmoddi4+0x12c>
 800040a:	eb1c 0101 	adds.w	r1, ip, r1
 800040e:	f103 38ff 	add.w	r8, r3, #4294967295
 8000412:	d202      	bcs.n	800041a <__udivmoddi4+0x12a>
 8000414:	4288      	cmp	r0, r1
 8000416:	f200 80cb 	bhi.w	80005b0 <__udivmoddi4+0x2c0>
 800041a:	4643      	mov	r3, r8
 800041c:	1a09      	subs	r1, r1, r0
 800041e:	b2a4      	uxth	r4, r4
 8000420:	fbb1 f0f7 	udiv	r0, r1, r7
 8000424:	fb07 1110 	mls	r1, r7, r0, r1
 8000428:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800042c:	fb0e fe00 	mul.w	lr, lr, r0
 8000430:	45a6      	cmp	lr, r4
 8000432:	d908      	bls.n	8000446 <__udivmoddi4+0x156>
 8000434:	eb1c 0404 	adds.w	r4, ip, r4
 8000438:	f100 31ff 	add.w	r1, r0, #4294967295
 800043c:	d202      	bcs.n	8000444 <__udivmoddi4+0x154>
 800043e:	45a6      	cmp	lr, r4
 8000440:	f200 80bb 	bhi.w	80005ba <__udivmoddi4+0x2ca>
 8000444:	4608      	mov	r0, r1
 8000446:	eba4 040e 	sub.w	r4, r4, lr
 800044a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800044e:	e79c      	b.n	800038a <__udivmoddi4+0x9a>
 8000450:	f1c6 0720 	rsb	r7, r6, #32
 8000454:	40b3      	lsls	r3, r6
 8000456:	fa22 fc07 	lsr.w	ip, r2, r7
 800045a:	ea4c 0c03 	orr.w	ip, ip, r3
 800045e:	fa20 f407 	lsr.w	r4, r0, r7
 8000462:	fa01 f306 	lsl.w	r3, r1, r6
 8000466:	431c      	orrs	r4, r3
 8000468:	40f9      	lsrs	r1, r7
 800046a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800046e:	fa00 f306 	lsl.w	r3, r0, r6
 8000472:	fbb1 f8f9 	udiv	r8, r1, r9
 8000476:	0c20      	lsrs	r0, r4, #16
 8000478:	fa1f fe8c 	uxth.w	lr, ip
 800047c:	fb09 1118 	mls	r1, r9, r8, r1
 8000480:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000484:	fb08 f00e 	mul.w	r0, r8, lr
 8000488:	4288      	cmp	r0, r1
 800048a:	fa02 f206 	lsl.w	r2, r2, r6
 800048e:	d90b      	bls.n	80004a8 <__udivmoddi4+0x1b8>
 8000490:	eb1c 0101 	adds.w	r1, ip, r1
 8000494:	f108 3aff 	add.w	sl, r8, #4294967295
 8000498:	f080 8088 	bcs.w	80005ac <__udivmoddi4+0x2bc>
 800049c:	4288      	cmp	r0, r1
 800049e:	f240 8085 	bls.w	80005ac <__udivmoddi4+0x2bc>
 80004a2:	f1a8 0802 	sub.w	r8, r8, #2
 80004a6:	4461      	add	r1, ip
 80004a8:	1a09      	subs	r1, r1, r0
 80004aa:	b2a4      	uxth	r4, r4
 80004ac:	fbb1 f0f9 	udiv	r0, r1, r9
 80004b0:	fb09 1110 	mls	r1, r9, r0, r1
 80004b4:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80004b8:	fb00 fe0e 	mul.w	lr, r0, lr
 80004bc:	458e      	cmp	lr, r1
 80004be:	d908      	bls.n	80004d2 <__udivmoddi4+0x1e2>
 80004c0:	eb1c 0101 	adds.w	r1, ip, r1
 80004c4:	f100 34ff 	add.w	r4, r0, #4294967295
 80004c8:	d26c      	bcs.n	80005a4 <__udivmoddi4+0x2b4>
 80004ca:	458e      	cmp	lr, r1
 80004cc:	d96a      	bls.n	80005a4 <__udivmoddi4+0x2b4>
 80004ce:	3802      	subs	r0, #2
 80004d0:	4461      	add	r1, ip
 80004d2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80004d6:	fba0 9402 	umull	r9, r4, r0, r2
 80004da:	eba1 010e 	sub.w	r1, r1, lr
 80004de:	42a1      	cmp	r1, r4
 80004e0:	46c8      	mov	r8, r9
 80004e2:	46a6      	mov	lr, r4
 80004e4:	d356      	bcc.n	8000594 <__udivmoddi4+0x2a4>
 80004e6:	d053      	beq.n	8000590 <__udivmoddi4+0x2a0>
 80004e8:	b15d      	cbz	r5, 8000502 <__udivmoddi4+0x212>
 80004ea:	ebb3 0208 	subs.w	r2, r3, r8
 80004ee:	eb61 010e 	sbc.w	r1, r1, lr
 80004f2:	fa01 f707 	lsl.w	r7, r1, r7
 80004f6:	fa22 f306 	lsr.w	r3, r2, r6
 80004fa:	40f1      	lsrs	r1, r6
 80004fc:	431f      	orrs	r7, r3
 80004fe:	e9c5 7100 	strd	r7, r1, [r5]
 8000502:	2600      	movs	r6, #0
 8000504:	4631      	mov	r1, r6
 8000506:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800050a:	f1c2 0320 	rsb	r3, r2, #32
 800050e:	40d8      	lsrs	r0, r3
 8000510:	fa0c fc02 	lsl.w	ip, ip, r2
 8000514:	fa21 f303 	lsr.w	r3, r1, r3
 8000518:	4091      	lsls	r1, r2
 800051a:	4301      	orrs	r1, r0
 800051c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000520:	fa1f fe8c 	uxth.w	lr, ip
 8000524:	fbb3 f0f7 	udiv	r0, r3, r7
 8000528:	fb07 3610 	mls	r6, r7, r0, r3
 800052c:	0c0b      	lsrs	r3, r1, #16
 800052e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000532:	fb00 f60e 	mul.w	r6, r0, lr
 8000536:	429e      	cmp	r6, r3
 8000538:	fa04 f402 	lsl.w	r4, r4, r2
 800053c:	d908      	bls.n	8000550 <__udivmoddi4+0x260>
 800053e:	eb1c 0303 	adds.w	r3, ip, r3
 8000542:	f100 38ff 	add.w	r8, r0, #4294967295
 8000546:	d22f      	bcs.n	80005a8 <__udivmoddi4+0x2b8>
 8000548:	429e      	cmp	r6, r3
 800054a:	d92d      	bls.n	80005a8 <__udivmoddi4+0x2b8>
 800054c:	3802      	subs	r0, #2
 800054e:	4463      	add	r3, ip
 8000550:	1b9b      	subs	r3, r3, r6
 8000552:	b289      	uxth	r1, r1
 8000554:	fbb3 f6f7 	udiv	r6, r3, r7
 8000558:	fb07 3316 	mls	r3, r7, r6, r3
 800055c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000560:	fb06 f30e 	mul.w	r3, r6, lr
 8000564:	428b      	cmp	r3, r1
 8000566:	d908      	bls.n	800057a <__udivmoddi4+0x28a>
 8000568:	eb1c 0101 	adds.w	r1, ip, r1
 800056c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000570:	d216      	bcs.n	80005a0 <__udivmoddi4+0x2b0>
 8000572:	428b      	cmp	r3, r1
 8000574:	d914      	bls.n	80005a0 <__udivmoddi4+0x2b0>
 8000576:	3e02      	subs	r6, #2
 8000578:	4461      	add	r1, ip
 800057a:	1ac9      	subs	r1, r1, r3
 800057c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000580:	e738      	b.n	80003f4 <__udivmoddi4+0x104>
 8000582:	462e      	mov	r6, r5
 8000584:	4628      	mov	r0, r5
 8000586:	e705      	b.n	8000394 <__udivmoddi4+0xa4>
 8000588:	4606      	mov	r6, r0
 800058a:	e6e3      	b.n	8000354 <__udivmoddi4+0x64>
 800058c:	4618      	mov	r0, r3
 800058e:	e6f8      	b.n	8000382 <__udivmoddi4+0x92>
 8000590:	454b      	cmp	r3, r9
 8000592:	d2a9      	bcs.n	80004e8 <__udivmoddi4+0x1f8>
 8000594:	ebb9 0802 	subs.w	r8, r9, r2
 8000598:	eb64 0e0c 	sbc.w	lr, r4, ip
 800059c:	3801      	subs	r0, #1
 800059e:	e7a3      	b.n	80004e8 <__udivmoddi4+0x1f8>
 80005a0:	4646      	mov	r6, r8
 80005a2:	e7ea      	b.n	800057a <__udivmoddi4+0x28a>
 80005a4:	4620      	mov	r0, r4
 80005a6:	e794      	b.n	80004d2 <__udivmoddi4+0x1e2>
 80005a8:	4640      	mov	r0, r8
 80005aa:	e7d1      	b.n	8000550 <__udivmoddi4+0x260>
 80005ac:	46d0      	mov	r8, sl
 80005ae:	e77b      	b.n	80004a8 <__udivmoddi4+0x1b8>
 80005b0:	3b02      	subs	r3, #2
 80005b2:	4461      	add	r1, ip
 80005b4:	e732      	b.n	800041c <__udivmoddi4+0x12c>
 80005b6:	4630      	mov	r0, r6
 80005b8:	e709      	b.n	80003ce <__udivmoddi4+0xde>
 80005ba:	4464      	add	r4, ip
 80005bc:	3802      	subs	r0, #2
 80005be:	e742      	b.n	8000446 <__udivmoddi4+0x156>

080005c0 <__aeabi_idiv0>:
 80005c0:	4770      	bx	lr
 80005c2:	bf00      	nop

080005c4 <buffer_create>:
#include "buffer.h"


struct buffer buffer_create() {
 80005c4:	b580      	push	{r7, lr}
 80005c6:	b084      	sub	sp, #16
 80005c8:	af00      	add	r7, sp, #0
 80005ca:	6078      	str	r0, [r7, #4]
    return (struct buffer) {
        .data = malloc(sizeof(uint8_t) * BUFSIZE),
 80005cc:	f44f 7080 	mov.w	r0, #256	; 0x100
 80005d0:	f003 f98a 	bl	80038e8 <malloc>
 80005d4:	4603      	mov	r3, r0
 80005d6:	461a      	mov	r2, r3
    return (struct buffer) {
 80005d8:	687b      	ldr	r3, [r7, #4]
 80005da:	601a      	str	r2, [r3, #0]
 80005dc:	687b      	ldr	r3, [r7, #4]
 80005de:	2200      	movs	r2, #0
 80005e0:	711a      	strb	r2, [r3, #4]
 80005e2:	687b      	ldr	r3, [r7, #4]
 80005e4:	2200      	movs	r2, #0
 80005e6:	715a      	strb	r2, [r3, #5]
        .ptr_in = 0,
        .ptr_out = 0
    };
}
 80005e8:	6878      	ldr	r0, [r7, #4]
 80005ea:	3710      	adds	r7, #16
 80005ec:	46bd      	mov	sp, r7
 80005ee:	bd80      	pop	{r7, pc}

080005f0 <buffer_push>:

void buffer_push(struct buffer* buffer, uint8_t value) {
 80005f0:	b480      	push	{r7}
 80005f2:	b083      	sub	sp, #12
 80005f4:	af00      	add	r7, sp, #0
 80005f6:	6078      	str	r0, [r7, #4]
 80005f8:	460b      	mov	r3, r1
 80005fa:	70fb      	strb	r3, [r7, #3]
    buffer->data[buffer->ptr_in++] = value;
 80005fc:	687b      	ldr	r3, [r7, #4]
 80005fe:	681b      	ldr	r3, [r3, #0]
 8000600:	687a      	ldr	r2, [r7, #4]
 8000602:	f992 1004 	ldrsb.w	r1, [r2, #4]
 8000606:	b2ca      	uxtb	r2, r1
 8000608:	3201      	adds	r2, #1
 800060a:	b2d2      	uxtb	r2, r2
 800060c:	b250      	sxtb	r0, r2
 800060e:	687a      	ldr	r2, [r7, #4]
 8000610:	7110      	strb	r0, [r2, #4]
 8000612:	460a      	mov	r2, r1
 8000614:	4413      	add	r3, r2
 8000616:	78fa      	ldrb	r2, [r7, #3]
 8000618:	701a      	strb	r2, [r3, #0]
    if (buffer->ptr_in >= BUFSIZE) buffer->ptr_in = 0;
}
 800061a:	bf00      	nop
 800061c:	370c      	adds	r7, #12
 800061e:	46bd      	mov	sp, r7
 8000620:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000624:	4770      	bx	lr

08000626 <buffer_clear>:

uint8_t buffer_get(struct buffer* buffer) {
    return buffer->data[buffer->ptr_out];
}

void buffer_clear(struct buffer* buffer) {
 8000626:	b480      	push	{r7}
 8000628:	b083      	sub	sp, #12
 800062a:	af00      	add	r7, sp, #0
 800062c:	6078      	str	r0, [r7, #4]
    buffer->ptr_in = 0;
 800062e:	687b      	ldr	r3, [r7, #4]
 8000630:	2200      	movs	r2, #0
 8000632:	711a      	strb	r2, [r3, #4]
    buffer->ptr_out = 0;
 8000634:	687b      	ldr	r3, [r7, #4]
 8000636:	2200      	movs	r2, #0
 8000638:	715a      	strb	r2, [r3, #5]
}
 800063a:	bf00      	nop
 800063c:	370c      	adds	r7, #12
 800063e:	46bd      	mov	sp, r7
 8000640:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000644:	4770      	bx	lr

08000646 <buffer_elements>:

int8_t buffer_elements(struct buffer* buffer) {
 8000646:	b480      	push	{r7}
 8000648:	b083      	sub	sp, #12
 800064a:	af00      	add	r7, sp, #0
 800064c:	6078      	str	r0, [r7, #4]
    if (buffer->ptr_in >= buffer->ptr_out)
 800064e:	687b      	ldr	r3, [r7, #4]
 8000650:	f993 2004 	ldrsb.w	r2, [r3, #4]
 8000654:	687b      	ldr	r3, [r7, #4]
 8000656:	f993 3005 	ldrsb.w	r3, [r3, #5]
 800065a:	429a      	cmp	r2, r3
 800065c:	db0b      	blt.n	8000676 <buffer_elements+0x30>
        return (buffer->ptr_in - buffer->ptr_out);
 800065e:	687b      	ldr	r3, [r7, #4]
 8000660:	f993 3004 	ldrsb.w	r3, [r3, #4]
 8000664:	b2da      	uxtb	r2, r3
 8000666:	687b      	ldr	r3, [r7, #4]
 8000668:	f993 3005 	ldrsb.w	r3, [r3, #5]
 800066c:	b2db      	uxtb	r3, r3
 800066e:	1ad3      	subs	r3, r2, r3
 8000670:	b2db      	uxtb	r3, r3
 8000672:	b25b      	sxtb	r3, r3
 8000674:	e00a      	b.n	800068c <buffer_elements+0x46>
    else
        return ((BUFSIZE - buffer->ptr_out) + buffer->ptr_in);
 8000676:	687b      	ldr	r3, [r7, #4]
 8000678:	f993 3004 	ldrsb.w	r3, [r3, #4]
 800067c:	b2da      	uxtb	r2, r3
 800067e:	687b      	ldr	r3, [r7, #4]
 8000680:	f993 3005 	ldrsb.w	r3, [r3, #5]
 8000684:	b2db      	uxtb	r3, r3
 8000686:	1ad3      	subs	r3, r2, r3
 8000688:	b2db      	uxtb	r3, r3
 800068a:	b25b      	sxtb	r3, r3
}
 800068c:	4618      	mov	r0, r3
 800068e:	370c      	adds	r7, #12
 8000690:	46bd      	mov	sp, r7
 8000692:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000696:	4770      	bx	lr

08000698 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000698:	b580      	push	{r7, lr}
 800069a:	b08a      	sub	sp, #40	; 0x28
 800069c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800069e:	f107 0314 	add.w	r3, r7, #20
 80006a2:	2200      	movs	r2, #0
 80006a4:	601a      	str	r2, [r3, #0]
 80006a6:	605a      	str	r2, [r3, #4]
 80006a8:	609a      	str	r2, [r3, #8]
 80006aa:	60da      	str	r2, [r3, #12]
 80006ac:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80006ae:	2300      	movs	r3, #0
 80006b0:	613b      	str	r3, [r7, #16]
 80006b2:	4b2e      	ldr	r3, [pc, #184]	; (800076c <MX_GPIO_Init+0xd4>)
 80006b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006b6:	4a2d      	ldr	r2, [pc, #180]	; (800076c <MX_GPIO_Init+0xd4>)
 80006b8:	f043 0304 	orr.w	r3, r3, #4
 80006bc:	6313      	str	r3, [r2, #48]	; 0x30
 80006be:	4b2b      	ldr	r3, [pc, #172]	; (800076c <MX_GPIO_Init+0xd4>)
 80006c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006c2:	f003 0304 	and.w	r3, r3, #4
 80006c6:	613b      	str	r3, [r7, #16]
 80006c8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80006ca:	2300      	movs	r3, #0
 80006cc:	60fb      	str	r3, [r7, #12]
 80006ce:	4b27      	ldr	r3, [pc, #156]	; (800076c <MX_GPIO_Init+0xd4>)
 80006d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006d2:	4a26      	ldr	r2, [pc, #152]	; (800076c <MX_GPIO_Init+0xd4>)
 80006d4:	f043 0308 	orr.w	r3, r3, #8
 80006d8:	6313      	str	r3, [r2, #48]	; 0x30
 80006da:	4b24      	ldr	r3, [pc, #144]	; (800076c <MX_GPIO_Init+0xd4>)
 80006dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006de:	f003 0308 	and.w	r3, r3, #8
 80006e2:	60fb      	str	r3, [r7, #12]
 80006e4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80006e6:	2300      	movs	r3, #0
 80006e8:	60bb      	str	r3, [r7, #8]
 80006ea:	4b20      	ldr	r3, [pc, #128]	; (800076c <MX_GPIO_Init+0xd4>)
 80006ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006ee:	4a1f      	ldr	r2, [pc, #124]	; (800076c <MX_GPIO_Init+0xd4>)
 80006f0:	f043 0301 	orr.w	r3, r3, #1
 80006f4:	6313      	str	r3, [r2, #48]	; 0x30
 80006f6:	4b1d      	ldr	r3, [pc, #116]	; (800076c <MX_GPIO_Init+0xd4>)
 80006f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006fa:	f003 0301 	and.w	r3, r3, #1
 80006fe:	60bb      	str	r3, [r7, #8]
 8000700:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000702:	2300      	movs	r3, #0
 8000704:	607b      	str	r3, [r7, #4]
 8000706:	4b19      	ldr	r3, [pc, #100]	; (800076c <MX_GPIO_Init+0xd4>)
 8000708:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800070a:	4a18      	ldr	r2, [pc, #96]	; (800076c <MX_GPIO_Init+0xd4>)
 800070c:	f043 0302 	orr.w	r3, r3, #2
 8000710:	6313      	str	r3, [r2, #48]	; 0x30
 8000712:	4b16      	ldr	r3, [pc, #88]	; (800076c <MX_GPIO_Init+0xd4>)
 8000714:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000716:	f003 0302 	and.w	r3, r3, #2
 800071a:	607b      	str	r3, [r7, #4]
 800071c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, greenLed_Pin|redLed_Pin|yellowLed_Pin, GPIO_PIN_RESET);
 800071e:	2200      	movs	r2, #0
 8000720:	f44f 4160 	mov.w	r1, #57344	; 0xe000
 8000724:	4812      	ldr	r0, [pc, #72]	; (8000770 <MX_GPIO_Init+0xd8>)
 8000726:	f001 faeb 	bl	8001d00 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = nBtn_Pin;
 800072a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800072e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000730:	2300      	movs	r3, #0
 8000732:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000734:	2300      	movs	r3, #0
 8000736:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(nBtn_GPIO_Port, &GPIO_InitStruct);
 8000738:	f107 0314 	add.w	r3, r7, #20
 800073c:	4619      	mov	r1, r3
 800073e:	480d      	ldr	r0, [pc, #52]	; (8000774 <MX_GPIO_Init+0xdc>)
 8000740:	f001 f91a 	bl	8001978 <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin PDPin */
  GPIO_InitStruct.Pin = greenLed_Pin|redLed_Pin|yellowLed_Pin;
 8000744:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 8000748:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800074a:	2301      	movs	r3, #1
 800074c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800074e:	2300      	movs	r3, #0
 8000750:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000752:	2300      	movs	r3, #0
 8000754:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000756:	f107 0314 	add.w	r3, r7, #20
 800075a:	4619      	mov	r1, r3
 800075c:	4804      	ldr	r0, [pc, #16]	; (8000770 <MX_GPIO_Init+0xd8>)
 800075e:	f001 f90b 	bl	8001978 <HAL_GPIO_Init>

}
 8000762:	bf00      	nop
 8000764:	3728      	adds	r7, #40	; 0x28
 8000766:	46bd      	mov	sp, r7
 8000768:	bd80      	pop	{r7, pc}
 800076a:	bf00      	nop
 800076c:	40023800 	.word	0x40023800
 8000770:	40020c00 	.word	0x40020c00
 8000774:	40020800 	.word	0x40020800

08000778 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000778:	b580      	push	{r7, lr}
 800077a:	b082      	sub	sp, #8
 800077c:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800077e:	f000 fee5 	bl	800154c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000782:	f000 f841 	bl	8000808 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000786:	f7ff ff87 	bl	8000698 <MX_GPIO_Init>
  MX_USART6_UART_Init();
 800078a:	f000 fbdd 	bl	8000f48 <MX_USART6_UART_Init>
  /* USER CODE BEGIN 2 */
  trafficLightInit(
 800078e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000792:	9301      	str	r3, [sp, #4]
 8000794:	4b18      	ldr	r3, [pc, #96]	; (80007f8 <main+0x80>)
 8000796:	9300      	str	r3, [sp, #0]
 8000798:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800079c:	4a16      	ldr	r2, [pc, #88]	; (80007f8 <main+0x80>)
 800079e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80007a2:	4815      	ldr	r0, [pc, #84]	; (80007f8 <main+0x80>)
 80007a4:	f000 fb62 	bl	8000e6c <trafficLightInit>
		  redLed_GPIO_Port, redLed_Pin,
		  yellowLed_GPIO_Port, yellowLed_Pin,
		  greenLed_GPIO_Port, greenLed_Pin
  );
  trafficLightSetDuration(RED, durations[RED]);
 80007a8:	4b14      	ldr	r3, [pc, #80]	; (80007fc <main+0x84>)
 80007aa:	881b      	ldrh	r3, [r3, #0]
 80007ac:	4619      	mov	r1, r3
 80007ae:	2000      	movs	r0, #0
 80007b0:	f000 fa9e 	bl	8000cf0 <trafficLightSetDuration>
  trafficLightSetDuration(GREEN, durations[GREEN]);
 80007b4:	4b11      	ldr	r3, [pc, #68]	; (80007fc <main+0x84>)
 80007b6:	889b      	ldrh	r3, [r3, #4]
 80007b8:	4619      	mov	r1, r3
 80007ba:	2002      	movs	r0, #2
 80007bc:	f000 fa98 	bl	8000cf0 <trafficLightSetDuration>
  trafficLightSetDuration(YELLOW, durations[YELLOW]);
 80007c0:	4b0e      	ldr	r3, [pc, #56]	; (80007fc <main+0x84>)
 80007c2:	885b      	ldrh	r3, [r3, #2]
 80007c4:	4619      	mov	r1, r3
 80007c6:	2001      	movs	r0, #1
 80007c8:	f000 fa92 	bl	8000cf0 <trafficLightSetDuration>
  buttonInit(nBtn_GPIO_Port, nBtn_Pin);
 80007cc:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80007d0:	480b      	ldr	r0, [pc, #44]	; (8000800 <main+0x88>)
 80007d2:	f000 fc33 	bl	800103c <buttonInit>
  buttonSetOnClick(&onButtonClick);
 80007d6:	480b      	ldr	r0, [pc, #44]	; (8000804 <main+0x8c>)
 80007d8:	f000 fc4c 	bl	8001074 <buttonSetOnClick>
  trafficLightStart();
 80007dc:	f000 fb72 	bl	8000ec4 <trafficLightStart>
  uart_buffersInit();
 80007e0:	f000 fdb4 	bl	800134c <uart_buffersInit>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80007e4:	b672      	cpsid	i
}
 80007e6:	bf00      	nop
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)  {
	  recieve();
 80007e8:	f000 fdc4 	bl	8001374 <recieve>
	  trafficLightUpdate();
 80007ec:	f000 faa6 	bl	8000d3c <trafficLightUpdate>
	  buttonUpdateState();
 80007f0:	f000 fc66 	bl	80010c0 <buttonUpdateState>
	  recieve();
 80007f4:	e7f8      	b.n	80007e8 <main+0x70>
 80007f6:	bf00      	nop
 80007f8:	40020c00 	.word	0x40020c00
 80007fc:	20000000 	.word	0x20000000
 8000800:	40020800 	.word	0x40020800
 8000804:	080008c9 	.word	0x080008c9

08000808 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000808:	b580      	push	{r7, lr}
 800080a:	b094      	sub	sp, #80	; 0x50
 800080c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800080e:	f107 0320 	add.w	r3, r7, #32
 8000812:	2230      	movs	r2, #48	; 0x30
 8000814:	2100      	movs	r1, #0
 8000816:	4618      	mov	r0, r3
 8000818:	f003 f87c 	bl	8003914 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800081c:	f107 030c 	add.w	r3, r7, #12
 8000820:	2200      	movs	r2, #0
 8000822:	601a      	str	r2, [r3, #0]
 8000824:	605a      	str	r2, [r3, #4]
 8000826:	609a      	str	r2, [r3, #8]
 8000828:	60da      	str	r2, [r3, #12]
 800082a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800082c:	2300      	movs	r3, #0
 800082e:	60bb      	str	r3, [r7, #8]
 8000830:	4b23      	ldr	r3, [pc, #140]	; (80008c0 <SystemClock_Config+0xb8>)
 8000832:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000834:	4a22      	ldr	r2, [pc, #136]	; (80008c0 <SystemClock_Config+0xb8>)
 8000836:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800083a:	6413      	str	r3, [r2, #64]	; 0x40
 800083c:	4b20      	ldr	r3, [pc, #128]	; (80008c0 <SystemClock_Config+0xb8>)
 800083e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000840:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000844:	60bb      	str	r3, [r7, #8]
 8000846:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000848:	2300      	movs	r3, #0
 800084a:	607b      	str	r3, [r7, #4]
 800084c:	4b1d      	ldr	r3, [pc, #116]	; (80008c4 <SystemClock_Config+0xbc>)
 800084e:	681b      	ldr	r3, [r3, #0]
 8000850:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000854:	4a1b      	ldr	r2, [pc, #108]	; (80008c4 <SystemClock_Config+0xbc>)
 8000856:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800085a:	6013      	str	r3, [r2, #0]
 800085c:	4b19      	ldr	r3, [pc, #100]	; (80008c4 <SystemClock_Config+0xbc>)
 800085e:	681b      	ldr	r3, [r3, #0]
 8000860:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000864:	607b      	str	r3, [r7, #4]
 8000866:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000868:	2302      	movs	r3, #2
 800086a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800086c:	2301      	movs	r3, #1
 800086e:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000870:	2310      	movs	r3, #16
 8000872:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000874:	2300      	movs	r3, #0
 8000876:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000878:	f107 0320 	add.w	r3, r7, #32
 800087c:	4618      	mov	r0, r3
 800087e:	f001 fa59 	bl	8001d34 <HAL_RCC_OscConfig>
 8000882:	4603      	mov	r3, r0
 8000884:	2b00      	cmp	r3, #0
 8000886:	d001      	beq.n	800088c <SystemClock_Config+0x84>
  {
    Error_Handler();
 8000888:	f000 f836 	bl	80008f8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800088c:	230f      	movs	r3, #15
 800088e:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000890:	2300      	movs	r3, #0
 8000892:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000894:	2300      	movs	r3, #0
 8000896:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000898:	2300      	movs	r3, #0
 800089a:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800089c:	2300      	movs	r3, #0
 800089e:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80008a0:	f107 030c 	add.w	r3, r7, #12
 80008a4:	2100      	movs	r1, #0
 80008a6:	4618      	mov	r0, r3
 80008a8:	f001 fcbc 	bl	8002224 <HAL_RCC_ClockConfig>
 80008ac:	4603      	mov	r3, r0
 80008ae:	2b00      	cmp	r3, #0
 80008b0:	d001      	beq.n	80008b6 <SystemClock_Config+0xae>
  {
    Error_Handler();
 80008b2:	f000 f821 	bl	80008f8 <Error_Handler>
  }
}
 80008b6:	bf00      	nop
 80008b8:	3750      	adds	r7, #80	; 0x50
 80008ba:	46bd      	mov	sp, r7
 80008bc:	bd80      	pop	{r7, pc}
 80008be:	bf00      	nop
 80008c0:	40023800 	.word	0x40023800
 80008c4:	40007000 	.word	0x40007000

080008c8 <onButtonClick>:

/* USER CODE BEGIN 4 */
static void onButtonClick() {
 80008c8:	b580      	push	{r7, lr}
 80008ca:	af00      	add	r7, sp, #0
	if (isButtonAllowed()) {
 80008cc:	f000 fb0a 	bl	8000ee4 <isButtonAllowed>
 80008d0:	4603      	mov	r3, r0
 80008d2:	2b00      	cmp	r3, #0
 80008d4:	d00b      	beq.n	80008ee <onButtonClick+0x26>
		durations[RED] >>= 2;
 80008d6:	4b07      	ldr	r3, [pc, #28]	; (80008f4 <onButtonClick+0x2c>)
 80008d8:	881b      	ldrh	r3, [r3, #0]
 80008da:	089b      	lsrs	r3, r3, #2
 80008dc:	b29a      	uxth	r2, r3
 80008de:	4b05      	ldr	r3, [pc, #20]	; (80008f4 <onButtonClick+0x2c>)
 80008e0:	801a      	strh	r2, [r3, #0]
		trafficLightSetDuration(RED, durations[RED]);
 80008e2:	4b04      	ldr	r3, [pc, #16]	; (80008f4 <onButtonClick+0x2c>)
 80008e4:	881b      	ldrh	r3, [r3, #0]
 80008e6:	4619      	mov	r1, r3
 80008e8:	2000      	movs	r0, #0
 80008ea:	f000 fa01 	bl	8000cf0 <trafficLightSetDuration>
	}
}
 80008ee:	bf00      	nop
 80008f0:	bd80      	pop	{r7, pc}
 80008f2:	bf00      	nop
 80008f4:	20000000 	.word	0x20000000

080008f8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80008f8:	b480      	push	{r7}
 80008fa:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 80008fc:	b672      	cpsid	i
}
 80008fe:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000900:	e7fe      	b.n	8000900 <Error_Handler+0x8>
	...

08000904 <check>:
int setModeFlag = 0;
int setTimeoutFlag = 0;

int timeout;

void check(struct buffer* buffer) {
 8000904:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8000908:	b095      	sub	sp, #84	; 0x54
 800090a:	af02      	add	r7, sp, #8
 800090c:	6078      	str	r0, [r7, #4]
 800090e:	466b      	mov	r3, sp
 8000910:	461e      	mov	r6, r3
	int8_t n = buffer_elements(buffer);
 8000912:	6878      	ldr	r0, [r7, #4]
 8000914:	f7ff fe97 	bl	8000646 <buffer_elements>
 8000918:	4603      	mov	r3, r0
 800091a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
	if (n <= 0) return;
 800091e:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 8000922:	2b00      	cmp	r3, #0
 8000924:	f340 8100 	ble.w	8000b28 <check+0x224>

	if(n > 20) {
 8000928:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 800092c:	2b14      	cmp	r3, #20
 800092e:	dd06      	ble.n	800093e <check+0x3a>
	    buffer_clear(buffer);
 8000930:	6878      	ldr	r0, [r7, #4]
 8000932:	f7ff fe78 	bl	8000626 <buffer_clear>
	    transmit("ERROR");
 8000936:	4880      	ldr	r0, [pc, #512]	; (8000b38 <check+0x234>)
 8000938:	f000 fd44 	bl	80013c4 <transmit>
	    return;
 800093c:	e0f7      	b.n	8000b2e <check+0x22a>
	}

	char buf_part[n];
 800093e:	f997 1047 	ldrsb.w	r1, [r7, #71]	; 0x47
 8000942:	460b      	mov	r3, r1
 8000944:	3b01      	subs	r3, #1
 8000946:	643b      	str	r3, [r7, #64]	; 0x40
 8000948:	460a      	mov	r2, r1
 800094a:	2300      	movs	r3, #0
 800094c:	4690      	mov	r8, r2
 800094e:	4699      	mov	r9, r3
 8000950:	f04f 0200 	mov.w	r2, #0
 8000954:	f04f 0300 	mov.w	r3, #0
 8000958:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800095c:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8000960:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8000964:	460a      	mov	r2, r1
 8000966:	2300      	movs	r3, #0
 8000968:	4614      	mov	r4, r2
 800096a:	461d      	mov	r5, r3
 800096c:	f04f 0200 	mov.w	r2, #0
 8000970:	f04f 0300 	mov.w	r3, #0
 8000974:	00eb      	lsls	r3, r5, #3
 8000976:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800097a:	00e2      	lsls	r2, r4, #3
 800097c:	460b      	mov	r3, r1
 800097e:	3307      	adds	r3, #7
 8000980:	08db      	lsrs	r3, r3, #3
 8000982:	00db      	lsls	r3, r3, #3
 8000984:	ebad 0d03 	sub.w	sp, sp, r3
 8000988:	ab02      	add	r3, sp, #8
 800098a:	3300      	adds	r3, #0
 800098c:	63fb      	str	r3, [r7, #60]	; 0x3c
	memcpy(buf_part, buffer->data, n);
 800098e:	687b      	ldr	r3, [r7, #4]
 8000990:	681b      	ldr	r3, [r3, #0]
 8000992:	f997 2047 	ldrsb.w	r2, [r7, #71]	; 0x47
 8000996:	4619      	mov	r1, r3
 8000998:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800099a:	f002 ffad 	bl	80038f8 <memcpy>


	if (setModeFlag == 1) {
 800099e:	4b67      	ldr	r3, [pc, #412]	; (8000b3c <check+0x238>)
 80009a0:	681b      	ldr	r3, [r3, #0]
 80009a2:	2b01      	cmp	r3, #1
 80009a4:	d125      	bne.n	80009f2 <check+0xee>
		if (strcmp(buf_part, "1") == 0) {
 80009a6:	4966      	ldr	r1, [pc, #408]	; (8000b40 <check+0x23c>)
 80009a8:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 80009aa:	f7ff fc21 	bl	80001f0 <strcmp>
 80009ae:	4603      	mov	r3, r0
 80009b0:	2b00      	cmp	r3, #0
 80009b2:	d106      	bne.n	80009c2 <check+0xbe>
			mode = 1;
 80009b4:	4b63      	ldr	r3, [pc, #396]	; (8000b44 <check+0x240>)
 80009b6:	2201      	movs	r2, #1
 80009b8:	601a      	str	r2, [r3, #0]
			transmit("OK");
 80009ba:	4863      	ldr	r0, [pc, #396]	; (8000b48 <check+0x244>)
 80009bc:	f000 fd02 	bl	80013c4 <transmit>
 80009c0:	e010      	b.n	80009e4 <check+0xe0>
		} else if (strcmp(buf_part, "2") == 0) {
 80009c2:	4962      	ldr	r1, [pc, #392]	; (8000b4c <check+0x248>)
 80009c4:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 80009c6:	f7ff fc13 	bl	80001f0 <strcmp>
 80009ca:	4603      	mov	r3, r0
 80009cc:	2b00      	cmp	r3, #0
 80009ce:	d106      	bne.n	80009de <check+0xda>
			mode = 2;
 80009d0:	4b5c      	ldr	r3, [pc, #368]	; (8000b44 <check+0x240>)
 80009d2:	2202      	movs	r2, #2
 80009d4:	601a      	str	r2, [r3, #0]
			transmit("OK");
 80009d6:	485c      	ldr	r0, [pc, #368]	; (8000b48 <check+0x244>)
 80009d8:	f000 fcf4 	bl	80013c4 <transmit>
 80009dc:	e002      	b.n	80009e4 <check+0xe0>
		} else {
			transmit("ERROR");
 80009de:	4856      	ldr	r0, [pc, #344]	; (8000b38 <check+0x234>)
 80009e0:	f000 fcf0 	bl	80013c4 <transmit>
		}
		buffer_clear(buffer);
 80009e4:	6878      	ldr	r0, [r7, #4]
 80009e6:	f7ff fe1e 	bl	8000626 <buffer_clear>
		setModeFlag = 0;
 80009ea:	4b54      	ldr	r3, [pc, #336]	; (8000b3c <check+0x238>)
 80009ec:	2200      	movs	r2, #0
 80009ee:	601a      	str	r2, [r3, #0]
		return;
 80009f0:	e09d      	b.n	8000b2e <check+0x22a>
	}
	if (setTimeoutFlag != 0) {
 80009f2:	4b57      	ldr	r3, [pc, #348]	; (8000b50 <check+0x24c>)
 80009f4:	681b      	ldr	r3, [r3, #0]
 80009f6:	2b00      	cmp	r3, #0
 80009f8:	d027      	beq.n	8000a4a <check+0x146>
		setTimeoutFlag--;
 80009fa:	4b55      	ldr	r3, [pc, #340]	; (8000b50 <check+0x24c>)
 80009fc:	681b      	ldr	r3, [r3, #0]
 80009fe:	3b01      	subs	r3, #1
 8000a00:	4a53      	ldr	r2, [pc, #332]	; (8000b50 <check+0x24c>)
 8000a02:	6013      	str	r3, [r2, #0]
		if (setTimeoutFlag == 0) {
 8000a04:	4b52      	ldr	r3, [pc, #328]	; (8000b50 <check+0x24c>)
 8000a06:	681b      	ldr	r3, [r3, #0]
 8000a08:	2b00      	cmp	r3, #0
 8000a0a:	f040 808f 	bne.w	8000b2c <check+0x228>
			timeout = atoi(buf_part);
 8000a0e:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8000a10:	f002 ff3c 	bl	800388c <atoi>
 8000a14:	4603      	mov	r3, r0
 8000a16:	4a4f      	ldr	r2, [pc, #316]	; (8000b54 <check+0x250>)
 8000a18:	6013      	str	r3, [r2, #0]
			if (timeout > 0) {
 8000a1a:	4b4e      	ldr	r3, [pc, #312]	; (8000b54 <check+0x250>)
 8000a1c:	681b      	ldr	r3, [r3, #0]
 8000a1e:	2b00      	cmp	r3, #0
 8000a20:	dd0c      	ble.n	8000a3c <check+0x138>
				setDurationRED(timeout*1000);
 8000a22:	4b4c      	ldr	r3, [pc, #304]	; (8000b54 <check+0x250>)
 8000a24:	681b      	ldr	r3, [r3, #0]
 8000a26:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000a2a:	fb02 f303 	mul.w	r3, r2, r3
 8000a2e:	4618      	mov	r0, r3
 8000a30:	f000 fa7a 	bl	8000f28 <setDurationRED>
				transmit("OK");
 8000a34:	4844      	ldr	r0, [pc, #272]	; (8000b48 <check+0x244>)
 8000a36:	f000 fcc5 	bl	80013c4 <transmit>
 8000a3a:	e002      	b.n	8000a42 <check+0x13e>
			} else {
				transmit("ERROR");
 8000a3c:	483e      	ldr	r0, [pc, #248]	; (8000b38 <check+0x234>)
 8000a3e:	f000 fcc1 	bl	80013c4 <transmit>
			}
			buffer_clear(buffer);
 8000a42:	6878      	ldr	r0, [r7, #4]
 8000a44:	f7ff fdef 	bl	8000626 <buffer_clear>
		}
		return;
 8000a48:	e070      	b.n	8000b2c <check+0x228>
	}

	if (strcmp(buf_part, "?") == 0) {
 8000a4a:	4943      	ldr	r1, [pc, #268]	; (8000b58 <check+0x254>)
 8000a4c:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8000a4e:	f7ff fbcf 	bl	80001f0 <strcmp>
 8000a52:	4603      	mov	r3, r0
 8000a54:	2b00      	cmp	r3, #0
 8000a56:	d12a      	bne.n	8000aae <check+0x1aa>
		char state_str[50];
		char interrupt = (interruptsEnabled == 1) ? 'I' : 'P';
 8000a58:	4b40      	ldr	r3, [pc, #256]	; (8000b5c <check+0x258>)
 8000a5a:	681b      	ldr	r3, [r3, #0]
 8000a5c:	2b01      	cmp	r3, #1
 8000a5e:	d101      	bne.n	8000a64 <check+0x160>
 8000a60:	2349      	movs	r3, #73	; 0x49
 8000a62:	e000      	b.n	8000a66 <check+0x162>
 8000a64:	2350      	movs	r3, #80	; 0x50
 8000a66:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
		sprintf(state_str, "\n%s\n\rmode %d\n\rtimeout %d\n\r%c\n\r",
				color_names[getCurrentColor()],
 8000a6a:	f000 fa51 	bl	8000f10 <getCurrentColor>
 8000a6e:	4603      	mov	r3, r0
 8000a70:	461a      	mov	r2, r3
		sprintf(state_str, "\n%s\n\rmode %d\n\rtimeout %d\n\r%c\n\r",
 8000a72:	4b3b      	ldr	r3, [pc, #236]	; (8000b60 <check+0x25c>)
 8000a74:	f853 4022 	ldr.w	r4, [r3, r2, lsl #2]
 8000a78:	4b32      	ldr	r3, [pc, #200]	; (8000b44 <check+0x240>)
 8000a7a:	681d      	ldr	r5, [r3, #0]
				mode,
				(int) trafficLightGetDuration(RED),
 8000a7c:	2000      	movs	r0, #0
 8000a7e:	f000 f94b 	bl	8000d18 <trafficLightGetDuration>
 8000a82:	4603      	mov	r3, r0
		sprintf(state_str, "\n%s\n\rmode %d\n\rtimeout %d\n\r%c\n\r",
 8000a84:	461a      	mov	r2, r3
 8000a86:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8000a8a:	f107 0008 	add.w	r0, r7, #8
 8000a8e:	9301      	str	r3, [sp, #4]
 8000a90:	9200      	str	r2, [sp, #0]
 8000a92:	462b      	mov	r3, r5
 8000a94:	4622      	mov	r2, r4
 8000a96:	4933      	ldr	r1, [pc, #204]	; (8000b64 <check+0x260>)
 8000a98:	f003 f834 	bl	8003b04 <siprintf>
				interrupt);
		transmit(state_str);
 8000a9c:	f107 0308 	add.w	r3, r7, #8
 8000aa0:	4618      	mov	r0, r3
 8000aa2:	f000 fc8f 	bl	80013c4 <transmit>
		buffer_clear(buffer);
 8000aa6:	6878      	ldr	r0, [r7, #4]
 8000aa8:	f7ff fdbd 	bl	8000626 <buffer_clear>
 8000aac:	e03a      	b.n	8000b24 <check+0x220>
	} else if (strcmp(buf_part, "set mode ") == 0) {
 8000aae:	492e      	ldr	r1, [pc, #184]	; (8000b68 <check+0x264>)
 8000ab0:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8000ab2:	f7ff fb9d 	bl	80001f0 <strcmp>
 8000ab6:	4603      	mov	r3, r0
 8000ab8:	2b00      	cmp	r3, #0
 8000aba:	d106      	bne.n	8000aca <check+0x1c6>
		setModeFlag = 1;
 8000abc:	4b1f      	ldr	r3, [pc, #124]	; (8000b3c <check+0x238>)
 8000abe:	2201      	movs	r2, #1
 8000ac0:	601a      	str	r2, [r3, #0]
		buffer_clear(buffer);
 8000ac2:	6878      	ldr	r0, [r7, #4]
 8000ac4:	f7ff fdaf 	bl	8000626 <buffer_clear>
 8000ac8:	e02c      	b.n	8000b24 <check+0x220>
	} else if (strcmp(buf_part, "set timeout ") == 0) {
 8000aca:	4928      	ldr	r1, [pc, #160]	; (8000b6c <check+0x268>)
 8000acc:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8000ace:	f7ff fb8f 	bl	80001f0 <strcmp>
 8000ad2:	4603      	mov	r3, r0
 8000ad4:	2b00      	cmp	r3, #0
 8000ad6:	d106      	bne.n	8000ae6 <check+0x1e2>
		setTimeoutFlag = 2;
 8000ad8:	4b1d      	ldr	r3, [pc, #116]	; (8000b50 <check+0x24c>)
 8000ada:	2202      	movs	r2, #2
 8000adc:	601a      	str	r2, [r3, #0]
		buffer_clear(buffer);
 8000ade:	6878      	ldr	r0, [r7, #4]
 8000ae0:	f7ff fda1 	bl	8000626 <buffer_clear>
 8000ae4:	e01e      	b.n	8000b24 <check+0x220>
	} else if (strcmp(buf_part, "set interrupts on") == 0) {
 8000ae6:	4922      	ldr	r1, [pc, #136]	; (8000b70 <check+0x26c>)
 8000ae8:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8000aea:	f7ff fb81 	bl	80001f0 <strcmp>
 8000aee:	4603      	mov	r3, r0
 8000af0:	2b00      	cmp	r3, #0
 8000af2:	d108      	bne.n	8000b06 <check+0x202>
  __ASM volatile ("cpsie i" : : : "memory");
 8000af4:	b662      	cpsie	i
}
 8000af6:	bf00      	nop
		__enable_irq();
		interruptsEnabled = 1;
 8000af8:	4b18      	ldr	r3, [pc, #96]	; (8000b5c <check+0x258>)
 8000afa:	2201      	movs	r2, #1
 8000afc:	601a      	str	r2, [r3, #0]
		buffer_clear(buffer);
 8000afe:	6878      	ldr	r0, [r7, #4]
 8000b00:	f7ff fd91 	bl	8000626 <buffer_clear>
 8000b04:	e00e      	b.n	8000b24 <check+0x220>
	} else if (strcmp(buf_part, "set interrupts off") == 0) {
 8000b06:	491b      	ldr	r1, [pc, #108]	; (8000b74 <check+0x270>)
 8000b08:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8000b0a:	f7ff fb71 	bl	80001f0 <strcmp>
 8000b0e:	4603      	mov	r3, r0
 8000b10:	2b00      	cmp	r3, #0
 8000b12:	d107      	bne.n	8000b24 <check+0x220>
  __ASM volatile ("cpsid i" : : : "memory");
 8000b14:	b672      	cpsid	i
}
 8000b16:	bf00      	nop
		__disable_irq();
		interruptsEnabled = 0;
 8000b18:	4b10      	ldr	r3, [pc, #64]	; (8000b5c <check+0x258>)
 8000b1a:	2200      	movs	r2, #0
 8000b1c:	601a      	str	r2, [r3, #0]
		buffer_clear(buffer);
 8000b1e:	6878      	ldr	r0, [r7, #4]
 8000b20:	f7ff fd81 	bl	8000626 <buffer_clear>
 8000b24:	46b5      	mov	sp, r6
 8000b26:	e003      	b.n	8000b30 <check+0x22c>
	if (n <= 0) return;
 8000b28:	bf00      	nop
 8000b2a:	e000      	b.n	8000b2e <check+0x22a>
		return;
 8000b2c:	bf00      	nop
 8000b2e:	46b5      	mov	sp, r6
	}
}
 8000b30:	374c      	adds	r7, #76	; 0x4c
 8000b32:	46bd      	mov	sp, r7
 8000b34:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8000b38:	08004348 	.word	0x08004348
 8000b3c:	200000b4 	.word	0x200000b4
 8000b40:	08004350 	.word	0x08004350
 8000b44:	20000014 	.word	0x20000014
 8000b48:	08004354 	.word	0x08004354
 8000b4c:	08004358 	.word	0x08004358
 8000b50:	200000b8 	.word	0x200000b8
 8000b54:	200000bc 	.word	0x200000bc
 8000b58:	0800435c 	.word	0x0800435c
 8000b5c:	200000b0 	.word	0x200000b0
 8000b60:	20000008 	.word	0x20000008
 8000b64:	08004360 	.word	0x08004360
 8000b68:	08004380 	.word	0x08004380
 8000b6c:	0800438c 	.word	0x0800438c
 8000b70:	0800439c 	.word	0x0800439c
 8000b74:	080043b0 	.word	0x080043b0

08000b78 <getMode>:



int getMode() {
 8000b78:	b480      	push	{r7}
 8000b7a:	af00      	add	r7, sp, #0
	return mode;
 8000b7c:	4b03      	ldr	r3, [pc, #12]	; (8000b8c <getMode+0x14>)
 8000b7e:	681b      	ldr	r3, [r3, #0]
}
 8000b80:	4618      	mov	r0, r3
 8000b82:	46bd      	mov	sp, r7
 8000b84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b88:	4770      	bx	lr
 8000b8a:	bf00      	nop
 8000b8c:	20000014 	.word	0x20000014

08000b90 <getInterruptsEnabled>:
int getInterruptsEnabled() {
 8000b90:	b480      	push	{r7}
 8000b92:	af00      	add	r7, sp, #0
	return interruptsEnabled;
 8000b94:	4b03      	ldr	r3, [pc, #12]	; (8000ba4 <getInterruptsEnabled+0x14>)
 8000b96:	681b      	ldr	r3, [r3, #0]
}
 8000b98:	4618      	mov	r0, r3
 8000b9a:	46bd      	mov	sp, r7
 8000b9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ba0:	4770      	bx	lr
 8000ba2:	bf00      	nop
 8000ba4:	200000b0 	.word	0x200000b0

08000ba8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000ba8:	b480      	push	{r7}
 8000baa:	b083      	sub	sp, #12
 8000bac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000bae:	2300      	movs	r3, #0
 8000bb0:	607b      	str	r3, [r7, #4]
 8000bb2:	4b10      	ldr	r3, [pc, #64]	; (8000bf4 <HAL_MspInit+0x4c>)
 8000bb4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000bb6:	4a0f      	ldr	r2, [pc, #60]	; (8000bf4 <HAL_MspInit+0x4c>)
 8000bb8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000bbc:	6453      	str	r3, [r2, #68]	; 0x44
 8000bbe:	4b0d      	ldr	r3, [pc, #52]	; (8000bf4 <HAL_MspInit+0x4c>)
 8000bc0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000bc2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000bc6:	607b      	str	r3, [r7, #4]
 8000bc8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000bca:	2300      	movs	r3, #0
 8000bcc:	603b      	str	r3, [r7, #0]
 8000bce:	4b09      	ldr	r3, [pc, #36]	; (8000bf4 <HAL_MspInit+0x4c>)
 8000bd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bd2:	4a08      	ldr	r2, [pc, #32]	; (8000bf4 <HAL_MspInit+0x4c>)
 8000bd4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000bd8:	6413      	str	r3, [r2, #64]	; 0x40
 8000bda:	4b06      	ldr	r3, [pc, #24]	; (8000bf4 <HAL_MspInit+0x4c>)
 8000bdc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bde:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000be2:	603b      	str	r3, [r7, #0]
 8000be4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000be6:	bf00      	nop
 8000be8:	370c      	adds	r7, #12
 8000bea:	46bd      	mov	sp, r7
 8000bec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bf0:	4770      	bx	lr
 8000bf2:	bf00      	nop
 8000bf4:	40023800 	.word	0x40023800

08000bf8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000bf8:	b480      	push	{r7}
 8000bfa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000bfc:	e7fe      	b.n	8000bfc <NMI_Handler+0x4>

08000bfe <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000bfe:	b480      	push	{r7}
 8000c00:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000c02:	e7fe      	b.n	8000c02 <HardFault_Handler+0x4>

08000c04 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000c04:	b480      	push	{r7}
 8000c06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000c08:	e7fe      	b.n	8000c08 <MemManage_Handler+0x4>

08000c0a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000c0a:	b480      	push	{r7}
 8000c0c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000c0e:	e7fe      	b.n	8000c0e <BusFault_Handler+0x4>

08000c10 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000c10:	b480      	push	{r7}
 8000c12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000c14:	e7fe      	b.n	8000c14 <UsageFault_Handler+0x4>

08000c16 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000c16:	b480      	push	{r7}
 8000c18:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000c1a:	bf00      	nop
 8000c1c:	46bd      	mov	sp, r7
 8000c1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c22:	4770      	bx	lr

08000c24 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000c24:	b480      	push	{r7}
 8000c26:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000c28:	bf00      	nop
 8000c2a:	46bd      	mov	sp, r7
 8000c2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c30:	4770      	bx	lr

08000c32 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000c32:	b480      	push	{r7}
 8000c34:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000c36:	bf00      	nop
 8000c38:	46bd      	mov	sp, r7
 8000c3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c3e:	4770      	bx	lr

08000c40 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000c40:	b580      	push	{r7, lr}
 8000c42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000c44:	f000 fcd4 	bl	80015f0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000c48:	bf00      	nop
 8000c4a:	bd80      	pop	{r7, pc}

08000c4c <USART6_IRQHandler>:

/**
  * @brief This function handles USART6 global interrupt.
  */
void USART6_IRQHandler(void)
{
 8000c4c:	b580      	push	{r7, lr}
 8000c4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART6_IRQn 0 */

  /* USER CODE END USART6_IRQn 0 */
  HAL_UART_IRQHandler(&huart6);
 8000c50:	4802      	ldr	r0, [pc, #8]	; (8000c5c <USART6_IRQHandler+0x10>)
 8000c52:	f001 febd 	bl	80029d0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART6_IRQn 1 */

  /* USER CODE END USART6_IRQn 1 */
}
 8000c56:	bf00      	nop
 8000c58:	bd80      	pop	{r7, pc}
 8000c5a:	bf00      	nop
 8000c5c:	200000d4 	.word	0x200000d4

08000c60 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000c60:	b580      	push	{r7, lr}
 8000c62:	b086      	sub	sp, #24
 8000c64:	af00      	add	r7, sp, #0
 8000c66:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000c68:	4a14      	ldr	r2, [pc, #80]	; (8000cbc <_sbrk+0x5c>)
 8000c6a:	4b15      	ldr	r3, [pc, #84]	; (8000cc0 <_sbrk+0x60>)
 8000c6c:	1ad3      	subs	r3, r2, r3
 8000c6e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000c70:	697b      	ldr	r3, [r7, #20]
 8000c72:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000c74:	4b13      	ldr	r3, [pc, #76]	; (8000cc4 <_sbrk+0x64>)
 8000c76:	681b      	ldr	r3, [r3, #0]
 8000c78:	2b00      	cmp	r3, #0
 8000c7a:	d102      	bne.n	8000c82 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000c7c:	4b11      	ldr	r3, [pc, #68]	; (8000cc4 <_sbrk+0x64>)
 8000c7e:	4a12      	ldr	r2, [pc, #72]	; (8000cc8 <_sbrk+0x68>)
 8000c80:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000c82:	4b10      	ldr	r3, [pc, #64]	; (8000cc4 <_sbrk+0x64>)
 8000c84:	681a      	ldr	r2, [r3, #0]
 8000c86:	687b      	ldr	r3, [r7, #4]
 8000c88:	4413      	add	r3, r2
 8000c8a:	693a      	ldr	r2, [r7, #16]
 8000c8c:	429a      	cmp	r2, r3
 8000c8e:	d207      	bcs.n	8000ca0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000c90:	f002 fe00 	bl	8003894 <__errno>
 8000c94:	4603      	mov	r3, r0
 8000c96:	220c      	movs	r2, #12
 8000c98:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000c9a:	f04f 33ff 	mov.w	r3, #4294967295
 8000c9e:	e009      	b.n	8000cb4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000ca0:	4b08      	ldr	r3, [pc, #32]	; (8000cc4 <_sbrk+0x64>)
 8000ca2:	681b      	ldr	r3, [r3, #0]
 8000ca4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000ca6:	4b07      	ldr	r3, [pc, #28]	; (8000cc4 <_sbrk+0x64>)
 8000ca8:	681a      	ldr	r2, [r3, #0]
 8000caa:	687b      	ldr	r3, [r7, #4]
 8000cac:	4413      	add	r3, r2
 8000cae:	4a05      	ldr	r2, [pc, #20]	; (8000cc4 <_sbrk+0x64>)
 8000cb0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000cb2:	68fb      	ldr	r3, [r7, #12]
}
 8000cb4:	4618      	mov	r0, r3
 8000cb6:	3718      	adds	r7, #24
 8000cb8:	46bd      	mov	sp, r7
 8000cba:	bd80      	pop	{r7, pc}
 8000cbc:	20030000 	.word	0x20030000
 8000cc0:	00000400 	.word	0x00000400
 8000cc4:	200000c0 	.word	0x200000c0
 8000cc8:	20000350 	.word	0x20000350

08000ccc <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000ccc:	b480      	push	{r7}
 8000cce:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000cd0:	4b06      	ldr	r3, [pc, #24]	; (8000cec <SystemInit+0x20>)
 8000cd2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000cd6:	4a05      	ldr	r2, [pc, #20]	; (8000cec <SystemInit+0x20>)
 8000cd8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000cdc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000ce0:	bf00      	nop
 8000ce2:	46bd      	mov	sp, r7
 8000ce4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ce8:	4770      	bx	lr
 8000cea:	bf00      	nop
 8000cec:	e000ed00 	.word	0xe000ed00

08000cf0 <trafficLightSetDuration>:
static Color currentColor;
static Color nextColor = RED;
static bool isCurrentFlashing = false;
static bool isNextFlashing = false;

void trafficLightSetDuration(Color color, uint32_t duration) {
 8000cf0:	b480      	push	{r7}
 8000cf2:	b083      	sub	sp, #12
 8000cf4:	af00      	add	r7, sp, #0
 8000cf6:	4603      	mov	r3, r0
 8000cf8:	6039      	str	r1, [r7, #0]
 8000cfa:	71fb      	strb	r3, [r7, #7]
    durations[color] = duration;
 8000cfc:	79fb      	ldrb	r3, [r7, #7]
 8000cfe:	683a      	ldr	r2, [r7, #0]
 8000d00:	b291      	uxth	r1, r2
 8000d02:	4a04      	ldr	r2, [pc, #16]	; (8000d14 <trafficLightSetDuration+0x24>)
 8000d04:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
}
 8000d08:	bf00      	nop
 8000d0a:	370c      	adds	r7, #12
 8000d0c:	46bd      	mov	sp, r7
 8000d0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d12:	4770      	bx	lr
 8000d14:	20000020 	.word	0x20000020

08000d18 <trafficLightGetDuration>:

uint32_t trafficLightGetDuration(Color color) {
 8000d18:	b480      	push	{r7}
 8000d1a:	b083      	sub	sp, #12
 8000d1c:	af00      	add	r7, sp, #0
 8000d1e:	4603      	mov	r3, r0
 8000d20:	71fb      	strb	r3, [r7, #7]
    return durations[color];
 8000d22:	79fb      	ldrb	r3, [r7, #7]
 8000d24:	4a04      	ldr	r2, [pc, #16]	; (8000d38 <trafficLightGetDuration+0x20>)
 8000d26:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
}
 8000d2a:	4618      	mov	r0, r3
 8000d2c:	370c      	adds	r7, #12
 8000d2e:	46bd      	mov	sp, r7
 8000d30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d34:	4770      	bx	lr
 8000d36:	bf00      	nop
 8000d38:	20000020 	.word	0x20000020

08000d3c <trafficLightUpdate>:

void trafficLightUpdate() {
 8000d3c:	b580      	push	{r7, lr}
 8000d3e:	af00      	add	r7, sp, #0
    if (ledFinishedLightning(leds[currentColor])) {
 8000d40:	4b43      	ldr	r3, [pc, #268]	; (8000e50 <trafficLightUpdate+0x114>)
 8000d42:	781b      	ldrb	r3, [r3, #0]
 8000d44:	461a      	mov	r2, r3
 8000d46:	4b43      	ldr	r3, [pc, #268]	; (8000e54 <trafficLightUpdate+0x118>)
 8000d48:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000d4c:	4618      	mov	r0, r3
 8000d4e:	f000 fab9 	bl	80012c4 <ledFinishedLightning>
 8000d52:	4603      	mov	r3, r0
 8000d54:	2b00      	cmp	r3, #0
 8000d56:	d069      	beq.n	8000e2c <trafficLightUpdate+0xf0>
        currentColor = nextColor;
 8000d58:	4b3f      	ldr	r3, [pc, #252]	; (8000e58 <trafficLightUpdate+0x11c>)
 8000d5a:	781a      	ldrb	r2, [r3, #0]
 8000d5c:	4b3c      	ldr	r3, [pc, #240]	; (8000e50 <trafficLightUpdate+0x114>)
 8000d5e:	701a      	strb	r2, [r3, #0]
        isCurrentFlashing = isNextFlashing;
 8000d60:	4b3e      	ldr	r3, [pc, #248]	; (8000e5c <trafficLightUpdate+0x120>)
 8000d62:	781a      	ldrb	r2, [r3, #0]
 8000d64:	4b3e      	ldr	r3, [pc, #248]	; (8000e60 <trafficLightUpdate+0x124>)
 8000d66:	701a      	strb	r2, [r3, #0]
        switch (nextColor) {
 8000d68:	4b3b      	ldr	r3, [pc, #236]	; (8000e58 <trafficLightUpdate+0x11c>)
 8000d6a:	781b      	ldrb	r3, [r3, #0]
 8000d6c:	2b02      	cmp	r3, #2
 8000d6e:	d012      	beq.n	8000d96 <trafficLightUpdate+0x5a>
 8000d70:	2b02      	cmp	r3, #2
 8000d72:	dc2c      	bgt.n	8000dce <trafficLightUpdate+0x92>
 8000d74:	2b00      	cmp	r3, #0
 8000d76:	d002      	beq.n	8000d7e <trafficLightUpdate+0x42>
 8000d78:	2b01      	cmp	r3, #1
 8000d7a:	d021      	beq.n	8000dc0 <trafficLightUpdate+0x84>
 8000d7c:	e027      	b.n	8000dce <trafficLightUpdate+0x92>
        	case RED:
        		durations[RED] = durationRED;
 8000d7e:	4b39      	ldr	r3, [pc, #228]	; (8000e64 <trafficLightUpdate+0x128>)
 8000d80:	681b      	ldr	r3, [r3, #0]
 8000d82:	b29a      	uxth	r2, r3
 8000d84:	4b38      	ldr	r3, [pc, #224]	; (8000e68 <trafficLightUpdate+0x12c>)
 8000d86:	801a      	strh	r2, [r3, #0]
				nextColor = GREEN;
 8000d88:	4b33      	ldr	r3, [pc, #204]	; (8000e58 <trafficLightUpdate+0x11c>)
 8000d8a:	2202      	movs	r2, #2
 8000d8c:	701a      	strb	r2, [r3, #0]
				isNextFlashing = false;
 8000d8e:	4b33      	ldr	r3, [pc, #204]	; (8000e5c <trafficLightUpdate+0x120>)
 8000d90:	2200      	movs	r2, #0
 8000d92:	701a      	strb	r2, [r3, #0]
				break;
 8000d94:	e01b      	b.n	8000dce <trafficLightUpdate+0x92>
        	case GREEN:
        		if (!isCurrentFlashing) {
 8000d96:	4b32      	ldr	r3, [pc, #200]	; (8000e60 <trafficLightUpdate+0x124>)
 8000d98:	781b      	ldrb	r3, [r3, #0]
 8000d9a:	f083 0301 	eor.w	r3, r3, #1
 8000d9e:	b2db      	uxtb	r3, r3
 8000da0:	2b00      	cmp	r3, #0
 8000da2:	d006      	beq.n	8000db2 <trafficLightUpdate+0x76>
        			isNextFlashing = true;
 8000da4:	4b2d      	ldr	r3, [pc, #180]	; (8000e5c <trafficLightUpdate+0x120>)
 8000da6:	2201      	movs	r2, #1
 8000da8:	701a      	strb	r2, [r3, #0]
        			nextColor = GREEN;
 8000daa:	4b2b      	ldr	r3, [pc, #172]	; (8000e58 <trafficLightUpdate+0x11c>)
 8000dac:	2202      	movs	r2, #2
 8000dae:	701a      	strb	r2, [r3, #0]
        		} else {
        			isNextFlashing = false;
        			nextColor = YELLOW;
        		}
        		break;
 8000db0:	e00d      	b.n	8000dce <trafficLightUpdate+0x92>
        			isNextFlashing = false;
 8000db2:	4b2a      	ldr	r3, [pc, #168]	; (8000e5c <trafficLightUpdate+0x120>)
 8000db4:	2200      	movs	r2, #0
 8000db6:	701a      	strb	r2, [r3, #0]
        			nextColor = YELLOW;
 8000db8:	4b27      	ldr	r3, [pc, #156]	; (8000e58 <trafficLightUpdate+0x11c>)
 8000dba:	2201      	movs	r2, #1
 8000dbc:	701a      	strb	r2, [r3, #0]
        		break;
 8000dbe:	e006      	b.n	8000dce <trafficLightUpdate+0x92>
        	case YELLOW:
				nextColor = RED;
 8000dc0:	4b25      	ldr	r3, [pc, #148]	; (8000e58 <trafficLightUpdate+0x11c>)
 8000dc2:	2200      	movs	r2, #0
 8000dc4:	701a      	strb	r2, [r3, #0]
				isNextFlashing = false;
 8000dc6:	4b25      	ldr	r3, [pc, #148]	; (8000e5c <trafficLightUpdate+0x120>)
 8000dc8:	2200      	movs	r2, #0
 8000dca:	701a      	strb	r2, [r3, #0]
				break;
 8000dcc:	bf00      	nop
        }
        if (!isCurrentFlashing) {
 8000dce:	4b24      	ldr	r3, [pc, #144]	; (8000e60 <trafficLightUpdate+0x124>)
 8000dd0:	781b      	ldrb	r3, [r3, #0]
 8000dd2:	f083 0301 	eor.w	r3, r3, #1
 8000dd6:	b2db      	uxtb	r3, r3
 8000dd8:	2b00      	cmp	r3, #0
 8000dda:	d010      	beq.n	8000dfe <trafficLightUpdate+0xc2>
		    ledSetStateDuration(leds[currentColor], LED_TURN_ON, durations[currentColor]);
 8000ddc:	4b1c      	ldr	r3, [pc, #112]	; (8000e50 <trafficLightUpdate+0x114>)
 8000dde:	781b      	ldrb	r3, [r3, #0]
 8000de0:	461a      	mov	r2, r3
 8000de2:	4b1c      	ldr	r3, [pc, #112]	; (8000e54 <trafficLightUpdate+0x118>)
 8000de4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000de8:	4a19      	ldr	r2, [pc, #100]	; (8000e50 <trafficLightUpdate+0x114>)
 8000dea:	7812      	ldrb	r2, [r2, #0]
 8000dec:	4611      	mov	r1, r2
 8000dee:	4a1e      	ldr	r2, [pc, #120]	; (8000e68 <trafficLightUpdate+0x12c>)
 8000df0:	f832 2011 	ldrh.w	r2, [r2, r1, lsl #1]
 8000df4:	2100      	movs	r1, #0
 8000df6:	4618      	mov	r0, r3
 8000df8:	f000 fa47 	bl	800128a <ledSetStateDuration>
 8000dfc:	e016      	b.n	8000e2c <trafficLightUpdate+0xf0>
	    } else {
		    ledSetPeriod(leds[currentColor], durations[currentColor] >> 2, durations[currentColor]);
 8000dfe:	4b14      	ldr	r3, [pc, #80]	; (8000e50 <trafficLightUpdate+0x114>)
 8000e00:	781b      	ldrb	r3, [r3, #0]
 8000e02:	461a      	mov	r2, r3
 8000e04:	4b13      	ldr	r3, [pc, #76]	; (8000e54 <trafficLightUpdate+0x118>)
 8000e06:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 8000e0a:	4b11      	ldr	r3, [pc, #68]	; (8000e50 <trafficLightUpdate+0x114>)
 8000e0c:	781b      	ldrb	r3, [r3, #0]
 8000e0e:	461a      	mov	r2, r3
 8000e10:	4b15      	ldr	r3, [pc, #84]	; (8000e68 <trafficLightUpdate+0x12c>)
 8000e12:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8000e16:	089b      	lsrs	r3, r3, #2
 8000e18:	b29b      	uxth	r3, r3
 8000e1a:	4a0d      	ldr	r2, [pc, #52]	; (8000e50 <trafficLightUpdate+0x114>)
 8000e1c:	7812      	ldrb	r2, [r2, #0]
 8000e1e:	4611      	mov	r1, r2
 8000e20:	4a11      	ldr	r2, [pc, #68]	; (8000e68 <trafficLightUpdate+0x12c>)
 8000e22:	f832 2011 	ldrh.w	r2, [r2, r1, lsl #1]
 8000e26:	4619      	mov	r1, r3
 8000e28:	f000 fa12 	bl	8001250 <ledSetPeriod>
	    }
    }
    ledUpdateState(leds[RED]);
 8000e2c:	4b09      	ldr	r3, [pc, #36]	; (8000e54 <trafficLightUpdate+0x118>)
 8000e2e:	681b      	ldr	r3, [r3, #0]
 8000e30:	4618      	mov	r0, r3
 8000e32:	f000 f9a6 	bl	8001182 <ledUpdateState>
    ledUpdateState(leds[YELLOW]);
 8000e36:	4b07      	ldr	r3, [pc, #28]	; (8000e54 <trafficLightUpdate+0x118>)
 8000e38:	685b      	ldr	r3, [r3, #4]
 8000e3a:	4618      	mov	r0, r3
 8000e3c:	f000 f9a1 	bl	8001182 <ledUpdateState>
    ledUpdateState(leds[GREEN]);
 8000e40:	4b04      	ldr	r3, [pc, #16]	; (8000e54 <trafficLightUpdate+0x118>)
 8000e42:	689b      	ldr	r3, [r3, #8]
 8000e44:	4618      	mov	r0, r3
 8000e46:	f000 f99c 	bl	8001182 <ledUpdateState>
}
 8000e4a:	bf00      	nop
 8000e4c:	bd80      	pop	{r7, pc}
 8000e4e:	bf00      	nop
 8000e50:	200000d0 	.word	0x200000d0
 8000e54:	200000c4 	.word	0x200000c4
 8000e58:	200000d1 	.word	0x200000d1
 8000e5c:	200000d3 	.word	0x200000d3
 8000e60:	200000d2 	.word	0x200000d2
 8000e64:	2000001c 	.word	0x2000001c
 8000e68:	20000020 	.word	0x20000020

08000e6c <trafficLightInit>:

void trafficLightInit(
		GPIO_TypeDef* red_port, uint16_t red_pin,
		GPIO_TypeDef* yellow_port, uint16_t yellow_pin,
		GPIO_TypeDef* green_port, uint16_t green_pin
) {
 8000e6c:	b580      	push	{r7, lr}
 8000e6e:	b084      	sub	sp, #16
 8000e70:	af00      	add	r7, sp, #0
 8000e72:	60f8      	str	r0, [r7, #12]
 8000e74:	607a      	str	r2, [r7, #4]
 8000e76:	461a      	mov	r2, r3
 8000e78:	460b      	mov	r3, r1
 8000e7a:	817b      	strh	r3, [r7, #10]
 8000e7c:	4613      	mov	r3, r2
 8000e7e:	813b      	strh	r3, [r7, #8]
    leds[RED] = ledInit(LED_TURN_OFF, red_port, red_pin);
 8000e80:	897b      	ldrh	r3, [r7, #10]
 8000e82:	461a      	mov	r2, r3
 8000e84:	68f9      	ldr	r1, [r7, #12]
 8000e86:	2001      	movs	r0, #1
 8000e88:	f000 f952 	bl	8001130 <ledInit>
 8000e8c:	4603      	mov	r3, r0
 8000e8e:	4a0c      	ldr	r2, [pc, #48]	; (8000ec0 <trafficLightInit+0x54>)
 8000e90:	6013      	str	r3, [r2, #0]
    leds[YELLOW] = ledInit(LED_TURN_OFF, yellow_port, yellow_pin);
 8000e92:	893b      	ldrh	r3, [r7, #8]
 8000e94:	461a      	mov	r2, r3
 8000e96:	6879      	ldr	r1, [r7, #4]
 8000e98:	2001      	movs	r0, #1
 8000e9a:	f000 f949 	bl	8001130 <ledInit>
 8000e9e:	4603      	mov	r3, r0
 8000ea0:	4a07      	ldr	r2, [pc, #28]	; (8000ec0 <trafficLightInit+0x54>)
 8000ea2:	6053      	str	r3, [r2, #4]
    leds[GREEN] = ledInit(LED_TURN_OFF, green_port, green_pin);
 8000ea4:	8bbb      	ldrh	r3, [r7, #28]
 8000ea6:	461a      	mov	r2, r3
 8000ea8:	69b9      	ldr	r1, [r7, #24]
 8000eaa:	2001      	movs	r0, #1
 8000eac:	f000 f940 	bl	8001130 <ledInit>
 8000eb0:	4603      	mov	r3, r0
 8000eb2:	4a03      	ldr	r2, [pc, #12]	; (8000ec0 <trafficLightInit+0x54>)
 8000eb4:	6093      	str	r3, [r2, #8]
}
 8000eb6:	bf00      	nop
 8000eb8:	3710      	adds	r7, #16
 8000eba:	46bd      	mov	sp, r7
 8000ebc:	bd80      	pop	{r7, pc}
 8000ebe:	bf00      	nop
 8000ec0:	200000c4 	.word	0x200000c4

08000ec4 <trafficLightStart>:

void trafficLightStart() {
 8000ec4:	b580      	push	{r7, lr}
 8000ec6:	af00      	add	r7, sp, #0
	nextColor = RED;
 8000ec8:	4b04      	ldr	r3, [pc, #16]	; (8000edc <trafficLightStart+0x18>)
 8000eca:	2200      	movs	r2, #0
 8000ecc:	701a      	strb	r2, [r3, #0]
	isNextFlashing = false;
 8000ece:	4b04      	ldr	r3, [pc, #16]	; (8000ee0 <trafficLightStart+0x1c>)
 8000ed0:	2200      	movs	r2, #0
 8000ed2:	701a      	strb	r2, [r3, #0]
    trafficLightUpdate();
 8000ed4:	f7ff ff32 	bl	8000d3c <trafficLightUpdate>
}
 8000ed8:	bf00      	nop
 8000eda:	bd80      	pop	{r7, pc}
 8000edc:	200000d1 	.word	0x200000d1
 8000ee0:	200000d3 	.word	0x200000d3

08000ee4 <isButtonAllowed>:

bool isButtonAllowed() {
 8000ee4:	b580      	push	{r7, lr}
 8000ee6:	af00      	add	r7, sp, #0
	return currentColor == RED && getMode() == 1;
 8000ee8:	4b08      	ldr	r3, [pc, #32]	; (8000f0c <isButtonAllowed+0x28>)
 8000eea:	781b      	ldrb	r3, [r3, #0]
 8000eec:	2b00      	cmp	r3, #0
 8000eee:	d106      	bne.n	8000efe <isButtonAllowed+0x1a>
 8000ef0:	f7ff fe42 	bl	8000b78 <getMode>
 8000ef4:	4603      	mov	r3, r0
 8000ef6:	2b01      	cmp	r3, #1
 8000ef8:	d101      	bne.n	8000efe <isButtonAllowed+0x1a>
 8000efa:	2301      	movs	r3, #1
 8000efc:	e000      	b.n	8000f00 <isButtonAllowed+0x1c>
 8000efe:	2300      	movs	r3, #0
 8000f00:	f003 0301 	and.w	r3, r3, #1
 8000f04:	b2db      	uxtb	r3, r3
}
 8000f06:	4618      	mov	r0, r3
 8000f08:	bd80      	pop	{r7, pc}
 8000f0a:	bf00      	nop
 8000f0c:	200000d0 	.word	0x200000d0

08000f10 <getCurrentColor>:

Color getCurrentColor() {
 8000f10:	b480      	push	{r7}
 8000f12:	af00      	add	r7, sp, #0
	return currentColor;
 8000f14:	4b03      	ldr	r3, [pc, #12]	; (8000f24 <getCurrentColor+0x14>)
 8000f16:	781b      	ldrb	r3, [r3, #0]
}
 8000f18:	4618      	mov	r0, r3
 8000f1a:	46bd      	mov	sp, r7
 8000f1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f20:	4770      	bx	lr
 8000f22:	bf00      	nop
 8000f24:	200000d0 	.word	0x200000d0

08000f28 <setDurationRED>:

void setDurationRED(int duration) {
 8000f28:	b480      	push	{r7}
 8000f2a:	b083      	sub	sp, #12
 8000f2c:	af00      	add	r7, sp, #0
 8000f2e:	6078      	str	r0, [r7, #4]
	durationRED = duration;
 8000f30:	4a04      	ldr	r2, [pc, #16]	; (8000f44 <setDurationRED+0x1c>)
 8000f32:	687b      	ldr	r3, [r7, #4]
 8000f34:	6013      	str	r3, [r2, #0]
}
 8000f36:	bf00      	nop
 8000f38:	370c      	adds	r7, #12
 8000f3a:	46bd      	mov	sp, r7
 8000f3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f40:	4770      	bx	lr
 8000f42:	bf00      	nop
 8000f44:	2000001c 	.word	0x2000001c

08000f48 <MX_USART6_UART_Init>:
UART_HandleTypeDef huart6;

/* USART6 init function */

void MX_USART6_UART_Init(void)
{
 8000f48:	b580      	push	{r7, lr}
 8000f4a:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 8000f4c:	4b11      	ldr	r3, [pc, #68]	; (8000f94 <MX_USART6_UART_Init+0x4c>)
 8000f4e:	4a12      	ldr	r2, [pc, #72]	; (8000f98 <MX_USART6_UART_Init+0x50>)
 8000f50:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 115200;
 8000f52:	4b10      	ldr	r3, [pc, #64]	; (8000f94 <MX_USART6_UART_Init+0x4c>)
 8000f54:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000f58:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 8000f5a:	4b0e      	ldr	r3, [pc, #56]	; (8000f94 <MX_USART6_UART_Init+0x4c>)
 8000f5c:	2200      	movs	r2, #0
 8000f5e:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 8000f60:	4b0c      	ldr	r3, [pc, #48]	; (8000f94 <MX_USART6_UART_Init+0x4c>)
 8000f62:	2200      	movs	r2, #0
 8000f64:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 8000f66:	4b0b      	ldr	r3, [pc, #44]	; (8000f94 <MX_USART6_UART_Init+0x4c>)
 8000f68:	2200      	movs	r2, #0
 8000f6a:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 8000f6c:	4b09      	ldr	r3, [pc, #36]	; (8000f94 <MX_USART6_UART_Init+0x4c>)
 8000f6e:	220c      	movs	r2, #12
 8000f70:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000f72:	4b08      	ldr	r3, [pc, #32]	; (8000f94 <MX_USART6_UART_Init+0x4c>)
 8000f74:	2200      	movs	r2, #0
 8000f76:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 8000f78:	4b06      	ldr	r3, [pc, #24]	; (8000f94 <MX_USART6_UART_Init+0x4c>)
 8000f7a:	2200      	movs	r2, #0
 8000f7c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 8000f7e:	4805      	ldr	r0, [pc, #20]	; (8000f94 <MX_USART6_UART_Init+0x4c>)
 8000f80:	f001 fb30 	bl	80025e4 <HAL_UART_Init>
 8000f84:	4603      	mov	r3, r0
 8000f86:	2b00      	cmp	r3, #0
 8000f88:	d001      	beq.n	8000f8e <MX_USART6_UART_Init+0x46>
  {
    Error_Handler();
 8000f8a:	f7ff fcb5 	bl	80008f8 <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 8000f8e:	bf00      	nop
 8000f90:	bd80      	pop	{r7, pc}
 8000f92:	bf00      	nop
 8000f94:	200000d4 	.word	0x200000d4
 8000f98:	40011400 	.word	0x40011400

08000f9c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000f9c:	b580      	push	{r7, lr}
 8000f9e:	b08a      	sub	sp, #40	; 0x28
 8000fa0:	af00      	add	r7, sp, #0
 8000fa2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fa4:	f107 0314 	add.w	r3, r7, #20
 8000fa8:	2200      	movs	r2, #0
 8000faa:	601a      	str	r2, [r3, #0]
 8000fac:	605a      	str	r2, [r3, #4]
 8000fae:	609a      	str	r2, [r3, #8]
 8000fb0:	60da      	str	r2, [r3, #12]
 8000fb2:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART6)
 8000fb4:	687b      	ldr	r3, [r7, #4]
 8000fb6:	681b      	ldr	r3, [r3, #0]
 8000fb8:	4a1d      	ldr	r2, [pc, #116]	; (8001030 <HAL_UART_MspInit+0x94>)
 8000fba:	4293      	cmp	r3, r2
 8000fbc:	d133      	bne.n	8001026 <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN USART6_MspInit 0 */

  /* USER CODE END USART6_MspInit 0 */
    /* USART6 clock enable */
    __HAL_RCC_USART6_CLK_ENABLE();
 8000fbe:	2300      	movs	r3, #0
 8000fc0:	613b      	str	r3, [r7, #16]
 8000fc2:	4b1c      	ldr	r3, [pc, #112]	; (8001034 <HAL_UART_MspInit+0x98>)
 8000fc4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000fc6:	4a1b      	ldr	r2, [pc, #108]	; (8001034 <HAL_UART_MspInit+0x98>)
 8000fc8:	f043 0320 	orr.w	r3, r3, #32
 8000fcc:	6453      	str	r3, [r2, #68]	; 0x44
 8000fce:	4b19      	ldr	r3, [pc, #100]	; (8001034 <HAL_UART_MspInit+0x98>)
 8000fd0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000fd2:	f003 0320 	and.w	r3, r3, #32
 8000fd6:	613b      	str	r3, [r7, #16]
 8000fd8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000fda:	2300      	movs	r3, #0
 8000fdc:	60fb      	str	r3, [r7, #12]
 8000fde:	4b15      	ldr	r3, [pc, #84]	; (8001034 <HAL_UART_MspInit+0x98>)
 8000fe0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fe2:	4a14      	ldr	r2, [pc, #80]	; (8001034 <HAL_UART_MspInit+0x98>)
 8000fe4:	f043 0304 	orr.w	r3, r3, #4
 8000fe8:	6313      	str	r3, [r2, #48]	; 0x30
 8000fea:	4b12      	ldr	r3, [pc, #72]	; (8001034 <HAL_UART_MspInit+0x98>)
 8000fec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fee:	f003 0304 	and.w	r3, r3, #4
 8000ff2:	60fb      	str	r3, [r7, #12]
 8000ff4:	68fb      	ldr	r3, [r7, #12]
    /**USART6 GPIO Configuration
    PC6     ------> USART6_TX
    PC7     ------> USART6_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000ff6:	23c0      	movs	r3, #192	; 0xc0
 8000ff8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ffa:	2302      	movs	r3, #2
 8000ffc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ffe:	2300      	movs	r3, #0
 8001000:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001002:	2303      	movs	r3, #3
 8001004:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8001006:	2308      	movs	r3, #8
 8001008:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800100a:	f107 0314 	add.w	r3, r7, #20
 800100e:	4619      	mov	r1, r3
 8001010:	4809      	ldr	r0, [pc, #36]	; (8001038 <HAL_UART_MspInit+0x9c>)
 8001012:	f000 fcb1 	bl	8001978 <HAL_GPIO_Init>

    /* USART6 interrupt Init */
    HAL_NVIC_SetPriority(USART6_IRQn, 0, 0);
 8001016:	2200      	movs	r2, #0
 8001018:	2100      	movs	r1, #0
 800101a:	2047      	movs	r0, #71	; 0x47
 800101c:	f000 fbe3 	bl	80017e6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART6_IRQn);
 8001020:	2047      	movs	r0, #71	; 0x47
 8001022:	f000 fbfc 	bl	800181e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }
}
 8001026:	bf00      	nop
 8001028:	3728      	adds	r7, #40	; 0x28
 800102a:	46bd      	mov	sp, r7
 800102c:	bd80      	pop	{r7, pc}
 800102e:	bf00      	nop
 8001030:	40011400 	.word	0x40011400
 8001034:	40023800 	.word	0x40023800
 8001038:	40020800 	.word	0x40020800

0800103c <buttonInit>:

static GPIO_TypeDef* port;
static uint16_t pin;
static buttonActionListener onClickHandler = NULL;

void buttonInit(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin) {
 800103c:	b480      	push	{r7}
 800103e:	b083      	sub	sp, #12
 8001040:	af00      	add	r7, sp, #0
 8001042:	6078      	str	r0, [r7, #4]
 8001044:	460b      	mov	r3, r1
 8001046:	807b      	strh	r3, [r7, #2]
	port = GPIOx;
 8001048:	4a07      	ldr	r2, [pc, #28]	; (8001068 <buttonInit+0x2c>)
 800104a:	687b      	ldr	r3, [r7, #4]
 800104c:	6013      	str	r3, [r2, #0]
    pin = GPIO_Pin;
 800104e:	4a07      	ldr	r2, [pc, #28]	; (800106c <buttonInit+0x30>)
 8001050:	887b      	ldrh	r3, [r7, #2]
 8001052:	8013      	strh	r3, [r2, #0]
    onClickHandler = NULL;
 8001054:	4b06      	ldr	r3, [pc, #24]	; (8001070 <buttonInit+0x34>)
 8001056:	2200      	movs	r2, #0
 8001058:	601a      	str	r2, [r3, #0]
}
 800105a:	bf00      	nop
 800105c:	370c      	adds	r7, #12
 800105e:	46bd      	mov	sp, r7
 8001060:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001064:	4770      	bx	lr
 8001066:	bf00      	nop
 8001068:	20000118 	.word	0x20000118
 800106c:	2000011c 	.word	0x2000011c
 8001070:	20000120 	.word	0x20000120

08001074 <buttonSetOnClick>:

void buttonSetOnClick(buttonActionListener actionListener) {
 8001074:	b480      	push	{r7}
 8001076:	b083      	sub	sp, #12
 8001078:	af00      	add	r7, sp, #0
 800107a:	6078      	str	r0, [r7, #4]
    onClickHandler = actionListener;
 800107c:	4a04      	ldr	r2, [pc, #16]	; (8001090 <buttonSetOnClick+0x1c>)
 800107e:	687b      	ldr	r3, [r7, #4]
 8001080:	6013      	str	r3, [r2, #0]
}
 8001082:	bf00      	nop
 8001084:	370c      	adds	r7, #12
 8001086:	46bd      	mov	sp, r7
 8001088:	f85d 7b04 	ldr.w	r7, [sp], #4
 800108c:	4770      	bx	lr
 800108e:	bf00      	nop
 8001090:	20000120 	.word	0x20000120

08001094 <buttonIsPressed>:

bool buttonIsPressed() {
 8001094:	b580      	push	{r7, lr}
 8001096:	af00      	add	r7, sp, #0
    return HAL_GPIO_ReadPin(port, pin) == GPIO_PIN_RESET ? true : false;
 8001098:	4b07      	ldr	r3, [pc, #28]	; (80010b8 <buttonIsPressed+0x24>)
 800109a:	681b      	ldr	r3, [r3, #0]
 800109c:	4a07      	ldr	r2, [pc, #28]	; (80010bc <buttonIsPressed+0x28>)
 800109e:	8812      	ldrh	r2, [r2, #0]
 80010a0:	4611      	mov	r1, r2
 80010a2:	4618      	mov	r0, r3
 80010a4:	f000 fe14 	bl	8001cd0 <HAL_GPIO_ReadPin>
 80010a8:	4603      	mov	r3, r0
 80010aa:	2b00      	cmp	r3, #0
 80010ac:	bf0c      	ite	eq
 80010ae:	2301      	moveq	r3, #1
 80010b0:	2300      	movne	r3, #0
 80010b2:	b2db      	uxtb	r3, r3
}
 80010b4:	4618      	mov	r0, r3
 80010b6:	bd80      	pop	{r7, pc}
 80010b8:	20000118 	.word	0x20000118
 80010bc:	2000011c 	.word	0x2000011c

080010c0 <buttonUpdateState>:

static volatile uint32_t clickStart = 0;

void buttonUpdateState() {
 80010c0:	b580      	push	{r7, lr}
 80010c2:	b082      	sub	sp, #8
 80010c4:	af00      	add	r7, sp, #0
    uint32_t time = HAL_GetTick();
 80010c6:	f000 faa7 	bl	8001618 <HAL_GetTick>
 80010ca:	6078      	str	r0, [r7, #4]
    bool isPressed = buttonIsPressed();
 80010cc:	f7ff ffe2 	bl	8001094 <buttonIsPressed>
 80010d0:	4603      	mov	r3, r0
 80010d2:	70fb      	strb	r3, [r7, #3]

    if (!isPressed && clickStart > 0 && (time - clickStart) >= SHORT_CLICK) {
 80010d4:	78fb      	ldrb	r3, [r7, #3]
 80010d6:	f083 0301 	eor.w	r3, r3, #1
 80010da:	b2db      	uxtb	r3, r3
 80010dc:	2b00      	cmp	r3, #0
 80010de:	d014      	beq.n	800110a <buttonUpdateState+0x4a>
 80010e0:	4b11      	ldr	r3, [pc, #68]	; (8001128 <buttonUpdateState+0x68>)
 80010e2:	681b      	ldr	r3, [r3, #0]
 80010e4:	2b00      	cmp	r3, #0
 80010e6:	d010      	beq.n	800110a <buttonUpdateState+0x4a>
 80010e8:	4b0f      	ldr	r3, [pc, #60]	; (8001128 <buttonUpdateState+0x68>)
 80010ea:	681b      	ldr	r3, [r3, #0]
 80010ec:	687a      	ldr	r2, [r7, #4]
 80010ee:	1ad3      	subs	r3, r2, r3
 80010f0:	2b31      	cmp	r3, #49	; 0x31
 80010f2:	d90a      	bls.n	800110a <buttonUpdateState+0x4a>
        clickStart = 0;
 80010f4:	4b0c      	ldr	r3, [pc, #48]	; (8001128 <buttonUpdateState+0x68>)
 80010f6:	2200      	movs	r2, #0
 80010f8:	601a      	str	r2, [r3, #0]
        if (onClickHandler != NULL)
 80010fa:	4b0c      	ldr	r3, [pc, #48]	; (800112c <buttonUpdateState+0x6c>)
 80010fc:	681b      	ldr	r3, [r3, #0]
 80010fe:	2b00      	cmp	r3, #0
 8001100:	d00e      	beq.n	8001120 <buttonUpdateState+0x60>
            (*onClickHandler)();
 8001102:	4b0a      	ldr	r3, [pc, #40]	; (800112c <buttonUpdateState+0x6c>)
 8001104:	681b      	ldr	r3, [r3, #0]
 8001106:	4798      	blx	r3
        if (onClickHandler != NULL)
 8001108:	e00a      	b.n	8001120 <buttonUpdateState+0x60>
    } else if (isPressed && clickStart == 0) {
 800110a:	78fb      	ldrb	r3, [r7, #3]
 800110c:	2b00      	cmp	r3, #0
 800110e:	d007      	beq.n	8001120 <buttonUpdateState+0x60>
 8001110:	4b05      	ldr	r3, [pc, #20]	; (8001128 <buttonUpdateState+0x68>)
 8001112:	681b      	ldr	r3, [r3, #0]
 8001114:	2b00      	cmp	r3, #0
 8001116:	d103      	bne.n	8001120 <buttonUpdateState+0x60>
        clickStart = time;
 8001118:	4a03      	ldr	r2, [pc, #12]	; (8001128 <buttonUpdateState+0x68>)
 800111a:	687b      	ldr	r3, [r7, #4]
 800111c:	6013      	str	r3, [r2, #0]
    }
}
 800111e:	e7ff      	b.n	8001120 <buttonUpdateState+0x60>
 8001120:	bf00      	nop
 8001122:	3708      	adds	r7, #8
 8001124:	46bd      	mov	sp, r7
 8001126:	bd80      	pop	{r7, pc}
 8001128:	20000124 	.word	0x20000124
 800112c:	20000120 	.word	0x20000120

08001130 <ledInit>:
};

static void ledHardwareSet(Led *led);
static void ledToggleState(Led *led);

struct Led* ledInit(LedState initState, GPIO_TypeDef* port, uint16_t pin) {
 8001130:	b580      	push	{r7, lr}
 8001132:	b08a      	sub	sp, #40	; 0x28
 8001134:	af00      	add	r7, sp, #0
 8001136:	4603      	mov	r3, r0
 8001138:	6039      	str	r1, [r7, #0]
 800113a:	71fb      	strb	r3, [r7, #7]
 800113c:	4613      	mov	r3, r2
 800113e:	80bb      	strh	r3, [r7, #4]
    Led *led = (Led *) malloc(sizeof(Led));
 8001140:	2018      	movs	r0, #24
 8001142:	f002 fbd1 	bl	80038e8 <malloc>
 8001146:	4603      	mov	r3, r0
 8001148:	627b      	str	r3, [r7, #36]	; 0x24
    *led = (Led) { .state = initState, .startTime = 0, .duration = 0, .period = 0, .port = port, .pin = pin };
 800114a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800114c:	79fa      	ldrb	r2, [r7, #7]
 800114e:	701a      	strb	r2, [r3, #0]
 8001150:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001152:	2200      	movs	r2, #0
 8001154:	605a      	str	r2, [r3, #4]
 8001156:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001158:	2200      	movs	r2, #0
 800115a:	609a      	str	r2, [r3, #8]
 800115c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800115e:	2200      	movs	r2, #0
 8001160:	60da      	str	r2, [r3, #12]
 8001162:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001164:	683a      	ldr	r2, [r7, #0]
 8001166:	611a      	str	r2, [r3, #16]
 8001168:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800116a:	88ba      	ldrh	r2, [r7, #4]
 800116c:	829a      	strh	r2, [r3, #20]
    ledSetState(led, initState);
 800116e:	79fb      	ldrb	r3, [r7, #7]
 8001170:	4619      	mov	r1, r3
 8001172:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8001174:	f000 f856 	bl	8001224 <ledSetState>
    return led;
 8001178:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800117a:	4618      	mov	r0, r3
 800117c:	3728      	adds	r7, #40	; 0x28
 800117e:	46bd      	mov	sp, r7
 8001180:	bd80      	pop	{r7, pc}

08001182 <ledUpdateState>:

void ledUpdateState(Led *led) {
 8001182:	b580      	push	{r7, lr}
 8001184:	b084      	sub	sp, #16
 8001186:	af00      	add	r7, sp, #0
 8001188:	6078      	str	r0, [r7, #4]
    if (led->duration == 0 && led->period == 0) {
 800118a:	687b      	ldr	r3, [r7, #4]
 800118c:	689b      	ldr	r3, [r3, #8]
 800118e:	2b00      	cmp	r3, #0
 8001190:	d103      	bne.n	800119a <ledUpdateState+0x18>
 8001192:	687b      	ldr	r3, [r7, #4]
 8001194:	68db      	ldr	r3, [r3, #12]
 8001196:	2b00      	cmp	r3, #0
 8001198:	d040      	beq.n	800121c <ledUpdateState+0x9a>
        return;
    }
    uint32_t time = HAL_GetTick();
 800119a:	f000 fa3d 	bl	8001618 <HAL_GetTick>
 800119e:	60f8      	str	r0, [r7, #12]
    uint16_t delta = time - led->startTime;
 80011a0:	68fb      	ldr	r3, [r7, #12]
 80011a2:	b29a      	uxth	r2, r3
 80011a4:	687b      	ldr	r3, [r7, #4]
 80011a6:	685b      	ldr	r3, [r3, #4]
 80011a8:	b29b      	uxth	r3, r3
 80011aa:	1ad3      	subs	r3, r2, r3
 80011ac:	817b      	strh	r3, [r7, #10]
    if (led->period > 0 && delta >= led->period) {
 80011ae:	687b      	ldr	r3, [r7, #4]
 80011b0:	68db      	ldr	r3, [r3, #12]
 80011b2:	2b00      	cmp	r3, #0
 80011b4:	dd23      	ble.n	80011fe <ledUpdateState+0x7c>
 80011b6:	897a      	ldrh	r2, [r7, #10]
 80011b8:	687b      	ldr	r3, [r7, #4]
 80011ba:	68db      	ldr	r3, [r3, #12]
 80011bc:	429a      	cmp	r2, r3
 80011be:	db1e      	blt.n	80011fe <ledUpdateState+0x7c>
        led->duration -= led->period;
 80011c0:	687b      	ldr	r3, [r7, #4]
 80011c2:	689a      	ldr	r2, [r3, #8]
 80011c4:	687b      	ldr	r3, [r7, #4]
 80011c6:	68db      	ldr	r3, [r3, #12]
 80011c8:	1ad2      	subs	r2, r2, r3
 80011ca:	687b      	ldr	r3, [r7, #4]
 80011cc:	609a      	str	r2, [r3, #8]
        if (led->duration <= 0) {
 80011ce:	687b      	ldr	r3, [r7, #4]
 80011d0:	689b      	ldr	r3, [r3, #8]
 80011d2:	2b00      	cmp	r3, #0
 80011d4:	dc0a      	bgt.n	80011ec <ledUpdateState+0x6a>
            ledSetState(led, LED_TURN_OFF);
 80011d6:	2101      	movs	r1, #1
 80011d8:	6878      	ldr	r0, [r7, #4]
 80011da:	f000 f823 	bl	8001224 <ledSetState>
            led->period = 0;
 80011de:	687b      	ldr	r3, [r7, #4]
 80011e0:	2200      	movs	r2, #0
 80011e2:	60da      	str	r2, [r3, #12]
            led->duration = 0;
 80011e4:	687b      	ldr	r3, [r7, #4]
 80011e6:	2200      	movs	r2, #0
 80011e8:	609a      	str	r2, [r3, #8]
        if (led->duration <= 0) {
 80011ea:	e018      	b.n	800121e <ledUpdateState+0x9c>
        } else {
            ledToggleState(led);
 80011ec:	6878      	ldr	r0, [r7, #4]
 80011ee:	f000 f881 	bl	80012f4 <ledToggleState>
            led->startTime = HAL_GetTick();
 80011f2:	f000 fa11 	bl	8001618 <HAL_GetTick>
 80011f6:	4602      	mov	r2, r0
 80011f8:	687b      	ldr	r3, [r7, #4]
 80011fa:	605a      	str	r2, [r3, #4]
        if (led->duration <= 0) {
 80011fc:	e00f      	b.n	800121e <ledUpdateState+0x9c>
        }
    } else if (time - led->startTime >= led->duration) {
 80011fe:	687b      	ldr	r3, [r7, #4]
 8001200:	685b      	ldr	r3, [r3, #4]
 8001202:	68fa      	ldr	r2, [r7, #12]
 8001204:	1ad3      	subs	r3, r2, r3
 8001206:	687a      	ldr	r2, [r7, #4]
 8001208:	6892      	ldr	r2, [r2, #8]
 800120a:	4293      	cmp	r3, r2
 800120c:	d307      	bcc.n	800121e <ledUpdateState+0x9c>
        ledToggleState(led);
 800120e:	6878      	ldr	r0, [r7, #4]
 8001210:	f000 f870 	bl	80012f4 <ledToggleState>
        led->duration = 0;
 8001214:	687b      	ldr	r3, [r7, #4]
 8001216:	2200      	movs	r2, #0
 8001218:	609a      	str	r2, [r3, #8]
 800121a:	e000      	b.n	800121e <ledUpdateState+0x9c>
        return;
 800121c:	bf00      	nop
    }
}
 800121e:	3710      	adds	r7, #16
 8001220:	46bd      	mov	sp, r7
 8001222:	bd80      	pop	{r7, pc}

08001224 <ledSetState>:

void ledSetState(Led *led, LedState state) {
 8001224:	b580      	push	{r7, lr}
 8001226:	b082      	sub	sp, #8
 8001228:	af00      	add	r7, sp, #0
 800122a:	6078      	str	r0, [r7, #4]
 800122c:	460b      	mov	r3, r1
 800122e:	70fb      	strb	r3, [r7, #3]
    led->state = state;
 8001230:	687b      	ldr	r3, [r7, #4]
 8001232:	78fa      	ldrb	r2, [r7, #3]
 8001234:	701a      	strb	r2, [r3, #0]
    led->duration = 0;
 8001236:	687b      	ldr	r3, [r7, #4]
 8001238:	2200      	movs	r2, #0
 800123a:	609a      	str	r2, [r3, #8]
    led->period = 0;
 800123c:	687b      	ldr	r3, [r7, #4]
 800123e:	2200      	movs	r2, #0
 8001240:	60da      	str	r2, [r3, #12]
    ledHardwareSet(led);
 8001242:	6878      	ldr	r0, [r7, #4]
 8001244:	f000 f86b 	bl	800131e <ledHardwareSet>
}
 8001248:	bf00      	nop
 800124a:	3708      	adds	r7, #8
 800124c:	46bd      	mov	sp, r7
 800124e:	bd80      	pop	{r7, pc}

08001250 <ledSetPeriod>:

void ledSetPeriod(Led *led, uint16_t period, uint16_t duration) {
 8001250:	b580      	push	{r7, lr}
 8001252:	b082      	sub	sp, #8
 8001254:	af00      	add	r7, sp, #0
 8001256:	6078      	str	r0, [r7, #4]
 8001258:	460b      	mov	r3, r1
 800125a:	807b      	strh	r3, [r7, #2]
 800125c:	4613      	mov	r3, r2
 800125e:	803b      	strh	r3, [r7, #0]
    led->state = LED_TURN_ON;
 8001260:	687b      	ldr	r3, [r7, #4]
 8001262:	2200      	movs	r2, #0
 8001264:	701a      	strb	r2, [r3, #0]
    led->period = period;
 8001266:	887a      	ldrh	r2, [r7, #2]
 8001268:	687b      	ldr	r3, [r7, #4]
 800126a:	60da      	str	r2, [r3, #12]
    led->duration = duration;
 800126c:	883a      	ldrh	r2, [r7, #0]
 800126e:	687b      	ldr	r3, [r7, #4]
 8001270:	609a      	str	r2, [r3, #8]
    led->startTime = HAL_GetTick();
 8001272:	f000 f9d1 	bl	8001618 <HAL_GetTick>
 8001276:	4602      	mov	r2, r0
 8001278:	687b      	ldr	r3, [r7, #4]
 800127a:	605a      	str	r2, [r3, #4]
    ledHardwareSet(led);
 800127c:	6878      	ldr	r0, [r7, #4]
 800127e:	f000 f84e 	bl	800131e <ledHardwareSet>
}
 8001282:	bf00      	nop
 8001284:	3708      	adds	r7, #8
 8001286:	46bd      	mov	sp, r7
 8001288:	bd80      	pop	{r7, pc}

0800128a <ledSetStateDuration>:

void ledSetStateDuration(Led *led, LedState state, uint16_t duration) {
 800128a:	b580      	push	{r7, lr}
 800128c:	b082      	sub	sp, #8
 800128e:	af00      	add	r7, sp, #0
 8001290:	6078      	str	r0, [r7, #4]
 8001292:	460b      	mov	r3, r1
 8001294:	70fb      	strb	r3, [r7, #3]
 8001296:	4613      	mov	r3, r2
 8001298:	803b      	strh	r3, [r7, #0]
    led->state = state;
 800129a:	687b      	ldr	r3, [r7, #4]
 800129c:	78fa      	ldrb	r2, [r7, #3]
 800129e:	701a      	strb	r2, [r3, #0]
    led->period = 0;
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	2200      	movs	r2, #0
 80012a4:	60da      	str	r2, [r3, #12]
    led->duration = duration;
 80012a6:	883a      	ldrh	r2, [r7, #0]
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	609a      	str	r2, [r3, #8]
    led->startTime = HAL_GetTick();
 80012ac:	f000 f9b4 	bl	8001618 <HAL_GetTick>
 80012b0:	4602      	mov	r2, r0
 80012b2:	687b      	ldr	r3, [r7, #4]
 80012b4:	605a      	str	r2, [r3, #4]
    ledHardwareSet(led);
 80012b6:	6878      	ldr	r0, [r7, #4]
 80012b8:	f000 f831 	bl	800131e <ledHardwareSet>
}
 80012bc:	bf00      	nop
 80012be:	3708      	adds	r7, #8
 80012c0:	46bd      	mov	sp, r7
 80012c2:	bd80      	pop	{r7, pc}

080012c4 <ledFinishedLightning>:

LedState ledGetState(Led *led) {
    return led->state;
}

bool ledFinishedLightning(Led *led) {
 80012c4:	b480      	push	{r7}
 80012c6:	b083      	sub	sp, #12
 80012c8:	af00      	add	r7, sp, #0
 80012ca:	6078      	str	r0, [r7, #4]
    return led->duration == 0 && led->period == 0;
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	689b      	ldr	r3, [r3, #8]
 80012d0:	2b00      	cmp	r3, #0
 80012d2:	d105      	bne.n	80012e0 <ledFinishedLightning+0x1c>
 80012d4:	687b      	ldr	r3, [r7, #4]
 80012d6:	68db      	ldr	r3, [r3, #12]
 80012d8:	2b00      	cmp	r3, #0
 80012da:	d101      	bne.n	80012e0 <ledFinishedLightning+0x1c>
 80012dc:	2301      	movs	r3, #1
 80012de:	e000      	b.n	80012e2 <ledFinishedLightning+0x1e>
 80012e0:	2300      	movs	r3, #0
 80012e2:	f003 0301 	and.w	r3, r3, #1
 80012e6:	b2db      	uxtb	r3, r3
}
 80012e8:	4618      	mov	r0, r3
 80012ea:	370c      	adds	r7, #12
 80012ec:	46bd      	mov	sp, r7
 80012ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012f2:	4770      	bx	lr

080012f4 <ledToggleState>:

static void ledToggleState(Led *led) {
 80012f4:	b580      	push	{r7, lr}
 80012f6:	b082      	sub	sp, #8
 80012f8:	af00      	add	r7, sp, #0
 80012fa:	6078      	str	r0, [r7, #4]
    led->state = led->state == LED_TURN_ON ? LED_TURN_OFF : LED_TURN_ON;
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	781b      	ldrb	r3, [r3, #0]
 8001300:	2b00      	cmp	r3, #0
 8001302:	bf0c      	ite	eq
 8001304:	2301      	moveq	r3, #1
 8001306:	2300      	movne	r3, #0
 8001308:	b2db      	uxtb	r3, r3
 800130a:	461a      	mov	r2, r3
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	701a      	strb	r2, [r3, #0]
    ledHardwareSet(led);
 8001310:	6878      	ldr	r0, [r7, #4]
 8001312:	f000 f804 	bl	800131e <ledHardwareSet>
}
 8001316:	bf00      	nop
 8001318:	3708      	adds	r7, #8
 800131a:	46bd      	mov	sp, r7
 800131c:	bd80      	pop	{r7, pc}

0800131e <ledHardwareSet>:

static void ledHardwareSet(Led *led) {
 800131e:	b580      	push	{r7, lr}
 8001320:	b082      	sub	sp, #8
 8001322:	af00      	add	r7, sp, #0
 8001324:	6078      	str	r0, [r7, #4]
    HAL_GPIO_WritePin(led->port, led->pin, led->state == LED_TURN_ON ? GPIO_PIN_SET : GPIO_PIN_RESET);
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	6918      	ldr	r0, [r3, #16]
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	8a99      	ldrh	r1, [r3, #20]
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	781b      	ldrb	r3, [r3, #0]
 8001332:	2b00      	cmp	r3, #0
 8001334:	bf0c      	ite	eq
 8001336:	2301      	moveq	r3, #1
 8001338:	2300      	movne	r3, #0
 800133a:	b2db      	uxtb	r3, r3
 800133c:	461a      	mov	r2, r3
 800133e:	f000 fcdf 	bl	8001d00 <HAL_GPIO_WritePin>
}
 8001342:	bf00      	nop
 8001344:	3708      	adds	r7, #8
 8001346:	46bd      	mov	sp, r7
 8001348:	bd80      	pop	{r7, pc}
	...

0800134c <uart_buffersInit>:
char transmitBuffer[512];
int needToTransmit = 0;

struct buffer buffer;

void uart_buffersInit() {
 800134c:	b590      	push	{r4, r7, lr}
 800134e:	b083      	sub	sp, #12
 8001350:	af00      	add	r7, sp, #0
	buffer = buffer_create();
 8001352:	4c07      	ldr	r4, [pc, #28]	; (8001370 <uart_buffersInit+0x24>)
 8001354:	463b      	mov	r3, r7
 8001356:	4618      	mov	r0, r3
 8001358:	f7ff f934 	bl	80005c4 <buffer_create>
 800135c:	4622      	mov	r2, r4
 800135e:	463b      	mov	r3, r7
 8001360:	e893 0003 	ldmia.w	r3, {r0, r1}
 8001364:	e882 0003 	stmia.w	r2, {r0, r1}
}
 8001368:	bf00      	nop
 800136a:	370c      	adds	r7, #12
 800136c:	46bd      	mov	sp, r7
 800136e:	bd90      	pop	{r4, r7, pc}
 8001370:	20000330 	.word	0x20000330

08001374 <recieve>:

void recieve() {
 8001374:	b580      	push	{r7, lr}
 8001376:	af00      	add	r7, sp, #0
	if (getInterruptsEnabled() == 1) {
 8001378:	f7ff fc0a 	bl	8000b90 <getInterruptsEnabled>
 800137c:	4603      	mov	r3, r0
 800137e:	2b01      	cmp	r3, #1
 8001380:	d105      	bne.n	800138e <recieve+0x1a>
		HAL_UART_Receive_IT(&huart6, &nextByte, 1);
 8001382:	2201      	movs	r2, #1
 8001384:	490c      	ldr	r1, [pc, #48]	; (80013b8 <recieve+0x44>)
 8001386:	480d      	ldr	r0, [pc, #52]	; (80013bc <recieve+0x48>)
 8001388:	f001 faf2 	bl	8002970 <HAL_UART_Receive_IT>
		if (HAL_UART_Receive(&huart6, &nextByte, 1, 10) == HAL_OK) {
			buffer_push(&buffer, nextByte);
			check(&buffer);
		}
	}
}
 800138c:	e011      	b.n	80013b2 <recieve+0x3e>
		if (HAL_UART_Receive(&huart6, &nextByte, 1, 10) == HAL_OK) {
 800138e:	230a      	movs	r3, #10
 8001390:	2201      	movs	r2, #1
 8001392:	4909      	ldr	r1, [pc, #36]	; (80013b8 <recieve+0x44>)
 8001394:	4809      	ldr	r0, [pc, #36]	; (80013bc <recieve+0x48>)
 8001396:	f001 fa04 	bl	80027a2 <HAL_UART_Receive>
 800139a:	4603      	mov	r3, r0
 800139c:	2b00      	cmp	r3, #0
 800139e:	d108      	bne.n	80013b2 <recieve+0x3e>
			buffer_push(&buffer, nextByte);
 80013a0:	4b05      	ldr	r3, [pc, #20]	; (80013b8 <recieve+0x44>)
 80013a2:	781b      	ldrb	r3, [r3, #0]
 80013a4:	4619      	mov	r1, r3
 80013a6:	4806      	ldr	r0, [pc, #24]	; (80013c0 <recieve+0x4c>)
 80013a8:	f7ff f922 	bl	80005f0 <buffer_push>
			check(&buffer);
 80013ac:	4804      	ldr	r0, [pc, #16]	; (80013c0 <recieve+0x4c>)
 80013ae:	f7ff faa9 	bl	8000904 <check>
}
 80013b2:	bf00      	nop
 80013b4:	bd80      	pop	{r7, pc}
 80013b6:	bf00      	nop
 80013b8:	20000128 	.word	0x20000128
 80013bc:	200000d4 	.word	0x200000d4
 80013c0:	20000330 	.word	0x20000330

080013c4 <transmit>:

void transmit(char msg[]) {
 80013c4:	b580      	push	{r7, lr}
 80013c6:	b082      	sub	sp, #8
 80013c8:	af00      	add	r7, sp, #0
 80013ca:	6078      	str	r0, [r7, #4]
	if (getInterruptsEnabled() == 1) {
 80013cc:	f7ff fbe0 	bl	8000b90 <getInterruptsEnabled>
 80013d0:	4603      	mov	r3, r0
 80013d2:	2b01      	cmp	r3, #1
 80013d4:	d111      	bne.n	80013fa <transmit+0x36>
		if (HAL_UART_Transmit_IT(&huart6, (uint8_t*) msg, strlen(msg)) != HAL_OK) {
 80013d6:	6878      	ldr	r0, [r7, #4]
 80013d8:	f7fe ff14 	bl	8000204 <strlen>
 80013dc:	4603      	mov	r3, r0
 80013de:	b29b      	uxth	r3, r3
 80013e0:	461a      	mov	r2, r3
 80013e2:	6879      	ldr	r1, [r7, #4]
 80013e4:	480c      	ldr	r0, [pc, #48]	; (8001418 <transmit+0x54>)
 80013e6:	f001 fa7e 	bl	80028e6 <HAL_UART_Transmit_IT>
 80013ea:	4603      	mov	r3, r0
 80013ec:	2b00      	cmp	r3, #0
 80013ee:	d00e      	beq.n	800140e <transmit+0x4a>
			strcat(transmitBuffer, msg);
 80013f0:	6879      	ldr	r1, [r7, #4]
 80013f2:	480a      	ldr	r0, [pc, #40]	; (800141c <transmit+0x58>)
 80013f4:	f002 fba6 	bl	8003b44 <strcat>
		}
	} else {
		HAL_UART_Transmit(&huart6, (uint8_t*) msg, strlen(msg), 10);
	}
}
 80013f8:	e009      	b.n	800140e <transmit+0x4a>
		HAL_UART_Transmit(&huart6, (uint8_t*) msg, strlen(msg), 10);
 80013fa:	6878      	ldr	r0, [r7, #4]
 80013fc:	f7fe ff02 	bl	8000204 <strlen>
 8001400:	4603      	mov	r3, r0
 8001402:	b29a      	uxth	r2, r3
 8001404:	230a      	movs	r3, #10
 8001406:	6879      	ldr	r1, [r7, #4]
 8001408:	4803      	ldr	r0, [pc, #12]	; (8001418 <transmit+0x54>)
 800140a:	f001 f938 	bl	800267e <HAL_UART_Transmit>
}
 800140e:	bf00      	nop
 8001410:	3708      	adds	r7, #8
 8001412:	46bd      	mov	sp, r7
 8001414:	bd80      	pop	{r7, pc}
 8001416:	bf00      	nop
 8001418:	200000d4 	.word	0x200000d4
 800141c:	2000012c 	.word	0x2000012c

08001420 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 8001420:	b580      	push	{r7, lr}
 8001422:	b082      	sub	sp, #8
 8001424:	af00      	add	r7, sp, #0
 8001426:	6078      	str	r0, [r7, #4]
	if (huart == &huart6) {
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	4a05      	ldr	r2, [pc, #20]	; (8001440 <HAL_UART_RxCpltCallback+0x20>)
 800142c:	4293      	cmp	r3, r2
 800142e:	d102      	bne.n	8001436 <HAL_UART_RxCpltCallback+0x16>
		check(&buffer);
 8001430:	4804      	ldr	r0, [pc, #16]	; (8001444 <HAL_UART_RxCpltCallback+0x24>)
 8001432:	f7ff fa67 	bl	8000904 <check>
	}
}
 8001436:	bf00      	nop
 8001438:	3708      	adds	r7, #8
 800143a:	46bd      	mov	sp, r7
 800143c:	bd80      	pop	{r7, pc}
 800143e:	bf00      	nop
 8001440:	200000d4 	.word	0x200000d4
 8001444:	20000330 	.word	0x20000330

08001448 <HAL_UART_TxCpltCallback>:

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart) {
 8001448:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800144c:	b085      	sub	sp, #20
 800144e:	af00      	add	r7, sp, #0
 8001450:	6078      	str	r0, [r7, #4]
	if (huart == &huart6) {
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	4a25      	ldr	r2, [pc, #148]	; (80014ec <HAL_UART_TxCpltCallback+0xa4>)
 8001456:	4293      	cmp	r3, r2
 8001458:	d142      	bne.n	80014e0 <HAL_UART_TxCpltCallback+0x98>
		if (strcmp(transmitBuffer, "") != 0) {
 800145a:	4b25      	ldr	r3, [pc, #148]	; (80014f0 <HAL_UART_TxCpltCallback+0xa8>)
 800145c:	781b      	ldrb	r3, [r3, #0]
 800145e:	2b00      	cmp	r3, #0
 8001460:	d03e      	beq.n	80014e0 <HAL_UART_TxCpltCallback+0x98>
 8001462:	466b      	mov	r3, sp
 8001464:	461e      	mov	r6, r3
			char buf[needToTransmit];
 8001466:	4b23      	ldr	r3, [pc, #140]	; (80014f4 <HAL_UART_TxCpltCallback+0xac>)
 8001468:	6819      	ldr	r1, [r3, #0]
 800146a:	1e4b      	subs	r3, r1, #1
 800146c:	60fb      	str	r3, [r7, #12]
 800146e:	460a      	mov	r2, r1
 8001470:	2300      	movs	r3, #0
 8001472:	4690      	mov	r8, r2
 8001474:	4699      	mov	r9, r3
 8001476:	f04f 0200 	mov.w	r2, #0
 800147a:	f04f 0300 	mov.w	r3, #0
 800147e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001482:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001486:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800148a:	460a      	mov	r2, r1
 800148c:	2300      	movs	r3, #0
 800148e:	4614      	mov	r4, r2
 8001490:	461d      	mov	r5, r3
 8001492:	f04f 0200 	mov.w	r2, #0
 8001496:	f04f 0300 	mov.w	r3, #0
 800149a:	00eb      	lsls	r3, r5, #3
 800149c:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80014a0:	00e2      	lsls	r2, r4, #3
 80014a2:	460b      	mov	r3, r1
 80014a4:	3307      	adds	r3, #7
 80014a6:	08db      	lsrs	r3, r3, #3
 80014a8:	00db      	lsls	r3, r3, #3
 80014aa:	ebad 0d03 	sub.w	sp, sp, r3
 80014ae:	466b      	mov	r3, sp
 80014b0:	3300      	adds	r3, #0
 80014b2:	60bb      	str	r3, [r7, #8]
			memcpy(buf, transmitBuffer, needToTransmit);
 80014b4:	4b0f      	ldr	r3, [pc, #60]	; (80014f4 <HAL_UART_TxCpltCallback+0xac>)
 80014b6:	681b      	ldr	r3, [r3, #0]
 80014b8:	461a      	mov	r2, r3
 80014ba:	490d      	ldr	r1, [pc, #52]	; (80014f0 <HAL_UART_TxCpltCallback+0xa8>)
 80014bc:	68b8      	ldr	r0, [r7, #8]
 80014be:	f002 fa1b 	bl	80038f8 <memcpy>
			HAL_UART_Transmit_IT(&huart6, (uint8_t*) buf, needToTransmit);
 80014c2:	4b0c      	ldr	r3, [pc, #48]	; (80014f4 <HAL_UART_TxCpltCallback+0xac>)
 80014c4:	681b      	ldr	r3, [r3, #0]
 80014c6:	b29b      	uxth	r3, r3
 80014c8:	461a      	mov	r2, r3
 80014ca:	68b9      	ldr	r1, [r7, #8]
 80014cc:	4807      	ldr	r0, [pc, #28]	; (80014ec <HAL_UART_TxCpltCallback+0xa4>)
 80014ce:	f001 fa0a 	bl	80028e6 <HAL_UART_Transmit_IT>
			needToTransmit = 0;
 80014d2:	4b08      	ldr	r3, [pc, #32]	; (80014f4 <HAL_UART_TxCpltCallback+0xac>)
 80014d4:	2200      	movs	r2, #0
 80014d6:	601a      	str	r2, [r3, #0]
			strcpy(transmitBuffer, "");		}
 80014d8:	4b05      	ldr	r3, [pc, #20]	; (80014f0 <HAL_UART_TxCpltCallback+0xa8>)
 80014da:	2200      	movs	r2, #0
 80014dc:	701a      	strb	r2, [r3, #0]
 80014de:	46b5      	mov	sp, r6
	}
}
 80014e0:	bf00      	nop
 80014e2:	3714      	adds	r7, #20
 80014e4:	46bd      	mov	sp, r7
 80014e6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80014ea:	bf00      	nop
 80014ec:	200000d4 	.word	0x200000d4
 80014f0:	2000012c 	.word	0x2000012c
 80014f4:	2000032c 	.word	0x2000032c

080014f8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80014f8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001530 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80014fc:	480d      	ldr	r0, [pc, #52]	; (8001534 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80014fe:	490e      	ldr	r1, [pc, #56]	; (8001538 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001500:	4a0e      	ldr	r2, [pc, #56]	; (800153c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001502:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001504:	e002      	b.n	800150c <LoopCopyDataInit>

08001506 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001506:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001508:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800150a:	3304      	adds	r3, #4

0800150c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800150c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800150e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001510:	d3f9      	bcc.n	8001506 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001512:	4a0b      	ldr	r2, [pc, #44]	; (8001540 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001514:	4c0b      	ldr	r4, [pc, #44]	; (8001544 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001516:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001518:	e001      	b.n	800151e <LoopFillZerobss>

0800151a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800151a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800151c:	3204      	adds	r2, #4

0800151e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800151e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001520:	d3fb      	bcc.n	800151a <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001522:	f7ff fbd3 	bl	8000ccc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001526:	f002 f9bb 	bl	80038a0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800152a:	f7ff f925 	bl	8000778 <main>
  bx  lr    
 800152e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001530:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 8001534:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001538:	20000094 	.word	0x20000094
  ldr r2, =_sidata
 800153c:	08004520 	.word	0x08004520
  ldr r2, =_sbss
 8001540:	20000094 	.word	0x20000094
  ldr r4, =_ebss
 8001544:	2000034c 	.word	0x2000034c

08001548 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001548:	e7fe      	b.n	8001548 <ADC_IRQHandler>
	...

0800154c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800154c:	b580      	push	{r7, lr}
 800154e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001550:	4b0e      	ldr	r3, [pc, #56]	; (800158c <HAL_Init+0x40>)
 8001552:	681b      	ldr	r3, [r3, #0]
 8001554:	4a0d      	ldr	r2, [pc, #52]	; (800158c <HAL_Init+0x40>)
 8001556:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800155a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800155c:	4b0b      	ldr	r3, [pc, #44]	; (800158c <HAL_Init+0x40>)
 800155e:	681b      	ldr	r3, [r3, #0]
 8001560:	4a0a      	ldr	r2, [pc, #40]	; (800158c <HAL_Init+0x40>)
 8001562:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001566:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001568:	4b08      	ldr	r3, [pc, #32]	; (800158c <HAL_Init+0x40>)
 800156a:	681b      	ldr	r3, [r3, #0]
 800156c:	4a07      	ldr	r2, [pc, #28]	; (800158c <HAL_Init+0x40>)
 800156e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001572:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001574:	2003      	movs	r0, #3
 8001576:	f000 f92b 	bl	80017d0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800157a:	200f      	movs	r0, #15
 800157c:	f000 f808 	bl	8001590 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001580:	f7ff fb12 	bl	8000ba8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001584:	2300      	movs	r3, #0
}
 8001586:	4618      	mov	r0, r3
 8001588:	bd80      	pop	{r7, pc}
 800158a:	bf00      	nop
 800158c:	40023c00 	.word	0x40023c00

08001590 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001590:	b580      	push	{r7, lr}
 8001592:	b082      	sub	sp, #8
 8001594:	af00      	add	r7, sp, #0
 8001596:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001598:	4b12      	ldr	r3, [pc, #72]	; (80015e4 <HAL_InitTick+0x54>)
 800159a:	681a      	ldr	r2, [r3, #0]
 800159c:	4b12      	ldr	r3, [pc, #72]	; (80015e8 <HAL_InitTick+0x58>)
 800159e:	781b      	ldrb	r3, [r3, #0]
 80015a0:	4619      	mov	r1, r3
 80015a2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80015a6:	fbb3 f3f1 	udiv	r3, r3, r1
 80015aa:	fbb2 f3f3 	udiv	r3, r2, r3
 80015ae:	4618      	mov	r0, r3
 80015b0:	f000 f943 	bl	800183a <HAL_SYSTICK_Config>
 80015b4:	4603      	mov	r3, r0
 80015b6:	2b00      	cmp	r3, #0
 80015b8:	d001      	beq.n	80015be <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80015ba:	2301      	movs	r3, #1
 80015bc:	e00e      	b.n	80015dc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	2b0f      	cmp	r3, #15
 80015c2:	d80a      	bhi.n	80015da <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80015c4:	2200      	movs	r2, #0
 80015c6:	6879      	ldr	r1, [r7, #4]
 80015c8:	f04f 30ff 	mov.w	r0, #4294967295
 80015cc:	f000 f90b 	bl	80017e6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80015d0:	4a06      	ldr	r2, [pc, #24]	; (80015ec <HAL_InitTick+0x5c>)
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80015d6:	2300      	movs	r3, #0
 80015d8:	e000      	b.n	80015dc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80015da:	2301      	movs	r3, #1
}
 80015dc:	4618      	mov	r0, r3
 80015de:	3708      	adds	r7, #8
 80015e0:	46bd      	mov	sp, r7
 80015e2:	bd80      	pop	{r7, pc}
 80015e4:	20000018 	.word	0x20000018
 80015e8:	2000002c 	.word	0x2000002c
 80015ec:	20000028 	.word	0x20000028

080015f0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80015f0:	b480      	push	{r7}
 80015f2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80015f4:	4b06      	ldr	r3, [pc, #24]	; (8001610 <HAL_IncTick+0x20>)
 80015f6:	781b      	ldrb	r3, [r3, #0]
 80015f8:	461a      	mov	r2, r3
 80015fa:	4b06      	ldr	r3, [pc, #24]	; (8001614 <HAL_IncTick+0x24>)
 80015fc:	681b      	ldr	r3, [r3, #0]
 80015fe:	4413      	add	r3, r2
 8001600:	4a04      	ldr	r2, [pc, #16]	; (8001614 <HAL_IncTick+0x24>)
 8001602:	6013      	str	r3, [r2, #0]
}
 8001604:	bf00      	nop
 8001606:	46bd      	mov	sp, r7
 8001608:	f85d 7b04 	ldr.w	r7, [sp], #4
 800160c:	4770      	bx	lr
 800160e:	bf00      	nop
 8001610:	2000002c 	.word	0x2000002c
 8001614:	20000338 	.word	0x20000338

08001618 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001618:	b480      	push	{r7}
 800161a:	af00      	add	r7, sp, #0
  return uwTick;
 800161c:	4b03      	ldr	r3, [pc, #12]	; (800162c <HAL_GetTick+0x14>)
 800161e:	681b      	ldr	r3, [r3, #0]
}
 8001620:	4618      	mov	r0, r3
 8001622:	46bd      	mov	sp, r7
 8001624:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001628:	4770      	bx	lr
 800162a:	bf00      	nop
 800162c:	20000338 	.word	0x20000338

08001630 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001630:	b480      	push	{r7}
 8001632:	b085      	sub	sp, #20
 8001634:	af00      	add	r7, sp, #0
 8001636:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	f003 0307 	and.w	r3, r3, #7
 800163e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001640:	4b0c      	ldr	r3, [pc, #48]	; (8001674 <__NVIC_SetPriorityGrouping+0x44>)
 8001642:	68db      	ldr	r3, [r3, #12]
 8001644:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001646:	68ba      	ldr	r2, [r7, #8]
 8001648:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800164c:	4013      	ands	r3, r2
 800164e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001650:	68fb      	ldr	r3, [r7, #12]
 8001652:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001654:	68bb      	ldr	r3, [r7, #8]
 8001656:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001658:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800165c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001660:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001662:	4a04      	ldr	r2, [pc, #16]	; (8001674 <__NVIC_SetPriorityGrouping+0x44>)
 8001664:	68bb      	ldr	r3, [r7, #8]
 8001666:	60d3      	str	r3, [r2, #12]
}
 8001668:	bf00      	nop
 800166a:	3714      	adds	r7, #20
 800166c:	46bd      	mov	sp, r7
 800166e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001672:	4770      	bx	lr
 8001674:	e000ed00 	.word	0xe000ed00

08001678 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001678:	b480      	push	{r7}
 800167a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800167c:	4b04      	ldr	r3, [pc, #16]	; (8001690 <__NVIC_GetPriorityGrouping+0x18>)
 800167e:	68db      	ldr	r3, [r3, #12]
 8001680:	0a1b      	lsrs	r3, r3, #8
 8001682:	f003 0307 	and.w	r3, r3, #7
}
 8001686:	4618      	mov	r0, r3
 8001688:	46bd      	mov	sp, r7
 800168a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800168e:	4770      	bx	lr
 8001690:	e000ed00 	.word	0xe000ed00

08001694 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001694:	b480      	push	{r7}
 8001696:	b083      	sub	sp, #12
 8001698:	af00      	add	r7, sp, #0
 800169a:	4603      	mov	r3, r0
 800169c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800169e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016a2:	2b00      	cmp	r3, #0
 80016a4:	db0b      	blt.n	80016be <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80016a6:	79fb      	ldrb	r3, [r7, #7]
 80016a8:	f003 021f 	and.w	r2, r3, #31
 80016ac:	4907      	ldr	r1, [pc, #28]	; (80016cc <__NVIC_EnableIRQ+0x38>)
 80016ae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016b2:	095b      	lsrs	r3, r3, #5
 80016b4:	2001      	movs	r0, #1
 80016b6:	fa00 f202 	lsl.w	r2, r0, r2
 80016ba:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80016be:	bf00      	nop
 80016c0:	370c      	adds	r7, #12
 80016c2:	46bd      	mov	sp, r7
 80016c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016c8:	4770      	bx	lr
 80016ca:	bf00      	nop
 80016cc:	e000e100 	.word	0xe000e100

080016d0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80016d0:	b480      	push	{r7}
 80016d2:	b083      	sub	sp, #12
 80016d4:	af00      	add	r7, sp, #0
 80016d6:	4603      	mov	r3, r0
 80016d8:	6039      	str	r1, [r7, #0]
 80016da:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80016dc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016e0:	2b00      	cmp	r3, #0
 80016e2:	db0a      	blt.n	80016fa <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80016e4:	683b      	ldr	r3, [r7, #0]
 80016e6:	b2da      	uxtb	r2, r3
 80016e8:	490c      	ldr	r1, [pc, #48]	; (800171c <__NVIC_SetPriority+0x4c>)
 80016ea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016ee:	0112      	lsls	r2, r2, #4
 80016f0:	b2d2      	uxtb	r2, r2
 80016f2:	440b      	add	r3, r1
 80016f4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80016f8:	e00a      	b.n	8001710 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80016fa:	683b      	ldr	r3, [r7, #0]
 80016fc:	b2da      	uxtb	r2, r3
 80016fe:	4908      	ldr	r1, [pc, #32]	; (8001720 <__NVIC_SetPriority+0x50>)
 8001700:	79fb      	ldrb	r3, [r7, #7]
 8001702:	f003 030f 	and.w	r3, r3, #15
 8001706:	3b04      	subs	r3, #4
 8001708:	0112      	lsls	r2, r2, #4
 800170a:	b2d2      	uxtb	r2, r2
 800170c:	440b      	add	r3, r1
 800170e:	761a      	strb	r2, [r3, #24]
}
 8001710:	bf00      	nop
 8001712:	370c      	adds	r7, #12
 8001714:	46bd      	mov	sp, r7
 8001716:	f85d 7b04 	ldr.w	r7, [sp], #4
 800171a:	4770      	bx	lr
 800171c:	e000e100 	.word	0xe000e100
 8001720:	e000ed00 	.word	0xe000ed00

08001724 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001724:	b480      	push	{r7}
 8001726:	b089      	sub	sp, #36	; 0x24
 8001728:	af00      	add	r7, sp, #0
 800172a:	60f8      	str	r0, [r7, #12]
 800172c:	60b9      	str	r1, [r7, #8]
 800172e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001730:	68fb      	ldr	r3, [r7, #12]
 8001732:	f003 0307 	and.w	r3, r3, #7
 8001736:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001738:	69fb      	ldr	r3, [r7, #28]
 800173a:	f1c3 0307 	rsb	r3, r3, #7
 800173e:	2b04      	cmp	r3, #4
 8001740:	bf28      	it	cs
 8001742:	2304      	movcs	r3, #4
 8001744:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001746:	69fb      	ldr	r3, [r7, #28]
 8001748:	3304      	adds	r3, #4
 800174a:	2b06      	cmp	r3, #6
 800174c:	d902      	bls.n	8001754 <NVIC_EncodePriority+0x30>
 800174e:	69fb      	ldr	r3, [r7, #28]
 8001750:	3b03      	subs	r3, #3
 8001752:	e000      	b.n	8001756 <NVIC_EncodePriority+0x32>
 8001754:	2300      	movs	r3, #0
 8001756:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001758:	f04f 32ff 	mov.w	r2, #4294967295
 800175c:	69bb      	ldr	r3, [r7, #24]
 800175e:	fa02 f303 	lsl.w	r3, r2, r3
 8001762:	43da      	mvns	r2, r3
 8001764:	68bb      	ldr	r3, [r7, #8]
 8001766:	401a      	ands	r2, r3
 8001768:	697b      	ldr	r3, [r7, #20]
 800176a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800176c:	f04f 31ff 	mov.w	r1, #4294967295
 8001770:	697b      	ldr	r3, [r7, #20]
 8001772:	fa01 f303 	lsl.w	r3, r1, r3
 8001776:	43d9      	mvns	r1, r3
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800177c:	4313      	orrs	r3, r2
         );
}
 800177e:	4618      	mov	r0, r3
 8001780:	3724      	adds	r7, #36	; 0x24
 8001782:	46bd      	mov	sp, r7
 8001784:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001788:	4770      	bx	lr
	...

0800178c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800178c:	b580      	push	{r7, lr}
 800178e:	b082      	sub	sp, #8
 8001790:	af00      	add	r7, sp, #0
 8001792:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	3b01      	subs	r3, #1
 8001798:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800179c:	d301      	bcc.n	80017a2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800179e:	2301      	movs	r3, #1
 80017a0:	e00f      	b.n	80017c2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80017a2:	4a0a      	ldr	r2, [pc, #40]	; (80017cc <SysTick_Config+0x40>)
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	3b01      	subs	r3, #1
 80017a8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80017aa:	210f      	movs	r1, #15
 80017ac:	f04f 30ff 	mov.w	r0, #4294967295
 80017b0:	f7ff ff8e 	bl	80016d0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80017b4:	4b05      	ldr	r3, [pc, #20]	; (80017cc <SysTick_Config+0x40>)
 80017b6:	2200      	movs	r2, #0
 80017b8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80017ba:	4b04      	ldr	r3, [pc, #16]	; (80017cc <SysTick_Config+0x40>)
 80017bc:	2207      	movs	r2, #7
 80017be:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80017c0:	2300      	movs	r3, #0
}
 80017c2:	4618      	mov	r0, r3
 80017c4:	3708      	adds	r7, #8
 80017c6:	46bd      	mov	sp, r7
 80017c8:	bd80      	pop	{r7, pc}
 80017ca:	bf00      	nop
 80017cc:	e000e010 	.word	0xe000e010

080017d0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80017d0:	b580      	push	{r7, lr}
 80017d2:	b082      	sub	sp, #8
 80017d4:	af00      	add	r7, sp, #0
 80017d6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80017d8:	6878      	ldr	r0, [r7, #4]
 80017da:	f7ff ff29 	bl	8001630 <__NVIC_SetPriorityGrouping>
}
 80017de:	bf00      	nop
 80017e0:	3708      	adds	r7, #8
 80017e2:	46bd      	mov	sp, r7
 80017e4:	bd80      	pop	{r7, pc}

080017e6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80017e6:	b580      	push	{r7, lr}
 80017e8:	b086      	sub	sp, #24
 80017ea:	af00      	add	r7, sp, #0
 80017ec:	4603      	mov	r3, r0
 80017ee:	60b9      	str	r1, [r7, #8]
 80017f0:	607a      	str	r2, [r7, #4]
 80017f2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80017f4:	2300      	movs	r3, #0
 80017f6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80017f8:	f7ff ff3e 	bl	8001678 <__NVIC_GetPriorityGrouping>
 80017fc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80017fe:	687a      	ldr	r2, [r7, #4]
 8001800:	68b9      	ldr	r1, [r7, #8]
 8001802:	6978      	ldr	r0, [r7, #20]
 8001804:	f7ff ff8e 	bl	8001724 <NVIC_EncodePriority>
 8001808:	4602      	mov	r2, r0
 800180a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800180e:	4611      	mov	r1, r2
 8001810:	4618      	mov	r0, r3
 8001812:	f7ff ff5d 	bl	80016d0 <__NVIC_SetPriority>
}
 8001816:	bf00      	nop
 8001818:	3718      	adds	r7, #24
 800181a:	46bd      	mov	sp, r7
 800181c:	bd80      	pop	{r7, pc}

0800181e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800181e:	b580      	push	{r7, lr}
 8001820:	b082      	sub	sp, #8
 8001822:	af00      	add	r7, sp, #0
 8001824:	4603      	mov	r3, r0
 8001826:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001828:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800182c:	4618      	mov	r0, r3
 800182e:	f7ff ff31 	bl	8001694 <__NVIC_EnableIRQ>
}
 8001832:	bf00      	nop
 8001834:	3708      	adds	r7, #8
 8001836:	46bd      	mov	sp, r7
 8001838:	bd80      	pop	{r7, pc}

0800183a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800183a:	b580      	push	{r7, lr}
 800183c:	b082      	sub	sp, #8
 800183e:	af00      	add	r7, sp, #0
 8001840:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001842:	6878      	ldr	r0, [r7, #4]
 8001844:	f7ff ffa2 	bl	800178c <SysTick_Config>
 8001848:	4603      	mov	r3, r0
}
 800184a:	4618      	mov	r0, r3
 800184c:	3708      	adds	r7, #8
 800184e:	46bd      	mov	sp, r7
 8001850:	bd80      	pop	{r7, pc}

08001852 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001852:	b580      	push	{r7, lr}
 8001854:	b084      	sub	sp, #16
 8001856:	af00      	add	r7, sp, #0
 8001858:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800185e:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8001860:	f7ff feda 	bl	8001618 <HAL_GetTick>
 8001864:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800186c:	b2db      	uxtb	r3, r3
 800186e:	2b02      	cmp	r3, #2
 8001870:	d008      	beq.n	8001884 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	2280      	movs	r2, #128	; 0x80
 8001876:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	2200      	movs	r2, #0
 800187c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8001880:	2301      	movs	r3, #1
 8001882:	e052      	b.n	800192a <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	681b      	ldr	r3, [r3, #0]
 8001888:	681a      	ldr	r2, [r3, #0]
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	681b      	ldr	r3, [r3, #0]
 800188e:	f022 0216 	bic.w	r2, r2, #22
 8001892:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	681b      	ldr	r3, [r3, #0]
 8001898:	695a      	ldr	r2, [r3, #20]
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	681b      	ldr	r3, [r3, #0]
 800189e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80018a2:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018a8:	2b00      	cmp	r3, #0
 80018aa:	d103      	bne.n	80018b4 <HAL_DMA_Abort+0x62>
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80018b0:	2b00      	cmp	r3, #0
 80018b2:	d007      	beq.n	80018c4 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	681b      	ldr	r3, [r3, #0]
 80018b8:	681a      	ldr	r2, [r3, #0]
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	681b      	ldr	r3, [r3, #0]
 80018be:	f022 0208 	bic.w	r2, r2, #8
 80018c2:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	681b      	ldr	r3, [r3, #0]
 80018c8:	681a      	ldr	r2, [r3, #0]
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	681b      	ldr	r3, [r3, #0]
 80018ce:	f022 0201 	bic.w	r2, r2, #1
 80018d2:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80018d4:	e013      	b.n	80018fe <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80018d6:	f7ff fe9f 	bl	8001618 <HAL_GetTick>
 80018da:	4602      	mov	r2, r0
 80018dc:	68bb      	ldr	r3, [r7, #8]
 80018de:	1ad3      	subs	r3, r2, r3
 80018e0:	2b05      	cmp	r3, #5
 80018e2:	d90c      	bls.n	80018fe <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	2220      	movs	r2, #32
 80018e8:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	2203      	movs	r2, #3
 80018ee:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	2200      	movs	r2, #0
 80018f6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 80018fa:	2303      	movs	r3, #3
 80018fc:	e015      	b.n	800192a <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	681b      	ldr	r3, [r3, #0]
 8001902:	681b      	ldr	r3, [r3, #0]
 8001904:	f003 0301 	and.w	r3, r3, #1
 8001908:	2b00      	cmp	r3, #0
 800190a:	d1e4      	bne.n	80018d6 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001910:	223f      	movs	r2, #63	; 0x3f
 8001912:	409a      	lsls	r2, r3
 8001914:	68fb      	ldr	r3, [r7, #12]
 8001916:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	2201      	movs	r2, #1
 800191c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	2200      	movs	r2, #0
 8001924:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8001928:	2300      	movs	r3, #0
}
 800192a:	4618      	mov	r0, r3
 800192c:	3710      	adds	r7, #16
 800192e:	46bd      	mov	sp, r7
 8001930:	bd80      	pop	{r7, pc}

08001932 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001932:	b480      	push	{r7}
 8001934:	b083      	sub	sp, #12
 8001936:	af00      	add	r7, sp, #0
 8001938:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001940:	b2db      	uxtb	r3, r3
 8001942:	2b02      	cmp	r3, #2
 8001944:	d004      	beq.n	8001950 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	2280      	movs	r2, #128	; 0x80
 800194a:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 800194c:	2301      	movs	r3, #1
 800194e:	e00c      	b.n	800196a <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	2205      	movs	r2, #5
 8001954:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	681b      	ldr	r3, [r3, #0]
 800195c:	681a      	ldr	r2, [r3, #0]
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	681b      	ldr	r3, [r3, #0]
 8001962:	f022 0201 	bic.w	r2, r2, #1
 8001966:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8001968:	2300      	movs	r3, #0
}
 800196a:	4618      	mov	r0, r3
 800196c:	370c      	adds	r7, #12
 800196e:	46bd      	mov	sp, r7
 8001970:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001974:	4770      	bx	lr
	...

08001978 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001978:	b480      	push	{r7}
 800197a:	b089      	sub	sp, #36	; 0x24
 800197c:	af00      	add	r7, sp, #0
 800197e:	6078      	str	r0, [r7, #4]
 8001980:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001982:	2300      	movs	r3, #0
 8001984:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001986:	2300      	movs	r3, #0
 8001988:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800198a:	2300      	movs	r3, #0
 800198c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800198e:	2300      	movs	r3, #0
 8001990:	61fb      	str	r3, [r7, #28]
 8001992:	e177      	b.n	8001c84 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001994:	2201      	movs	r2, #1
 8001996:	69fb      	ldr	r3, [r7, #28]
 8001998:	fa02 f303 	lsl.w	r3, r2, r3
 800199c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800199e:	683b      	ldr	r3, [r7, #0]
 80019a0:	681b      	ldr	r3, [r3, #0]
 80019a2:	697a      	ldr	r2, [r7, #20]
 80019a4:	4013      	ands	r3, r2
 80019a6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80019a8:	693a      	ldr	r2, [r7, #16]
 80019aa:	697b      	ldr	r3, [r7, #20]
 80019ac:	429a      	cmp	r2, r3
 80019ae:	f040 8166 	bne.w	8001c7e <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80019b2:	683b      	ldr	r3, [r7, #0]
 80019b4:	685b      	ldr	r3, [r3, #4]
 80019b6:	f003 0303 	and.w	r3, r3, #3
 80019ba:	2b01      	cmp	r3, #1
 80019bc:	d005      	beq.n	80019ca <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80019be:	683b      	ldr	r3, [r7, #0]
 80019c0:	685b      	ldr	r3, [r3, #4]
 80019c2:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80019c6:	2b02      	cmp	r3, #2
 80019c8:	d130      	bne.n	8001a2c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	689b      	ldr	r3, [r3, #8]
 80019ce:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80019d0:	69fb      	ldr	r3, [r7, #28]
 80019d2:	005b      	lsls	r3, r3, #1
 80019d4:	2203      	movs	r2, #3
 80019d6:	fa02 f303 	lsl.w	r3, r2, r3
 80019da:	43db      	mvns	r3, r3
 80019dc:	69ba      	ldr	r2, [r7, #24]
 80019de:	4013      	ands	r3, r2
 80019e0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80019e2:	683b      	ldr	r3, [r7, #0]
 80019e4:	68da      	ldr	r2, [r3, #12]
 80019e6:	69fb      	ldr	r3, [r7, #28]
 80019e8:	005b      	lsls	r3, r3, #1
 80019ea:	fa02 f303 	lsl.w	r3, r2, r3
 80019ee:	69ba      	ldr	r2, [r7, #24]
 80019f0:	4313      	orrs	r3, r2
 80019f2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	69ba      	ldr	r2, [r7, #24]
 80019f8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	685b      	ldr	r3, [r3, #4]
 80019fe:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001a00:	2201      	movs	r2, #1
 8001a02:	69fb      	ldr	r3, [r7, #28]
 8001a04:	fa02 f303 	lsl.w	r3, r2, r3
 8001a08:	43db      	mvns	r3, r3
 8001a0a:	69ba      	ldr	r2, [r7, #24]
 8001a0c:	4013      	ands	r3, r2
 8001a0e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001a10:	683b      	ldr	r3, [r7, #0]
 8001a12:	685b      	ldr	r3, [r3, #4]
 8001a14:	091b      	lsrs	r3, r3, #4
 8001a16:	f003 0201 	and.w	r2, r3, #1
 8001a1a:	69fb      	ldr	r3, [r7, #28]
 8001a1c:	fa02 f303 	lsl.w	r3, r2, r3
 8001a20:	69ba      	ldr	r2, [r7, #24]
 8001a22:	4313      	orrs	r3, r2
 8001a24:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	69ba      	ldr	r2, [r7, #24]
 8001a2a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001a2c:	683b      	ldr	r3, [r7, #0]
 8001a2e:	685b      	ldr	r3, [r3, #4]
 8001a30:	f003 0303 	and.w	r3, r3, #3
 8001a34:	2b03      	cmp	r3, #3
 8001a36:	d017      	beq.n	8001a68 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	68db      	ldr	r3, [r3, #12]
 8001a3c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001a3e:	69fb      	ldr	r3, [r7, #28]
 8001a40:	005b      	lsls	r3, r3, #1
 8001a42:	2203      	movs	r2, #3
 8001a44:	fa02 f303 	lsl.w	r3, r2, r3
 8001a48:	43db      	mvns	r3, r3
 8001a4a:	69ba      	ldr	r2, [r7, #24]
 8001a4c:	4013      	ands	r3, r2
 8001a4e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001a50:	683b      	ldr	r3, [r7, #0]
 8001a52:	689a      	ldr	r2, [r3, #8]
 8001a54:	69fb      	ldr	r3, [r7, #28]
 8001a56:	005b      	lsls	r3, r3, #1
 8001a58:	fa02 f303 	lsl.w	r3, r2, r3
 8001a5c:	69ba      	ldr	r2, [r7, #24]
 8001a5e:	4313      	orrs	r3, r2
 8001a60:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	69ba      	ldr	r2, [r7, #24]
 8001a66:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001a68:	683b      	ldr	r3, [r7, #0]
 8001a6a:	685b      	ldr	r3, [r3, #4]
 8001a6c:	f003 0303 	and.w	r3, r3, #3
 8001a70:	2b02      	cmp	r3, #2
 8001a72:	d123      	bne.n	8001abc <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001a74:	69fb      	ldr	r3, [r7, #28]
 8001a76:	08da      	lsrs	r2, r3, #3
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	3208      	adds	r2, #8
 8001a7c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001a80:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001a82:	69fb      	ldr	r3, [r7, #28]
 8001a84:	f003 0307 	and.w	r3, r3, #7
 8001a88:	009b      	lsls	r3, r3, #2
 8001a8a:	220f      	movs	r2, #15
 8001a8c:	fa02 f303 	lsl.w	r3, r2, r3
 8001a90:	43db      	mvns	r3, r3
 8001a92:	69ba      	ldr	r2, [r7, #24]
 8001a94:	4013      	ands	r3, r2
 8001a96:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001a98:	683b      	ldr	r3, [r7, #0]
 8001a9a:	691a      	ldr	r2, [r3, #16]
 8001a9c:	69fb      	ldr	r3, [r7, #28]
 8001a9e:	f003 0307 	and.w	r3, r3, #7
 8001aa2:	009b      	lsls	r3, r3, #2
 8001aa4:	fa02 f303 	lsl.w	r3, r2, r3
 8001aa8:	69ba      	ldr	r2, [r7, #24]
 8001aaa:	4313      	orrs	r3, r2
 8001aac:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001aae:	69fb      	ldr	r3, [r7, #28]
 8001ab0:	08da      	lsrs	r2, r3, #3
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	3208      	adds	r2, #8
 8001ab6:	69b9      	ldr	r1, [r7, #24]
 8001ab8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	681b      	ldr	r3, [r3, #0]
 8001ac0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001ac2:	69fb      	ldr	r3, [r7, #28]
 8001ac4:	005b      	lsls	r3, r3, #1
 8001ac6:	2203      	movs	r2, #3
 8001ac8:	fa02 f303 	lsl.w	r3, r2, r3
 8001acc:	43db      	mvns	r3, r3
 8001ace:	69ba      	ldr	r2, [r7, #24]
 8001ad0:	4013      	ands	r3, r2
 8001ad2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001ad4:	683b      	ldr	r3, [r7, #0]
 8001ad6:	685b      	ldr	r3, [r3, #4]
 8001ad8:	f003 0203 	and.w	r2, r3, #3
 8001adc:	69fb      	ldr	r3, [r7, #28]
 8001ade:	005b      	lsls	r3, r3, #1
 8001ae0:	fa02 f303 	lsl.w	r3, r2, r3
 8001ae4:	69ba      	ldr	r2, [r7, #24]
 8001ae6:	4313      	orrs	r3, r2
 8001ae8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	69ba      	ldr	r2, [r7, #24]
 8001aee:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001af0:	683b      	ldr	r3, [r7, #0]
 8001af2:	685b      	ldr	r3, [r3, #4]
 8001af4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001af8:	2b00      	cmp	r3, #0
 8001afa:	f000 80c0 	beq.w	8001c7e <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001afe:	2300      	movs	r3, #0
 8001b00:	60fb      	str	r3, [r7, #12]
 8001b02:	4b66      	ldr	r3, [pc, #408]	; (8001c9c <HAL_GPIO_Init+0x324>)
 8001b04:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b06:	4a65      	ldr	r2, [pc, #404]	; (8001c9c <HAL_GPIO_Init+0x324>)
 8001b08:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001b0c:	6453      	str	r3, [r2, #68]	; 0x44
 8001b0e:	4b63      	ldr	r3, [pc, #396]	; (8001c9c <HAL_GPIO_Init+0x324>)
 8001b10:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b12:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001b16:	60fb      	str	r3, [r7, #12]
 8001b18:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001b1a:	4a61      	ldr	r2, [pc, #388]	; (8001ca0 <HAL_GPIO_Init+0x328>)
 8001b1c:	69fb      	ldr	r3, [r7, #28]
 8001b1e:	089b      	lsrs	r3, r3, #2
 8001b20:	3302      	adds	r3, #2
 8001b22:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001b26:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001b28:	69fb      	ldr	r3, [r7, #28]
 8001b2a:	f003 0303 	and.w	r3, r3, #3
 8001b2e:	009b      	lsls	r3, r3, #2
 8001b30:	220f      	movs	r2, #15
 8001b32:	fa02 f303 	lsl.w	r3, r2, r3
 8001b36:	43db      	mvns	r3, r3
 8001b38:	69ba      	ldr	r2, [r7, #24]
 8001b3a:	4013      	ands	r3, r2
 8001b3c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	4a58      	ldr	r2, [pc, #352]	; (8001ca4 <HAL_GPIO_Init+0x32c>)
 8001b42:	4293      	cmp	r3, r2
 8001b44:	d037      	beq.n	8001bb6 <HAL_GPIO_Init+0x23e>
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	4a57      	ldr	r2, [pc, #348]	; (8001ca8 <HAL_GPIO_Init+0x330>)
 8001b4a:	4293      	cmp	r3, r2
 8001b4c:	d031      	beq.n	8001bb2 <HAL_GPIO_Init+0x23a>
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	4a56      	ldr	r2, [pc, #344]	; (8001cac <HAL_GPIO_Init+0x334>)
 8001b52:	4293      	cmp	r3, r2
 8001b54:	d02b      	beq.n	8001bae <HAL_GPIO_Init+0x236>
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	4a55      	ldr	r2, [pc, #340]	; (8001cb0 <HAL_GPIO_Init+0x338>)
 8001b5a:	4293      	cmp	r3, r2
 8001b5c:	d025      	beq.n	8001baa <HAL_GPIO_Init+0x232>
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	4a54      	ldr	r2, [pc, #336]	; (8001cb4 <HAL_GPIO_Init+0x33c>)
 8001b62:	4293      	cmp	r3, r2
 8001b64:	d01f      	beq.n	8001ba6 <HAL_GPIO_Init+0x22e>
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	4a53      	ldr	r2, [pc, #332]	; (8001cb8 <HAL_GPIO_Init+0x340>)
 8001b6a:	4293      	cmp	r3, r2
 8001b6c:	d019      	beq.n	8001ba2 <HAL_GPIO_Init+0x22a>
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	4a52      	ldr	r2, [pc, #328]	; (8001cbc <HAL_GPIO_Init+0x344>)
 8001b72:	4293      	cmp	r3, r2
 8001b74:	d013      	beq.n	8001b9e <HAL_GPIO_Init+0x226>
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	4a51      	ldr	r2, [pc, #324]	; (8001cc0 <HAL_GPIO_Init+0x348>)
 8001b7a:	4293      	cmp	r3, r2
 8001b7c:	d00d      	beq.n	8001b9a <HAL_GPIO_Init+0x222>
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	4a50      	ldr	r2, [pc, #320]	; (8001cc4 <HAL_GPIO_Init+0x34c>)
 8001b82:	4293      	cmp	r3, r2
 8001b84:	d007      	beq.n	8001b96 <HAL_GPIO_Init+0x21e>
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	4a4f      	ldr	r2, [pc, #316]	; (8001cc8 <HAL_GPIO_Init+0x350>)
 8001b8a:	4293      	cmp	r3, r2
 8001b8c:	d101      	bne.n	8001b92 <HAL_GPIO_Init+0x21a>
 8001b8e:	2309      	movs	r3, #9
 8001b90:	e012      	b.n	8001bb8 <HAL_GPIO_Init+0x240>
 8001b92:	230a      	movs	r3, #10
 8001b94:	e010      	b.n	8001bb8 <HAL_GPIO_Init+0x240>
 8001b96:	2308      	movs	r3, #8
 8001b98:	e00e      	b.n	8001bb8 <HAL_GPIO_Init+0x240>
 8001b9a:	2307      	movs	r3, #7
 8001b9c:	e00c      	b.n	8001bb8 <HAL_GPIO_Init+0x240>
 8001b9e:	2306      	movs	r3, #6
 8001ba0:	e00a      	b.n	8001bb8 <HAL_GPIO_Init+0x240>
 8001ba2:	2305      	movs	r3, #5
 8001ba4:	e008      	b.n	8001bb8 <HAL_GPIO_Init+0x240>
 8001ba6:	2304      	movs	r3, #4
 8001ba8:	e006      	b.n	8001bb8 <HAL_GPIO_Init+0x240>
 8001baa:	2303      	movs	r3, #3
 8001bac:	e004      	b.n	8001bb8 <HAL_GPIO_Init+0x240>
 8001bae:	2302      	movs	r3, #2
 8001bb0:	e002      	b.n	8001bb8 <HAL_GPIO_Init+0x240>
 8001bb2:	2301      	movs	r3, #1
 8001bb4:	e000      	b.n	8001bb8 <HAL_GPIO_Init+0x240>
 8001bb6:	2300      	movs	r3, #0
 8001bb8:	69fa      	ldr	r2, [r7, #28]
 8001bba:	f002 0203 	and.w	r2, r2, #3
 8001bbe:	0092      	lsls	r2, r2, #2
 8001bc0:	4093      	lsls	r3, r2
 8001bc2:	69ba      	ldr	r2, [r7, #24]
 8001bc4:	4313      	orrs	r3, r2
 8001bc6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001bc8:	4935      	ldr	r1, [pc, #212]	; (8001ca0 <HAL_GPIO_Init+0x328>)
 8001bca:	69fb      	ldr	r3, [r7, #28]
 8001bcc:	089b      	lsrs	r3, r3, #2
 8001bce:	3302      	adds	r3, #2
 8001bd0:	69ba      	ldr	r2, [r7, #24]
 8001bd2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001bd6:	4b3d      	ldr	r3, [pc, #244]	; (8001ccc <HAL_GPIO_Init+0x354>)
 8001bd8:	689b      	ldr	r3, [r3, #8]
 8001bda:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001bdc:	693b      	ldr	r3, [r7, #16]
 8001bde:	43db      	mvns	r3, r3
 8001be0:	69ba      	ldr	r2, [r7, #24]
 8001be2:	4013      	ands	r3, r2
 8001be4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001be6:	683b      	ldr	r3, [r7, #0]
 8001be8:	685b      	ldr	r3, [r3, #4]
 8001bea:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001bee:	2b00      	cmp	r3, #0
 8001bf0:	d003      	beq.n	8001bfa <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8001bf2:	69ba      	ldr	r2, [r7, #24]
 8001bf4:	693b      	ldr	r3, [r7, #16]
 8001bf6:	4313      	orrs	r3, r2
 8001bf8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001bfa:	4a34      	ldr	r2, [pc, #208]	; (8001ccc <HAL_GPIO_Init+0x354>)
 8001bfc:	69bb      	ldr	r3, [r7, #24]
 8001bfe:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001c00:	4b32      	ldr	r3, [pc, #200]	; (8001ccc <HAL_GPIO_Init+0x354>)
 8001c02:	68db      	ldr	r3, [r3, #12]
 8001c04:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001c06:	693b      	ldr	r3, [r7, #16]
 8001c08:	43db      	mvns	r3, r3
 8001c0a:	69ba      	ldr	r2, [r7, #24]
 8001c0c:	4013      	ands	r3, r2
 8001c0e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001c10:	683b      	ldr	r3, [r7, #0]
 8001c12:	685b      	ldr	r3, [r3, #4]
 8001c14:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001c18:	2b00      	cmp	r3, #0
 8001c1a:	d003      	beq.n	8001c24 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8001c1c:	69ba      	ldr	r2, [r7, #24]
 8001c1e:	693b      	ldr	r3, [r7, #16]
 8001c20:	4313      	orrs	r3, r2
 8001c22:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001c24:	4a29      	ldr	r2, [pc, #164]	; (8001ccc <HAL_GPIO_Init+0x354>)
 8001c26:	69bb      	ldr	r3, [r7, #24]
 8001c28:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001c2a:	4b28      	ldr	r3, [pc, #160]	; (8001ccc <HAL_GPIO_Init+0x354>)
 8001c2c:	685b      	ldr	r3, [r3, #4]
 8001c2e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001c30:	693b      	ldr	r3, [r7, #16]
 8001c32:	43db      	mvns	r3, r3
 8001c34:	69ba      	ldr	r2, [r7, #24]
 8001c36:	4013      	ands	r3, r2
 8001c38:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001c3a:	683b      	ldr	r3, [r7, #0]
 8001c3c:	685b      	ldr	r3, [r3, #4]
 8001c3e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c42:	2b00      	cmp	r3, #0
 8001c44:	d003      	beq.n	8001c4e <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8001c46:	69ba      	ldr	r2, [r7, #24]
 8001c48:	693b      	ldr	r3, [r7, #16]
 8001c4a:	4313      	orrs	r3, r2
 8001c4c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001c4e:	4a1f      	ldr	r2, [pc, #124]	; (8001ccc <HAL_GPIO_Init+0x354>)
 8001c50:	69bb      	ldr	r3, [r7, #24]
 8001c52:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001c54:	4b1d      	ldr	r3, [pc, #116]	; (8001ccc <HAL_GPIO_Init+0x354>)
 8001c56:	681b      	ldr	r3, [r3, #0]
 8001c58:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001c5a:	693b      	ldr	r3, [r7, #16]
 8001c5c:	43db      	mvns	r3, r3
 8001c5e:	69ba      	ldr	r2, [r7, #24]
 8001c60:	4013      	ands	r3, r2
 8001c62:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001c64:	683b      	ldr	r3, [r7, #0]
 8001c66:	685b      	ldr	r3, [r3, #4]
 8001c68:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001c6c:	2b00      	cmp	r3, #0
 8001c6e:	d003      	beq.n	8001c78 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8001c70:	69ba      	ldr	r2, [r7, #24]
 8001c72:	693b      	ldr	r3, [r7, #16]
 8001c74:	4313      	orrs	r3, r2
 8001c76:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001c78:	4a14      	ldr	r2, [pc, #80]	; (8001ccc <HAL_GPIO_Init+0x354>)
 8001c7a:	69bb      	ldr	r3, [r7, #24]
 8001c7c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001c7e:	69fb      	ldr	r3, [r7, #28]
 8001c80:	3301      	adds	r3, #1
 8001c82:	61fb      	str	r3, [r7, #28]
 8001c84:	69fb      	ldr	r3, [r7, #28]
 8001c86:	2b0f      	cmp	r3, #15
 8001c88:	f67f ae84 	bls.w	8001994 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001c8c:	bf00      	nop
 8001c8e:	bf00      	nop
 8001c90:	3724      	adds	r7, #36	; 0x24
 8001c92:	46bd      	mov	sp, r7
 8001c94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c98:	4770      	bx	lr
 8001c9a:	bf00      	nop
 8001c9c:	40023800 	.word	0x40023800
 8001ca0:	40013800 	.word	0x40013800
 8001ca4:	40020000 	.word	0x40020000
 8001ca8:	40020400 	.word	0x40020400
 8001cac:	40020800 	.word	0x40020800
 8001cb0:	40020c00 	.word	0x40020c00
 8001cb4:	40021000 	.word	0x40021000
 8001cb8:	40021400 	.word	0x40021400
 8001cbc:	40021800 	.word	0x40021800
 8001cc0:	40021c00 	.word	0x40021c00
 8001cc4:	40022000 	.word	0x40022000
 8001cc8:	40022400 	.word	0x40022400
 8001ccc:	40013c00 	.word	0x40013c00

08001cd0 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001cd0:	b480      	push	{r7}
 8001cd2:	b085      	sub	sp, #20
 8001cd4:	af00      	add	r7, sp, #0
 8001cd6:	6078      	str	r0, [r7, #4]
 8001cd8:	460b      	mov	r3, r1
 8001cda:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	691a      	ldr	r2, [r3, #16]
 8001ce0:	887b      	ldrh	r3, [r7, #2]
 8001ce2:	4013      	ands	r3, r2
 8001ce4:	2b00      	cmp	r3, #0
 8001ce6:	d002      	beq.n	8001cee <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001ce8:	2301      	movs	r3, #1
 8001cea:	73fb      	strb	r3, [r7, #15]
 8001cec:	e001      	b.n	8001cf2 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001cee:	2300      	movs	r3, #0
 8001cf0:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001cf2:	7bfb      	ldrb	r3, [r7, #15]
}
 8001cf4:	4618      	mov	r0, r3
 8001cf6:	3714      	adds	r7, #20
 8001cf8:	46bd      	mov	sp, r7
 8001cfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cfe:	4770      	bx	lr

08001d00 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001d00:	b480      	push	{r7}
 8001d02:	b083      	sub	sp, #12
 8001d04:	af00      	add	r7, sp, #0
 8001d06:	6078      	str	r0, [r7, #4]
 8001d08:	460b      	mov	r3, r1
 8001d0a:	807b      	strh	r3, [r7, #2]
 8001d0c:	4613      	mov	r3, r2
 8001d0e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001d10:	787b      	ldrb	r3, [r7, #1]
 8001d12:	2b00      	cmp	r3, #0
 8001d14:	d003      	beq.n	8001d1e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001d16:	887a      	ldrh	r2, [r7, #2]
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001d1c:	e003      	b.n	8001d26 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001d1e:	887b      	ldrh	r3, [r7, #2]
 8001d20:	041a      	lsls	r2, r3, #16
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	619a      	str	r2, [r3, #24]
}
 8001d26:	bf00      	nop
 8001d28:	370c      	adds	r7, #12
 8001d2a:	46bd      	mov	sp, r7
 8001d2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d30:	4770      	bx	lr
	...

08001d34 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001d34:	b580      	push	{r7, lr}
 8001d36:	b086      	sub	sp, #24
 8001d38:	af00      	add	r7, sp, #0
 8001d3a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	2b00      	cmp	r3, #0
 8001d40:	d101      	bne.n	8001d46 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001d42:	2301      	movs	r3, #1
 8001d44:	e267      	b.n	8002216 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	681b      	ldr	r3, [r3, #0]
 8001d4a:	f003 0301 	and.w	r3, r3, #1
 8001d4e:	2b00      	cmp	r3, #0
 8001d50:	d075      	beq.n	8001e3e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001d52:	4b88      	ldr	r3, [pc, #544]	; (8001f74 <HAL_RCC_OscConfig+0x240>)
 8001d54:	689b      	ldr	r3, [r3, #8]
 8001d56:	f003 030c 	and.w	r3, r3, #12
 8001d5a:	2b04      	cmp	r3, #4
 8001d5c:	d00c      	beq.n	8001d78 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001d5e:	4b85      	ldr	r3, [pc, #532]	; (8001f74 <HAL_RCC_OscConfig+0x240>)
 8001d60:	689b      	ldr	r3, [r3, #8]
 8001d62:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001d66:	2b08      	cmp	r3, #8
 8001d68:	d112      	bne.n	8001d90 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001d6a:	4b82      	ldr	r3, [pc, #520]	; (8001f74 <HAL_RCC_OscConfig+0x240>)
 8001d6c:	685b      	ldr	r3, [r3, #4]
 8001d6e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001d72:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001d76:	d10b      	bne.n	8001d90 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001d78:	4b7e      	ldr	r3, [pc, #504]	; (8001f74 <HAL_RCC_OscConfig+0x240>)
 8001d7a:	681b      	ldr	r3, [r3, #0]
 8001d7c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d80:	2b00      	cmp	r3, #0
 8001d82:	d05b      	beq.n	8001e3c <HAL_RCC_OscConfig+0x108>
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	685b      	ldr	r3, [r3, #4]
 8001d88:	2b00      	cmp	r3, #0
 8001d8a:	d157      	bne.n	8001e3c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001d8c:	2301      	movs	r3, #1
 8001d8e:	e242      	b.n	8002216 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	685b      	ldr	r3, [r3, #4]
 8001d94:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001d98:	d106      	bne.n	8001da8 <HAL_RCC_OscConfig+0x74>
 8001d9a:	4b76      	ldr	r3, [pc, #472]	; (8001f74 <HAL_RCC_OscConfig+0x240>)
 8001d9c:	681b      	ldr	r3, [r3, #0]
 8001d9e:	4a75      	ldr	r2, [pc, #468]	; (8001f74 <HAL_RCC_OscConfig+0x240>)
 8001da0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001da4:	6013      	str	r3, [r2, #0]
 8001da6:	e01d      	b.n	8001de4 <HAL_RCC_OscConfig+0xb0>
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	685b      	ldr	r3, [r3, #4]
 8001dac:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001db0:	d10c      	bne.n	8001dcc <HAL_RCC_OscConfig+0x98>
 8001db2:	4b70      	ldr	r3, [pc, #448]	; (8001f74 <HAL_RCC_OscConfig+0x240>)
 8001db4:	681b      	ldr	r3, [r3, #0]
 8001db6:	4a6f      	ldr	r2, [pc, #444]	; (8001f74 <HAL_RCC_OscConfig+0x240>)
 8001db8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001dbc:	6013      	str	r3, [r2, #0]
 8001dbe:	4b6d      	ldr	r3, [pc, #436]	; (8001f74 <HAL_RCC_OscConfig+0x240>)
 8001dc0:	681b      	ldr	r3, [r3, #0]
 8001dc2:	4a6c      	ldr	r2, [pc, #432]	; (8001f74 <HAL_RCC_OscConfig+0x240>)
 8001dc4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001dc8:	6013      	str	r3, [r2, #0]
 8001dca:	e00b      	b.n	8001de4 <HAL_RCC_OscConfig+0xb0>
 8001dcc:	4b69      	ldr	r3, [pc, #420]	; (8001f74 <HAL_RCC_OscConfig+0x240>)
 8001dce:	681b      	ldr	r3, [r3, #0]
 8001dd0:	4a68      	ldr	r2, [pc, #416]	; (8001f74 <HAL_RCC_OscConfig+0x240>)
 8001dd2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001dd6:	6013      	str	r3, [r2, #0]
 8001dd8:	4b66      	ldr	r3, [pc, #408]	; (8001f74 <HAL_RCC_OscConfig+0x240>)
 8001dda:	681b      	ldr	r3, [r3, #0]
 8001ddc:	4a65      	ldr	r2, [pc, #404]	; (8001f74 <HAL_RCC_OscConfig+0x240>)
 8001dde:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001de2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	685b      	ldr	r3, [r3, #4]
 8001de8:	2b00      	cmp	r3, #0
 8001dea:	d013      	beq.n	8001e14 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001dec:	f7ff fc14 	bl	8001618 <HAL_GetTick>
 8001df0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001df2:	e008      	b.n	8001e06 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001df4:	f7ff fc10 	bl	8001618 <HAL_GetTick>
 8001df8:	4602      	mov	r2, r0
 8001dfa:	693b      	ldr	r3, [r7, #16]
 8001dfc:	1ad3      	subs	r3, r2, r3
 8001dfe:	2b64      	cmp	r3, #100	; 0x64
 8001e00:	d901      	bls.n	8001e06 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001e02:	2303      	movs	r3, #3
 8001e04:	e207      	b.n	8002216 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001e06:	4b5b      	ldr	r3, [pc, #364]	; (8001f74 <HAL_RCC_OscConfig+0x240>)
 8001e08:	681b      	ldr	r3, [r3, #0]
 8001e0a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e0e:	2b00      	cmp	r3, #0
 8001e10:	d0f0      	beq.n	8001df4 <HAL_RCC_OscConfig+0xc0>
 8001e12:	e014      	b.n	8001e3e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e14:	f7ff fc00 	bl	8001618 <HAL_GetTick>
 8001e18:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001e1a:	e008      	b.n	8001e2e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001e1c:	f7ff fbfc 	bl	8001618 <HAL_GetTick>
 8001e20:	4602      	mov	r2, r0
 8001e22:	693b      	ldr	r3, [r7, #16]
 8001e24:	1ad3      	subs	r3, r2, r3
 8001e26:	2b64      	cmp	r3, #100	; 0x64
 8001e28:	d901      	bls.n	8001e2e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001e2a:	2303      	movs	r3, #3
 8001e2c:	e1f3      	b.n	8002216 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001e2e:	4b51      	ldr	r3, [pc, #324]	; (8001f74 <HAL_RCC_OscConfig+0x240>)
 8001e30:	681b      	ldr	r3, [r3, #0]
 8001e32:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e36:	2b00      	cmp	r3, #0
 8001e38:	d1f0      	bne.n	8001e1c <HAL_RCC_OscConfig+0xe8>
 8001e3a:	e000      	b.n	8001e3e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001e3c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	681b      	ldr	r3, [r3, #0]
 8001e42:	f003 0302 	and.w	r3, r3, #2
 8001e46:	2b00      	cmp	r3, #0
 8001e48:	d063      	beq.n	8001f12 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001e4a:	4b4a      	ldr	r3, [pc, #296]	; (8001f74 <HAL_RCC_OscConfig+0x240>)
 8001e4c:	689b      	ldr	r3, [r3, #8]
 8001e4e:	f003 030c 	and.w	r3, r3, #12
 8001e52:	2b00      	cmp	r3, #0
 8001e54:	d00b      	beq.n	8001e6e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001e56:	4b47      	ldr	r3, [pc, #284]	; (8001f74 <HAL_RCC_OscConfig+0x240>)
 8001e58:	689b      	ldr	r3, [r3, #8]
 8001e5a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001e5e:	2b08      	cmp	r3, #8
 8001e60:	d11c      	bne.n	8001e9c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001e62:	4b44      	ldr	r3, [pc, #272]	; (8001f74 <HAL_RCC_OscConfig+0x240>)
 8001e64:	685b      	ldr	r3, [r3, #4]
 8001e66:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001e6a:	2b00      	cmp	r3, #0
 8001e6c:	d116      	bne.n	8001e9c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001e6e:	4b41      	ldr	r3, [pc, #260]	; (8001f74 <HAL_RCC_OscConfig+0x240>)
 8001e70:	681b      	ldr	r3, [r3, #0]
 8001e72:	f003 0302 	and.w	r3, r3, #2
 8001e76:	2b00      	cmp	r3, #0
 8001e78:	d005      	beq.n	8001e86 <HAL_RCC_OscConfig+0x152>
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	68db      	ldr	r3, [r3, #12]
 8001e7e:	2b01      	cmp	r3, #1
 8001e80:	d001      	beq.n	8001e86 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8001e82:	2301      	movs	r3, #1
 8001e84:	e1c7      	b.n	8002216 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001e86:	4b3b      	ldr	r3, [pc, #236]	; (8001f74 <HAL_RCC_OscConfig+0x240>)
 8001e88:	681b      	ldr	r3, [r3, #0]
 8001e8a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	691b      	ldr	r3, [r3, #16]
 8001e92:	00db      	lsls	r3, r3, #3
 8001e94:	4937      	ldr	r1, [pc, #220]	; (8001f74 <HAL_RCC_OscConfig+0x240>)
 8001e96:	4313      	orrs	r3, r2
 8001e98:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001e9a:	e03a      	b.n	8001f12 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	68db      	ldr	r3, [r3, #12]
 8001ea0:	2b00      	cmp	r3, #0
 8001ea2:	d020      	beq.n	8001ee6 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001ea4:	4b34      	ldr	r3, [pc, #208]	; (8001f78 <HAL_RCC_OscConfig+0x244>)
 8001ea6:	2201      	movs	r2, #1
 8001ea8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001eaa:	f7ff fbb5 	bl	8001618 <HAL_GetTick>
 8001eae:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001eb0:	e008      	b.n	8001ec4 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001eb2:	f7ff fbb1 	bl	8001618 <HAL_GetTick>
 8001eb6:	4602      	mov	r2, r0
 8001eb8:	693b      	ldr	r3, [r7, #16]
 8001eba:	1ad3      	subs	r3, r2, r3
 8001ebc:	2b02      	cmp	r3, #2
 8001ebe:	d901      	bls.n	8001ec4 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001ec0:	2303      	movs	r3, #3
 8001ec2:	e1a8      	b.n	8002216 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001ec4:	4b2b      	ldr	r3, [pc, #172]	; (8001f74 <HAL_RCC_OscConfig+0x240>)
 8001ec6:	681b      	ldr	r3, [r3, #0]
 8001ec8:	f003 0302 	and.w	r3, r3, #2
 8001ecc:	2b00      	cmp	r3, #0
 8001ece:	d0f0      	beq.n	8001eb2 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001ed0:	4b28      	ldr	r3, [pc, #160]	; (8001f74 <HAL_RCC_OscConfig+0x240>)
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	691b      	ldr	r3, [r3, #16]
 8001edc:	00db      	lsls	r3, r3, #3
 8001ede:	4925      	ldr	r1, [pc, #148]	; (8001f74 <HAL_RCC_OscConfig+0x240>)
 8001ee0:	4313      	orrs	r3, r2
 8001ee2:	600b      	str	r3, [r1, #0]
 8001ee4:	e015      	b.n	8001f12 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001ee6:	4b24      	ldr	r3, [pc, #144]	; (8001f78 <HAL_RCC_OscConfig+0x244>)
 8001ee8:	2200      	movs	r2, #0
 8001eea:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001eec:	f7ff fb94 	bl	8001618 <HAL_GetTick>
 8001ef0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001ef2:	e008      	b.n	8001f06 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001ef4:	f7ff fb90 	bl	8001618 <HAL_GetTick>
 8001ef8:	4602      	mov	r2, r0
 8001efa:	693b      	ldr	r3, [r7, #16]
 8001efc:	1ad3      	subs	r3, r2, r3
 8001efe:	2b02      	cmp	r3, #2
 8001f00:	d901      	bls.n	8001f06 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8001f02:	2303      	movs	r3, #3
 8001f04:	e187      	b.n	8002216 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001f06:	4b1b      	ldr	r3, [pc, #108]	; (8001f74 <HAL_RCC_OscConfig+0x240>)
 8001f08:	681b      	ldr	r3, [r3, #0]
 8001f0a:	f003 0302 	and.w	r3, r3, #2
 8001f0e:	2b00      	cmp	r3, #0
 8001f10:	d1f0      	bne.n	8001ef4 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	681b      	ldr	r3, [r3, #0]
 8001f16:	f003 0308 	and.w	r3, r3, #8
 8001f1a:	2b00      	cmp	r3, #0
 8001f1c:	d036      	beq.n	8001f8c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	695b      	ldr	r3, [r3, #20]
 8001f22:	2b00      	cmp	r3, #0
 8001f24:	d016      	beq.n	8001f54 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001f26:	4b15      	ldr	r3, [pc, #84]	; (8001f7c <HAL_RCC_OscConfig+0x248>)
 8001f28:	2201      	movs	r2, #1
 8001f2a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001f2c:	f7ff fb74 	bl	8001618 <HAL_GetTick>
 8001f30:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001f32:	e008      	b.n	8001f46 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001f34:	f7ff fb70 	bl	8001618 <HAL_GetTick>
 8001f38:	4602      	mov	r2, r0
 8001f3a:	693b      	ldr	r3, [r7, #16]
 8001f3c:	1ad3      	subs	r3, r2, r3
 8001f3e:	2b02      	cmp	r3, #2
 8001f40:	d901      	bls.n	8001f46 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8001f42:	2303      	movs	r3, #3
 8001f44:	e167      	b.n	8002216 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001f46:	4b0b      	ldr	r3, [pc, #44]	; (8001f74 <HAL_RCC_OscConfig+0x240>)
 8001f48:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001f4a:	f003 0302 	and.w	r3, r3, #2
 8001f4e:	2b00      	cmp	r3, #0
 8001f50:	d0f0      	beq.n	8001f34 <HAL_RCC_OscConfig+0x200>
 8001f52:	e01b      	b.n	8001f8c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001f54:	4b09      	ldr	r3, [pc, #36]	; (8001f7c <HAL_RCC_OscConfig+0x248>)
 8001f56:	2200      	movs	r2, #0
 8001f58:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001f5a:	f7ff fb5d 	bl	8001618 <HAL_GetTick>
 8001f5e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001f60:	e00e      	b.n	8001f80 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001f62:	f7ff fb59 	bl	8001618 <HAL_GetTick>
 8001f66:	4602      	mov	r2, r0
 8001f68:	693b      	ldr	r3, [r7, #16]
 8001f6a:	1ad3      	subs	r3, r2, r3
 8001f6c:	2b02      	cmp	r3, #2
 8001f6e:	d907      	bls.n	8001f80 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001f70:	2303      	movs	r3, #3
 8001f72:	e150      	b.n	8002216 <HAL_RCC_OscConfig+0x4e2>
 8001f74:	40023800 	.word	0x40023800
 8001f78:	42470000 	.word	0x42470000
 8001f7c:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001f80:	4b88      	ldr	r3, [pc, #544]	; (80021a4 <HAL_RCC_OscConfig+0x470>)
 8001f82:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001f84:	f003 0302 	and.w	r3, r3, #2
 8001f88:	2b00      	cmp	r3, #0
 8001f8a:	d1ea      	bne.n	8001f62 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	f003 0304 	and.w	r3, r3, #4
 8001f94:	2b00      	cmp	r3, #0
 8001f96:	f000 8097 	beq.w	80020c8 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001f9a:	2300      	movs	r3, #0
 8001f9c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001f9e:	4b81      	ldr	r3, [pc, #516]	; (80021a4 <HAL_RCC_OscConfig+0x470>)
 8001fa0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fa2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001fa6:	2b00      	cmp	r3, #0
 8001fa8:	d10f      	bne.n	8001fca <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001faa:	2300      	movs	r3, #0
 8001fac:	60bb      	str	r3, [r7, #8]
 8001fae:	4b7d      	ldr	r3, [pc, #500]	; (80021a4 <HAL_RCC_OscConfig+0x470>)
 8001fb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fb2:	4a7c      	ldr	r2, [pc, #496]	; (80021a4 <HAL_RCC_OscConfig+0x470>)
 8001fb4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001fb8:	6413      	str	r3, [r2, #64]	; 0x40
 8001fba:	4b7a      	ldr	r3, [pc, #488]	; (80021a4 <HAL_RCC_OscConfig+0x470>)
 8001fbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fbe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001fc2:	60bb      	str	r3, [r7, #8]
 8001fc4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001fc6:	2301      	movs	r3, #1
 8001fc8:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001fca:	4b77      	ldr	r3, [pc, #476]	; (80021a8 <HAL_RCC_OscConfig+0x474>)
 8001fcc:	681b      	ldr	r3, [r3, #0]
 8001fce:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001fd2:	2b00      	cmp	r3, #0
 8001fd4:	d118      	bne.n	8002008 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001fd6:	4b74      	ldr	r3, [pc, #464]	; (80021a8 <HAL_RCC_OscConfig+0x474>)
 8001fd8:	681b      	ldr	r3, [r3, #0]
 8001fda:	4a73      	ldr	r2, [pc, #460]	; (80021a8 <HAL_RCC_OscConfig+0x474>)
 8001fdc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001fe0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001fe2:	f7ff fb19 	bl	8001618 <HAL_GetTick>
 8001fe6:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001fe8:	e008      	b.n	8001ffc <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001fea:	f7ff fb15 	bl	8001618 <HAL_GetTick>
 8001fee:	4602      	mov	r2, r0
 8001ff0:	693b      	ldr	r3, [r7, #16]
 8001ff2:	1ad3      	subs	r3, r2, r3
 8001ff4:	2b02      	cmp	r3, #2
 8001ff6:	d901      	bls.n	8001ffc <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8001ff8:	2303      	movs	r3, #3
 8001ffa:	e10c      	b.n	8002216 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001ffc:	4b6a      	ldr	r3, [pc, #424]	; (80021a8 <HAL_RCC_OscConfig+0x474>)
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002004:	2b00      	cmp	r3, #0
 8002006:	d0f0      	beq.n	8001fea <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	689b      	ldr	r3, [r3, #8]
 800200c:	2b01      	cmp	r3, #1
 800200e:	d106      	bne.n	800201e <HAL_RCC_OscConfig+0x2ea>
 8002010:	4b64      	ldr	r3, [pc, #400]	; (80021a4 <HAL_RCC_OscConfig+0x470>)
 8002012:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002014:	4a63      	ldr	r2, [pc, #396]	; (80021a4 <HAL_RCC_OscConfig+0x470>)
 8002016:	f043 0301 	orr.w	r3, r3, #1
 800201a:	6713      	str	r3, [r2, #112]	; 0x70
 800201c:	e01c      	b.n	8002058 <HAL_RCC_OscConfig+0x324>
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	689b      	ldr	r3, [r3, #8]
 8002022:	2b05      	cmp	r3, #5
 8002024:	d10c      	bne.n	8002040 <HAL_RCC_OscConfig+0x30c>
 8002026:	4b5f      	ldr	r3, [pc, #380]	; (80021a4 <HAL_RCC_OscConfig+0x470>)
 8002028:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800202a:	4a5e      	ldr	r2, [pc, #376]	; (80021a4 <HAL_RCC_OscConfig+0x470>)
 800202c:	f043 0304 	orr.w	r3, r3, #4
 8002030:	6713      	str	r3, [r2, #112]	; 0x70
 8002032:	4b5c      	ldr	r3, [pc, #368]	; (80021a4 <HAL_RCC_OscConfig+0x470>)
 8002034:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002036:	4a5b      	ldr	r2, [pc, #364]	; (80021a4 <HAL_RCC_OscConfig+0x470>)
 8002038:	f043 0301 	orr.w	r3, r3, #1
 800203c:	6713      	str	r3, [r2, #112]	; 0x70
 800203e:	e00b      	b.n	8002058 <HAL_RCC_OscConfig+0x324>
 8002040:	4b58      	ldr	r3, [pc, #352]	; (80021a4 <HAL_RCC_OscConfig+0x470>)
 8002042:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002044:	4a57      	ldr	r2, [pc, #348]	; (80021a4 <HAL_RCC_OscConfig+0x470>)
 8002046:	f023 0301 	bic.w	r3, r3, #1
 800204a:	6713      	str	r3, [r2, #112]	; 0x70
 800204c:	4b55      	ldr	r3, [pc, #340]	; (80021a4 <HAL_RCC_OscConfig+0x470>)
 800204e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002050:	4a54      	ldr	r2, [pc, #336]	; (80021a4 <HAL_RCC_OscConfig+0x470>)
 8002052:	f023 0304 	bic.w	r3, r3, #4
 8002056:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	689b      	ldr	r3, [r3, #8]
 800205c:	2b00      	cmp	r3, #0
 800205e:	d015      	beq.n	800208c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002060:	f7ff fada 	bl	8001618 <HAL_GetTick>
 8002064:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002066:	e00a      	b.n	800207e <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002068:	f7ff fad6 	bl	8001618 <HAL_GetTick>
 800206c:	4602      	mov	r2, r0
 800206e:	693b      	ldr	r3, [r7, #16]
 8002070:	1ad3      	subs	r3, r2, r3
 8002072:	f241 3288 	movw	r2, #5000	; 0x1388
 8002076:	4293      	cmp	r3, r2
 8002078:	d901      	bls.n	800207e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800207a:	2303      	movs	r3, #3
 800207c:	e0cb      	b.n	8002216 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800207e:	4b49      	ldr	r3, [pc, #292]	; (80021a4 <HAL_RCC_OscConfig+0x470>)
 8002080:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002082:	f003 0302 	and.w	r3, r3, #2
 8002086:	2b00      	cmp	r3, #0
 8002088:	d0ee      	beq.n	8002068 <HAL_RCC_OscConfig+0x334>
 800208a:	e014      	b.n	80020b6 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800208c:	f7ff fac4 	bl	8001618 <HAL_GetTick>
 8002090:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002092:	e00a      	b.n	80020aa <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002094:	f7ff fac0 	bl	8001618 <HAL_GetTick>
 8002098:	4602      	mov	r2, r0
 800209a:	693b      	ldr	r3, [r7, #16]
 800209c:	1ad3      	subs	r3, r2, r3
 800209e:	f241 3288 	movw	r2, #5000	; 0x1388
 80020a2:	4293      	cmp	r3, r2
 80020a4:	d901      	bls.n	80020aa <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80020a6:	2303      	movs	r3, #3
 80020a8:	e0b5      	b.n	8002216 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80020aa:	4b3e      	ldr	r3, [pc, #248]	; (80021a4 <HAL_RCC_OscConfig+0x470>)
 80020ac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80020ae:	f003 0302 	and.w	r3, r3, #2
 80020b2:	2b00      	cmp	r3, #0
 80020b4:	d1ee      	bne.n	8002094 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80020b6:	7dfb      	ldrb	r3, [r7, #23]
 80020b8:	2b01      	cmp	r3, #1
 80020ba:	d105      	bne.n	80020c8 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80020bc:	4b39      	ldr	r3, [pc, #228]	; (80021a4 <HAL_RCC_OscConfig+0x470>)
 80020be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020c0:	4a38      	ldr	r2, [pc, #224]	; (80021a4 <HAL_RCC_OscConfig+0x470>)
 80020c2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80020c6:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	699b      	ldr	r3, [r3, #24]
 80020cc:	2b00      	cmp	r3, #0
 80020ce:	f000 80a1 	beq.w	8002214 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80020d2:	4b34      	ldr	r3, [pc, #208]	; (80021a4 <HAL_RCC_OscConfig+0x470>)
 80020d4:	689b      	ldr	r3, [r3, #8]
 80020d6:	f003 030c 	and.w	r3, r3, #12
 80020da:	2b08      	cmp	r3, #8
 80020dc:	d05c      	beq.n	8002198 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	699b      	ldr	r3, [r3, #24]
 80020e2:	2b02      	cmp	r3, #2
 80020e4:	d141      	bne.n	800216a <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80020e6:	4b31      	ldr	r3, [pc, #196]	; (80021ac <HAL_RCC_OscConfig+0x478>)
 80020e8:	2200      	movs	r2, #0
 80020ea:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80020ec:	f7ff fa94 	bl	8001618 <HAL_GetTick>
 80020f0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80020f2:	e008      	b.n	8002106 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80020f4:	f7ff fa90 	bl	8001618 <HAL_GetTick>
 80020f8:	4602      	mov	r2, r0
 80020fa:	693b      	ldr	r3, [r7, #16]
 80020fc:	1ad3      	subs	r3, r2, r3
 80020fe:	2b02      	cmp	r3, #2
 8002100:	d901      	bls.n	8002106 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8002102:	2303      	movs	r3, #3
 8002104:	e087      	b.n	8002216 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002106:	4b27      	ldr	r3, [pc, #156]	; (80021a4 <HAL_RCC_OscConfig+0x470>)
 8002108:	681b      	ldr	r3, [r3, #0]
 800210a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800210e:	2b00      	cmp	r3, #0
 8002110:	d1f0      	bne.n	80020f4 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	69da      	ldr	r2, [r3, #28]
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	6a1b      	ldr	r3, [r3, #32]
 800211a:	431a      	orrs	r2, r3
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002120:	019b      	lsls	r3, r3, #6
 8002122:	431a      	orrs	r2, r3
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002128:	085b      	lsrs	r3, r3, #1
 800212a:	3b01      	subs	r3, #1
 800212c:	041b      	lsls	r3, r3, #16
 800212e:	431a      	orrs	r2, r3
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002134:	061b      	lsls	r3, r3, #24
 8002136:	491b      	ldr	r1, [pc, #108]	; (80021a4 <HAL_RCC_OscConfig+0x470>)
 8002138:	4313      	orrs	r3, r2
 800213a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800213c:	4b1b      	ldr	r3, [pc, #108]	; (80021ac <HAL_RCC_OscConfig+0x478>)
 800213e:	2201      	movs	r2, #1
 8002140:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002142:	f7ff fa69 	bl	8001618 <HAL_GetTick>
 8002146:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002148:	e008      	b.n	800215c <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800214a:	f7ff fa65 	bl	8001618 <HAL_GetTick>
 800214e:	4602      	mov	r2, r0
 8002150:	693b      	ldr	r3, [r7, #16]
 8002152:	1ad3      	subs	r3, r2, r3
 8002154:	2b02      	cmp	r3, #2
 8002156:	d901      	bls.n	800215c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002158:	2303      	movs	r3, #3
 800215a:	e05c      	b.n	8002216 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800215c:	4b11      	ldr	r3, [pc, #68]	; (80021a4 <HAL_RCC_OscConfig+0x470>)
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002164:	2b00      	cmp	r3, #0
 8002166:	d0f0      	beq.n	800214a <HAL_RCC_OscConfig+0x416>
 8002168:	e054      	b.n	8002214 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800216a:	4b10      	ldr	r3, [pc, #64]	; (80021ac <HAL_RCC_OscConfig+0x478>)
 800216c:	2200      	movs	r2, #0
 800216e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002170:	f7ff fa52 	bl	8001618 <HAL_GetTick>
 8002174:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002176:	e008      	b.n	800218a <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002178:	f7ff fa4e 	bl	8001618 <HAL_GetTick>
 800217c:	4602      	mov	r2, r0
 800217e:	693b      	ldr	r3, [r7, #16]
 8002180:	1ad3      	subs	r3, r2, r3
 8002182:	2b02      	cmp	r3, #2
 8002184:	d901      	bls.n	800218a <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8002186:	2303      	movs	r3, #3
 8002188:	e045      	b.n	8002216 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800218a:	4b06      	ldr	r3, [pc, #24]	; (80021a4 <HAL_RCC_OscConfig+0x470>)
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002192:	2b00      	cmp	r3, #0
 8002194:	d1f0      	bne.n	8002178 <HAL_RCC_OscConfig+0x444>
 8002196:	e03d      	b.n	8002214 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	699b      	ldr	r3, [r3, #24]
 800219c:	2b01      	cmp	r3, #1
 800219e:	d107      	bne.n	80021b0 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80021a0:	2301      	movs	r3, #1
 80021a2:	e038      	b.n	8002216 <HAL_RCC_OscConfig+0x4e2>
 80021a4:	40023800 	.word	0x40023800
 80021a8:	40007000 	.word	0x40007000
 80021ac:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80021b0:	4b1b      	ldr	r3, [pc, #108]	; (8002220 <HAL_RCC_OscConfig+0x4ec>)
 80021b2:	685b      	ldr	r3, [r3, #4]
 80021b4:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	699b      	ldr	r3, [r3, #24]
 80021ba:	2b01      	cmp	r3, #1
 80021bc:	d028      	beq.n	8002210 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80021be:	68fb      	ldr	r3, [r7, #12]
 80021c0:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80021c8:	429a      	cmp	r2, r3
 80021ca:	d121      	bne.n	8002210 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80021cc:	68fb      	ldr	r3, [r7, #12]
 80021ce:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80021d6:	429a      	cmp	r2, r3
 80021d8:	d11a      	bne.n	8002210 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80021da:	68fa      	ldr	r2, [r7, #12]
 80021dc:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80021e0:	4013      	ands	r3, r2
 80021e2:	687a      	ldr	r2, [r7, #4]
 80021e4:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80021e6:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80021e8:	4293      	cmp	r3, r2
 80021ea:	d111      	bne.n	8002210 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80021ec:	68fb      	ldr	r3, [r7, #12]
 80021ee:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80021f6:	085b      	lsrs	r3, r3, #1
 80021f8:	3b01      	subs	r3, #1
 80021fa:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80021fc:	429a      	cmp	r2, r3
 80021fe:	d107      	bne.n	8002210 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002200:	68fb      	ldr	r3, [r7, #12]
 8002202:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800220a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800220c:	429a      	cmp	r2, r3
 800220e:	d001      	beq.n	8002214 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8002210:	2301      	movs	r3, #1
 8002212:	e000      	b.n	8002216 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8002214:	2300      	movs	r3, #0
}
 8002216:	4618      	mov	r0, r3
 8002218:	3718      	adds	r7, #24
 800221a:	46bd      	mov	sp, r7
 800221c:	bd80      	pop	{r7, pc}
 800221e:	bf00      	nop
 8002220:	40023800 	.word	0x40023800

08002224 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002224:	b580      	push	{r7, lr}
 8002226:	b084      	sub	sp, #16
 8002228:	af00      	add	r7, sp, #0
 800222a:	6078      	str	r0, [r7, #4]
 800222c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	2b00      	cmp	r3, #0
 8002232:	d101      	bne.n	8002238 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002234:	2301      	movs	r3, #1
 8002236:	e0cc      	b.n	80023d2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002238:	4b68      	ldr	r3, [pc, #416]	; (80023dc <HAL_RCC_ClockConfig+0x1b8>)
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	f003 030f 	and.w	r3, r3, #15
 8002240:	683a      	ldr	r2, [r7, #0]
 8002242:	429a      	cmp	r2, r3
 8002244:	d90c      	bls.n	8002260 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002246:	4b65      	ldr	r3, [pc, #404]	; (80023dc <HAL_RCC_ClockConfig+0x1b8>)
 8002248:	683a      	ldr	r2, [r7, #0]
 800224a:	b2d2      	uxtb	r2, r2
 800224c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800224e:	4b63      	ldr	r3, [pc, #396]	; (80023dc <HAL_RCC_ClockConfig+0x1b8>)
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	f003 030f 	and.w	r3, r3, #15
 8002256:	683a      	ldr	r2, [r7, #0]
 8002258:	429a      	cmp	r2, r3
 800225a:	d001      	beq.n	8002260 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800225c:	2301      	movs	r3, #1
 800225e:	e0b8      	b.n	80023d2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	f003 0302 	and.w	r3, r3, #2
 8002268:	2b00      	cmp	r3, #0
 800226a:	d020      	beq.n	80022ae <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	f003 0304 	and.w	r3, r3, #4
 8002274:	2b00      	cmp	r3, #0
 8002276:	d005      	beq.n	8002284 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002278:	4b59      	ldr	r3, [pc, #356]	; (80023e0 <HAL_RCC_ClockConfig+0x1bc>)
 800227a:	689b      	ldr	r3, [r3, #8]
 800227c:	4a58      	ldr	r2, [pc, #352]	; (80023e0 <HAL_RCC_ClockConfig+0x1bc>)
 800227e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002282:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	f003 0308 	and.w	r3, r3, #8
 800228c:	2b00      	cmp	r3, #0
 800228e:	d005      	beq.n	800229c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002290:	4b53      	ldr	r3, [pc, #332]	; (80023e0 <HAL_RCC_ClockConfig+0x1bc>)
 8002292:	689b      	ldr	r3, [r3, #8]
 8002294:	4a52      	ldr	r2, [pc, #328]	; (80023e0 <HAL_RCC_ClockConfig+0x1bc>)
 8002296:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800229a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800229c:	4b50      	ldr	r3, [pc, #320]	; (80023e0 <HAL_RCC_ClockConfig+0x1bc>)
 800229e:	689b      	ldr	r3, [r3, #8]
 80022a0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	689b      	ldr	r3, [r3, #8]
 80022a8:	494d      	ldr	r1, [pc, #308]	; (80023e0 <HAL_RCC_ClockConfig+0x1bc>)
 80022aa:	4313      	orrs	r3, r2
 80022ac:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	f003 0301 	and.w	r3, r3, #1
 80022b6:	2b00      	cmp	r3, #0
 80022b8:	d044      	beq.n	8002344 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	685b      	ldr	r3, [r3, #4]
 80022be:	2b01      	cmp	r3, #1
 80022c0:	d107      	bne.n	80022d2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80022c2:	4b47      	ldr	r3, [pc, #284]	; (80023e0 <HAL_RCC_ClockConfig+0x1bc>)
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80022ca:	2b00      	cmp	r3, #0
 80022cc:	d119      	bne.n	8002302 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80022ce:	2301      	movs	r3, #1
 80022d0:	e07f      	b.n	80023d2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	685b      	ldr	r3, [r3, #4]
 80022d6:	2b02      	cmp	r3, #2
 80022d8:	d003      	beq.n	80022e2 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80022de:	2b03      	cmp	r3, #3
 80022e0:	d107      	bne.n	80022f2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80022e2:	4b3f      	ldr	r3, [pc, #252]	; (80023e0 <HAL_RCC_ClockConfig+0x1bc>)
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80022ea:	2b00      	cmp	r3, #0
 80022ec:	d109      	bne.n	8002302 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80022ee:	2301      	movs	r3, #1
 80022f0:	e06f      	b.n	80023d2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80022f2:	4b3b      	ldr	r3, [pc, #236]	; (80023e0 <HAL_RCC_ClockConfig+0x1bc>)
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	f003 0302 	and.w	r3, r3, #2
 80022fa:	2b00      	cmp	r3, #0
 80022fc:	d101      	bne.n	8002302 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80022fe:	2301      	movs	r3, #1
 8002300:	e067      	b.n	80023d2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002302:	4b37      	ldr	r3, [pc, #220]	; (80023e0 <HAL_RCC_ClockConfig+0x1bc>)
 8002304:	689b      	ldr	r3, [r3, #8]
 8002306:	f023 0203 	bic.w	r2, r3, #3
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	685b      	ldr	r3, [r3, #4]
 800230e:	4934      	ldr	r1, [pc, #208]	; (80023e0 <HAL_RCC_ClockConfig+0x1bc>)
 8002310:	4313      	orrs	r3, r2
 8002312:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002314:	f7ff f980 	bl	8001618 <HAL_GetTick>
 8002318:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800231a:	e00a      	b.n	8002332 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800231c:	f7ff f97c 	bl	8001618 <HAL_GetTick>
 8002320:	4602      	mov	r2, r0
 8002322:	68fb      	ldr	r3, [r7, #12]
 8002324:	1ad3      	subs	r3, r2, r3
 8002326:	f241 3288 	movw	r2, #5000	; 0x1388
 800232a:	4293      	cmp	r3, r2
 800232c:	d901      	bls.n	8002332 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800232e:	2303      	movs	r3, #3
 8002330:	e04f      	b.n	80023d2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002332:	4b2b      	ldr	r3, [pc, #172]	; (80023e0 <HAL_RCC_ClockConfig+0x1bc>)
 8002334:	689b      	ldr	r3, [r3, #8]
 8002336:	f003 020c 	and.w	r2, r3, #12
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	685b      	ldr	r3, [r3, #4]
 800233e:	009b      	lsls	r3, r3, #2
 8002340:	429a      	cmp	r2, r3
 8002342:	d1eb      	bne.n	800231c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002344:	4b25      	ldr	r3, [pc, #148]	; (80023dc <HAL_RCC_ClockConfig+0x1b8>)
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	f003 030f 	and.w	r3, r3, #15
 800234c:	683a      	ldr	r2, [r7, #0]
 800234e:	429a      	cmp	r2, r3
 8002350:	d20c      	bcs.n	800236c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002352:	4b22      	ldr	r3, [pc, #136]	; (80023dc <HAL_RCC_ClockConfig+0x1b8>)
 8002354:	683a      	ldr	r2, [r7, #0]
 8002356:	b2d2      	uxtb	r2, r2
 8002358:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800235a:	4b20      	ldr	r3, [pc, #128]	; (80023dc <HAL_RCC_ClockConfig+0x1b8>)
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	f003 030f 	and.w	r3, r3, #15
 8002362:	683a      	ldr	r2, [r7, #0]
 8002364:	429a      	cmp	r2, r3
 8002366:	d001      	beq.n	800236c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002368:	2301      	movs	r3, #1
 800236a:	e032      	b.n	80023d2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	f003 0304 	and.w	r3, r3, #4
 8002374:	2b00      	cmp	r3, #0
 8002376:	d008      	beq.n	800238a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002378:	4b19      	ldr	r3, [pc, #100]	; (80023e0 <HAL_RCC_ClockConfig+0x1bc>)
 800237a:	689b      	ldr	r3, [r3, #8]
 800237c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	68db      	ldr	r3, [r3, #12]
 8002384:	4916      	ldr	r1, [pc, #88]	; (80023e0 <HAL_RCC_ClockConfig+0x1bc>)
 8002386:	4313      	orrs	r3, r2
 8002388:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	f003 0308 	and.w	r3, r3, #8
 8002392:	2b00      	cmp	r3, #0
 8002394:	d009      	beq.n	80023aa <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002396:	4b12      	ldr	r3, [pc, #72]	; (80023e0 <HAL_RCC_ClockConfig+0x1bc>)
 8002398:	689b      	ldr	r3, [r3, #8]
 800239a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	691b      	ldr	r3, [r3, #16]
 80023a2:	00db      	lsls	r3, r3, #3
 80023a4:	490e      	ldr	r1, [pc, #56]	; (80023e0 <HAL_RCC_ClockConfig+0x1bc>)
 80023a6:	4313      	orrs	r3, r2
 80023a8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80023aa:	f000 f821 	bl	80023f0 <HAL_RCC_GetSysClockFreq>
 80023ae:	4602      	mov	r2, r0
 80023b0:	4b0b      	ldr	r3, [pc, #44]	; (80023e0 <HAL_RCC_ClockConfig+0x1bc>)
 80023b2:	689b      	ldr	r3, [r3, #8]
 80023b4:	091b      	lsrs	r3, r3, #4
 80023b6:	f003 030f 	and.w	r3, r3, #15
 80023ba:	490a      	ldr	r1, [pc, #40]	; (80023e4 <HAL_RCC_ClockConfig+0x1c0>)
 80023bc:	5ccb      	ldrb	r3, [r1, r3]
 80023be:	fa22 f303 	lsr.w	r3, r2, r3
 80023c2:	4a09      	ldr	r2, [pc, #36]	; (80023e8 <HAL_RCC_ClockConfig+0x1c4>)
 80023c4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80023c6:	4b09      	ldr	r3, [pc, #36]	; (80023ec <HAL_RCC_ClockConfig+0x1c8>)
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	4618      	mov	r0, r3
 80023cc:	f7ff f8e0 	bl	8001590 <HAL_InitTick>

  return HAL_OK;
 80023d0:	2300      	movs	r3, #0
}
 80023d2:	4618      	mov	r0, r3
 80023d4:	3710      	adds	r7, #16
 80023d6:	46bd      	mov	sp, r7
 80023d8:	bd80      	pop	{r7, pc}
 80023da:	bf00      	nop
 80023dc:	40023c00 	.word	0x40023c00
 80023e0:	40023800 	.word	0x40023800
 80023e4:	080043c4 	.word	0x080043c4
 80023e8:	20000018 	.word	0x20000018
 80023ec:	20000028 	.word	0x20000028

080023f0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80023f0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80023f4:	b090      	sub	sp, #64	; 0x40
 80023f6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80023f8:	2300      	movs	r3, #0
 80023fa:	637b      	str	r3, [r7, #52]	; 0x34
 80023fc:	2300      	movs	r3, #0
 80023fe:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002400:	2300      	movs	r3, #0
 8002402:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 8002404:	2300      	movs	r3, #0
 8002406:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002408:	4b59      	ldr	r3, [pc, #356]	; (8002570 <HAL_RCC_GetSysClockFreq+0x180>)
 800240a:	689b      	ldr	r3, [r3, #8]
 800240c:	f003 030c 	and.w	r3, r3, #12
 8002410:	2b08      	cmp	r3, #8
 8002412:	d00d      	beq.n	8002430 <HAL_RCC_GetSysClockFreq+0x40>
 8002414:	2b08      	cmp	r3, #8
 8002416:	f200 80a1 	bhi.w	800255c <HAL_RCC_GetSysClockFreq+0x16c>
 800241a:	2b00      	cmp	r3, #0
 800241c:	d002      	beq.n	8002424 <HAL_RCC_GetSysClockFreq+0x34>
 800241e:	2b04      	cmp	r3, #4
 8002420:	d003      	beq.n	800242a <HAL_RCC_GetSysClockFreq+0x3a>
 8002422:	e09b      	b.n	800255c <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002424:	4b53      	ldr	r3, [pc, #332]	; (8002574 <HAL_RCC_GetSysClockFreq+0x184>)
 8002426:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 8002428:	e09b      	b.n	8002562 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800242a:	4b53      	ldr	r3, [pc, #332]	; (8002578 <HAL_RCC_GetSysClockFreq+0x188>)
 800242c:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800242e:	e098      	b.n	8002562 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002430:	4b4f      	ldr	r3, [pc, #316]	; (8002570 <HAL_RCC_GetSysClockFreq+0x180>)
 8002432:	685b      	ldr	r3, [r3, #4]
 8002434:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002438:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800243a:	4b4d      	ldr	r3, [pc, #308]	; (8002570 <HAL_RCC_GetSysClockFreq+0x180>)
 800243c:	685b      	ldr	r3, [r3, #4]
 800243e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002442:	2b00      	cmp	r3, #0
 8002444:	d028      	beq.n	8002498 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002446:	4b4a      	ldr	r3, [pc, #296]	; (8002570 <HAL_RCC_GetSysClockFreq+0x180>)
 8002448:	685b      	ldr	r3, [r3, #4]
 800244a:	099b      	lsrs	r3, r3, #6
 800244c:	2200      	movs	r2, #0
 800244e:	623b      	str	r3, [r7, #32]
 8002450:	627a      	str	r2, [r7, #36]	; 0x24
 8002452:	6a3b      	ldr	r3, [r7, #32]
 8002454:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8002458:	2100      	movs	r1, #0
 800245a:	4b47      	ldr	r3, [pc, #284]	; (8002578 <HAL_RCC_GetSysClockFreq+0x188>)
 800245c:	fb03 f201 	mul.w	r2, r3, r1
 8002460:	2300      	movs	r3, #0
 8002462:	fb00 f303 	mul.w	r3, r0, r3
 8002466:	4413      	add	r3, r2
 8002468:	4a43      	ldr	r2, [pc, #268]	; (8002578 <HAL_RCC_GetSysClockFreq+0x188>)
 800246a:	fba0 1202 	umull	r1, r2, r0, r2
 800246e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002470:	460a      	mov	r2, r1
 8002472:	62ba      	str	r2, [r7, #40]	; 0x28
 8002474:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002476:	4413      	add	r3, r2
 8002478:	62fb      	str	r3, [r7, #44]	; 0x2c
 800247a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800247c:	2200      	movs	r2, #0
 800247e:	61bb      	str	r3, [r7, #24]
 8002480:	61fa      	str	r2, [r7, #28]
 8002482:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002486:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 800248a:	f7fd ff19 	bl	80002c0 <__aeabi_uldivmod>
 800248e:	4602      	mov	r2, r0
 8002490:	460b      	mov	r3, r1
 8002492:	4613      	mov	r3, r2
 8002494:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002496:	e053      	b.n	8002540 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002498:	4b35      	ldr	r3, [pc, #212]	; (8002570 <HAL_RCC_GetSysClockFreq+0x180>)
 800249a:	685b      	ldr	r3, [r3, #4]
 800249c:	099b      	lsrs	r3, r3, #6
 800249e:	2200      	movs	r2, #0
 80024a0:	613b      	str	r3, [r7, #16]
 80024a2:	617a      	str	r2, [r7, #20]
 80024a4:	693b      	ldr	r3, [r7, #16]
 80024a6:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 80024aa:	f04f 0b00 	mov.w	fp, #0
 80024ae:	4652      	mov	r2, sl
 80024b0:	465b      	mov	r3, fp
 80024b2:	f04f 0000 	mov.w	r0, #0
 80024b6:	f04f 0100 	mov.w	r1, #0
 80024ba:	0159      	lsls	r1, r3, #5
 80024bc:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80024c0:	0150      	lsls	r0, r2, #5
 80024c2:	4602      	mov	r2, r0
 80024c4:	460b      	mov	r3, r1
 80024c6:	ebb2 080a 	subs.w	r8, r2, sl
 80024ca:	eb63 090b 	sbc.w	r9, r3, fp
 80024ce:	f04f 0200 	mov.w	r2, #0
 80024d2:	f04f 0300 	mov.w	r3, #0
 80024d6:	ea4f 1389 	mov.w	r3, r9, lsl #6
 80024da:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 80024de:	ea4f 1288 	mov.w	r2, r8, lsl #6
 80024e2:	ebb2 0408 	subs.w	r4, r2, r8
 80024e6:	eb63 0509 	sbc.w	r5, r3, r9
 80024ea:	f04f 0200 	mov.w	r2, #0
 80024ee:	f04f 0300 	mov.w	r3, #0
 80024f2:	00eb      	lsls	r3, r5, #3
 80024f4:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80024f8:	00e2      	lsls	r2, r4, #3
 80024fa:	4614      	mov	r4, r2
 80024fc:	461d      	mov	r5, r3
 80024fe:	eb14 030a 	adds.w	r3, r4, sl
 8002502:	603b      	str	r3, [r7, #0]
 8002504:	eb45 030b 	adc.w	r3, r5, fp
 8002508:	607b      	str	r3, [r7, #4]
 800250a:	f04f 0200 	mov.w	r2, #0
 800250e:	f04f 0300 	mov.w	r3, #0
 8002512:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002516:	4629      	mov	r1, r5
 8002518:	028b      	lsls	r3, r1, #10
 800251a:	4621      	mov	r1, r4
 800251c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002520:	4621      	mov	r1, r4
 8002522:	028a      	lsls	r2, r1, #10
 8002524:	4610      	mov	r0, r2
 8002526:	4619      	mov	r1, r3
 8002528:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800252a:	2200      	movs	r2, #0
 800252c:	60bb      	str	r3, [r7, #8]
 800252e:	60fa      	str	r2, [r7, #12]
 8002530:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002534:	f7fd fec4 	bl	80002c0 <__aeabi_uldivmod>
 8002538:	4602      	mov	r2, r0
 800253a:	460b      	mov	r3, r1
 800253c:	4613      	mov	r3, r2
 800253e:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002540:	4b0b      	ldr	r3, [pc, #44]	; (8002570 <HAL_RCC_GetSysClockFreq+0x180>)
 8002542:	685b      	ldr	r3, [r3, #4]
 8002544:	0c1b      	lsrs	r3, r3, #16
 8002546:	f003 0303 	and.w	r3, r3, #3
 800254a:	3301      	adds	r3, #1
 800254c:	005b      	lsls	r3, r3, #1
 800254e:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 8002550:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002552:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002554:	fbb2 f3f3 	udiv	r3, r2, r3
 8002558:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800255a:	e002      	b.n	8002562 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800255c:	4b05      	ldr	r3, [pc, #20]	; (8002574 <HAL_RCC_GetSysClockFreq+0x184>)
 800255e:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8002560:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002562:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8002564:	4618      	mov	r0, r3
 8002566:	3740      	adds	r7, #64	; 0x40
 8002568:	46bd      	mov	sp, r7
 800256a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800256e:	bf00      	nop
 8002570:	40023800 	.word	0x40023800
 8002574:	00f42400 	.word	0x00f42400
 8002578:	017d7840 	.word	0x017d7840

0800257c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800257c:	b480      	push	{r7}
 800257e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002580:	4b03      	ldr	r3, [pc, #12]	; (8002590 <HAL_RCC_GetHCLKFreq+0x14>)
 8002582:	681b      	ldr	r3, [r3, #0]
}
 8002584:	4618      	mov	r0, r3
 8002586:	46bd      	mov	sp, r7
 8002588:	f85d 7b04 	ldr.w	r7, [sp], #4
 800258c:	4770      	bx	lr
 800258e:	bf00      	nop
 8002590:	20000018 	.word	0x20000018

08002594 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002594:	b580      	push	{r7, lr}
 8002596:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002598:	f7ff fff0 	bl	800257c <HAL_RCC_GetHCLKFreq>
 800259c:	4602      	mov	r2, r0
 800259e:	4b05      	ldr	r3, [pc, #20]	; (80025b4 <HAL_RCC_GetPCLK1Freq+0x20>)
 80025a0:	689b      	ldr	r3, [r3, #8]
 80025a2:	0a9b      	lsrs	r3, r3, #10
 80025a4:	f003 0307 	and.w	r3, r3, #7
 80025a8:	4903      	ldr	r1, [pc, #12]	; (80025b8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80025aa:	5ccb      	ldrb	r3, [r1, r3]
 80025ac:	fa22 f303 	lsr.w	r3, r2, r3
}
 80025b0:	4618      	mov	r0, r3
 80025b2:	bd80      	pop	{r7, pc}
 80025b4:	40023800 	.word	0x40023800
 80025b8:	080043d4 	.word	0x080043d4

080025bc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80025bc:	b580      	push	{r7, lr}
 80025be:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80025c0:	f7ff ffdc 	bl	800257c <HAL_RCC_GetHCLKFreq>
 80025c4:	4602      	mov	r2, r0
 80025c6:	4b05      	ldr	r3, [pc, #20]	; (80025dc <HAL_RCC_GetPCLK2Freq+0x20>)
 80025c8:	689b      	ldr	r3, [r3, #8]
 80025ca:	0b5b      	lsrs	r3, r3, #13
 80025cc:	f003 0307 	and.w	r3, r3, #7
 80025d0:	4903      	ldr	r1, [pc, #12]	; (80025e0 <HAL_RCC_GetPCLK2Freq+0x24>)
 80025d2:	5ccb      	ldrb	r3, [r1, r3]
 80025d4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80025d8:	4618      	mov	r0, r3
 80025da:	bd80      	pop	{r7, pc}
 80025dc:	40023800 	.word	0x40023800
 80025e0:	080043d4 	.word	0x080043d4

080025e4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80025e4:	b580      	push	{r7, lr}
 80025e6:	b082      	sub	sp, #8
 80025e8:	af00      	add	r7, sp, #0
 80025ea:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	2b00      	cmp	r3, #0
 80025f0:	d101      	bne.n	80025f6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80025f2:	2301      	movs	r3, #1
 80025f4:	e03f      	b.n	8002676 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80025fc:	b2db      	uxtb	r3, r3
 80025fe:	2b00      	cmp	r3, #0
 8002600:	d106      	bne.n	8002610 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	2200      	movs	r2, #0
 8002606:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800260a:	6878      	ldr	r0, [r7, #4]
 800260c:	f7fe fcc6 	bl	8000f9c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	2224      	movs	r2, #36	; 0x24
 8002614:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	68da      	ldr	r2, [r3, #12]
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	681b      	ldr	r3, [r3, #0]
 8002622:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002626:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002628:	6878      	ldr	r0, [r7, #4]
 800262a:	f000 febb 	bl	80033a4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	691a      	ldr	r2, [r3, #16]
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800263c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	695a      	ldr	r2, [r3, #20]
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800264c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	68da      	ldr	r2, [r3, #12]
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800265c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	2200      	movs	r2, #0
 8002662:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	2220      	movs	r2, #32
 8002668:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	2220      	movs	r2, #32
 8002670:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002674:	2300      	movs	r3, #0
}
 8002676:	4618      	mov	r0, r3
 8002678:	3708      	adds	r7, #8
 800267a:	46bd      	mov	sp, r7
 800267c:	bd80      	pop	{r7, pc}

0800267e <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800267e:	b580      	push	{r7, lr}
 8002680:	b08a      	sub	sp, #40	; 0x28
 8002682:	af02      	add	r7, sp, #8
 8002684:	60f8      	str	r0, [r7, #12]
 8002686:	60b9      	str	r1, [r7, #8]
 8002688:	603b      	str	r3, [r7, #0]
 800268a:	4613      	mov	r3, r2
 800268c:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800268e:	2300      	movs	r3, #0
 8002690:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002692:	68fb      	ldr	r3, [r7, #12]
 8002694:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002698:	b2db      	uxtb	r3, r3
 800269a:	2b20      	cmp	r3, #32
 800269c:	d17c      	bne.n	8002798 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 800269e:	68bb      	ldr	r3, [r7, #8]
 80026a0:	2b00      	cmp	r3, #0
 80026a2:	d002      	beq.n	80026aa <HAL_UART_Transmit+0x2c>
 80026a4:	88fb      	ldrh	r3, [r7, #6]
 80026a6:	2b00      	cmp	r3, #0
 80026a8:	d101      	bne.n	80026ae <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80026aa:	2301      	movs	r3, #1
 80026ac:	e075      	b.n	800279a <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80026ae:	68fb      	ldr	r3, [r7, #12]
 80026b0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80026b4:	2b01      	cmp	r3, #1
 80026b6:	d101      	bne.n	80026bc <HAL_UART_Transmit+0x3e>
 80026b8:	2302      	movs	r3, #2
 80026ba:	e06e      	b.n	800279a <HAL_UART_Transmit+0x11c>
 80026bc:	68fb      	ldr	r3, [r7, #12]
 80026be:	2201      	movs	r2, #1
 80026c0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80026c4:	68fb      	ldr	r3, [r7, #12]
 80026c6:	2200      	movs	r2, #0
 80026c8:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80026ca:	68fb      	ldr	r3, [r7, #12]
 80026cc:	2221      	movs	r2, #33	; 0x21
 80026ce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80026d2:	f7fe ffa1 	bl	8001618 <HAL_GetTick>
 80026d6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80026d8:	68fb      	ldr	r3, [r7, #12]
 80026da:	88fa      	ldrh	r2, [r7, #6]
 80026dc:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80026de:	68fb      	ldr	r3, [r7, #12]
 80026e0:	88fa      	ldrh	r2, [r7, #6]
 80026e2:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80026e4:	68fb      	ldr	r3, [r7, #12]
 80026e6:	689b      	ldr	r3, [r3, #8]
 80026e8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80026ec:	d108      	bne.n	8002700 <HAL_UART_Transmit+0x82>
 80026ee:	68fb      	ldr	r3, [r7, #12]
 80026f0:	691b      	ldr	r3, [r3, #16]
 80026f2:	2b00      	cmp	r3, #0
 80026f4:	d104      	bne.n	8002700 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 80026f6:	2300      	movs	r3, #0
 80026f8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80026fa:	68bb      	ldr	r3, [r7, #8]
 80026fc:	61bb      	str	r3, [r7, #24]
 80026fe:	e003      	b.n	8002708 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8002700:	68bb      	ldr	r3, [r7, #8]
 8002702:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002704:	2300      	movs	r3, #0
 8002706:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8002708:	68fb      	ldr	r3, [r7, #12]
 800270a:	2200      	movs	r2, #0
 800270c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8002710:	e02a      	b.n	8002768 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002712:	683b      	ldr	r3, [r7, #0]
 8002714:	9300      	str	r3, [sp, #0]
 8002716:	697b      	ldr	r3, [r7, #20]
 8002718:	2200      	movs	r2, #0
 800271a:	2180      	movs	r1, #128	; 0x80
 800271c:	68f8      	ldr	r0, [r7, #12]
 800271e:	f000 fbfb 	bl	8002f18 <UART_WaitOnFlagUntilTimeout>
 8002722:	4603      	mov	r3, r0
 8002724:	2b00      	cmp	r3, #0
 8002726:	d001      	beq.n	800272c <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8002728:	2303      	movs	r3, #3
 800272a:	e036      	b.n	800279a <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 800272c:	69fb      	ldr	r3, [r7, #28]
 800272e:	2b00      	cmp	r3, #0
 8002730:	d10b      	bne.n	800274a <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002732:	69bb      	ldr	r3, [r7, #24]
 8002734:	881b      	ldrh	r3, [r3, #0]
 8002736:	461a      	mov	r2, r3
 8002738:	68fb      	ldr	r3, [r7, #12]
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002740:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8002742:	69bb      	ldr	r3, [r7, #24]
 8002744:	3302      	adds	r3, #2
 8002746:	61bb      	str	r3, [r7, #24]
 8002748:	e007      	b.n	800275a <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800274a:	69fb      	ldr	r3, [r7, #28]
 800274c:	781a      	ldrb	r2, [r3, #0]
 800274e:	68fb      	ldr	r3, [r7, #12]
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8002754:	69fb      	ldr	r3, [r7, #28]
 8002756:	3301      	adds	r3, #1
 8002758:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800275a:	68fb      	ldr	r3, [r7, #12]
 800275c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800275e:	b29b      	uxth	r3, r3
 8002760:	3b01      	subs	r3, #1
 8002762:	b29a      	uxth	r2, r3
 8002764:	68fb      	ldr	r3, [r7, #12]
 8002766:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8002768:	68fb      	ldr	r3, [r7, #12]
 800276a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800276c:	b29b      	uxth	r3, r3
 800276e:	2b00      	cmp	r3, #0
 8002770:	d1cf      	bne.n	8002712 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002772:	683b      	ldr	r3, [r7, #0]
 8002774:	9300      	str	r3, [sp, #0]
 8002776:	697b      	ldr	r3, [r7, #20]
 8002778:	2200      	movs	r2, #0
 800277a:	2140      	movs	r1, #64	; 0x40
 800277c:	68f8      	ldr	r0, [r7, #12]
 800277e:	f000 fbcb 	bl	8002f18 <UART_WaitOnFlagUntilTimeout>
 8002782:	4603      	mov	r3, r0
 8002784:	2b00      	cmp	r3, #0
 8002786:	d001      	beq.n	800278c <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8002788:	2303      	movs	r3, #3
 800278a:	e006      	b.n	800279a <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800278c:	68fb      	ldr	r3, [r7, #12]
 800278e:	2220      	movs	r2, #32
 8002790:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8002794:	2300      	movs	r3, #0
 8002796:	e000      	b.n	800279a <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8002798:	2302      	movs	r3, #2
  }
}
 800279a:	4618      	mov	r0, r3
 800279c:	3720      	adds	r7, #32
 800279e:	46bd      	mov	sp, r7
 80027a0:	bd80      	pop	{r7, pc}

080027a2 <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80027a2:	b580      	push	{r7, lr}
 80027a4:	b08a      	sub	sp, #40	; 0x28
 80027a6:	af02      	add	r7, sp, #8
 80027a8:	60f8      	str	r0, [r7, #12]
 80027aa:	60b9      	str	r1, [r7, #8]
 80027ac:	603b      	str	r3, [r7, #0]
 80027ae:	4613      	mov	r3, r2
 80027b0:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80027b2:	2300      	movs	r3, #0
 80027b4:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80027b6:	68fb      	ldr	r3, [r7, #12]
 80027b8:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80027bc:	b2db      	uxtb	r3, r3
 80027be:	2b20      	cmp	r3, #32
 80027c0:	f040 808c 	bne.w	80028dc <HAL_UART_Receive+0x13a>
  {
    if ((pData == NULL) || (Size == 0U))
 80027c4:	68bb      	ldr	r3, [r7, #8]
 80027c6:	2b00      	cmp	r3, #0
 80027c8:	d002      	beq.n	80027d0 <HAL_UART_Receive+0x2e>
 80027ca:	88fb      	ldrh	r3, [r7, #6]
 80027cc:	2b00      	cmp	r3, #0
 80027ce:	d101      	bne.n	80027d4 <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 80027d0:	2301      	movs	r3, #1
 80027d2:	e084      	b.n	80028de <HAL_UART_Receive+0x13c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80027d4:	68fb      	ldr	r3, [r7, #12]
 80027d6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80027da:	2b01      	cmp	r3, #1
 80027dc:	d101      	bne.n	80027e2 <HAL_UART_Receive+0x40>
 80027de:	2302      	movs	r3, #2
 80027e0:	e07d      	b.n	80028de <HAL_UART_Receive+0x13c>
 80027e2:	68fb      	ldr	r3, [r7, #12]
 80027e4:	2201      	movs	r2, #1
 80027e6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80027ea:	68fb      	ldr	r3, [r7, #12]
 80027ec:	2200      	movs	r2, #0
 80027ee:	641a      	str	r2, [r3, #64]	; 0x40
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80027f0:	68fb      	ldr	r3, [r7, #12]
 80027f2:	2222      	movs	r2, #34	; 0x22
 80027f4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80027f8:	68fb      	ldr	r3, [r7, #12]
 80027fa:	2200      	movs	r2, #0
 80027fc:	631a      	str	r2, [r3, #48]	; 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80027fe:	f7fe ff0b 	bl	8001618 <HAL_GetTick>
 8002802:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 8002804:	68fb      	ldr	r3, [r7, #12]
 8002806:	88fa      	ldrh	r2, [r7, #6]
 8002808:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 800280a:	68fb      	ldr	r3, [r7, #12]
 800280c:	88fa      	ldrh	r2, [r7, #6]
 800280e:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002810:	68fb      	ldr	r3, [r7, #12]
 8002812:	689b      	ldr	r3, [r3, #8]
 8002814:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002818:	d108      	bne.n	800282c <HAL_UART_Receive+0x8a>
 800281a:	68fb      	ldr	r3, [r7, #12]
 800281c:	691b      	ldr	r3, [r3, #16]
 800281e:	2b00      	cmp	r3, #0
 8002820:	d104      	bne.n	800282c <HAL_UART_Receive+0x8a>
    {
      pdata8bits  = NULL;
 8002822:	2300      	movs	r3, #0
 8002824:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8002826:	68bb      	ldr	r3, [r7, #8]
 8002828:	61bb      	str	r3, [r7, #24]
 800282a:	e003      	b.n	8002834 <HAL_UART_Receive+0x92>
    }
    else
    {
      pdata8bits  = pData;
 800282c:	68bb      	ldr	r3, [r7, #8]
 800282e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002830:	2300      	movs	r3, #0
 8002832:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8002834:	68fb      	ldr	r3, [r7, #12]
 8002836:	2200      	movs	r2, #0
 8002838:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 800283c:	e043      	b.n	80028c6 <HAL_UART_Receive+0x124>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 800283e:	683b      	ldr	r3, [r7, #0]
 8002840:	9300      	str	r3, [sp, #0]
 8002842:	697b      	ldr	r3, [r7, #20]
 8002844:	2200      	movs	r2, #0
 8002846:	2120      	movs	r1, #32
 8002848:	68f8      	ldr	r0, [r7, #12]
 800284a:	f000 fb65 	bl	8002f18 <UART_WaitOnFlagUntilTimeout>
 800284e:	4603      	mov	r3, r0
 8002850:	2b00      	cmp	r3, #0
 8002852:	d001      	beq.n	8002858 <HAL_UART_Receive+0xb6>
      {
        return HAL_TIMEOUT;
 8002854:	2303      	movs	r3, #3
 8002856:	e042      	b.n	80028de <HAL_UART_Receive+0x13c>
      }
      if (pdata8bits == NULL)
 8002858:	69fb      	ldr	r3, [r7, #28]
 800285a:	2b00      	cmp	r3, #0
 800285c:	d10c      	bne.n	8002878 <HAL_UART_Receive+0xd6>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 800285e:	68fb      	ldr	r3, [r7, #12]
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	685b      	ldr	r3, [r3, #4]
 8002864:	b29b      	uxth	r3, r3
 8002866:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800286a:	b29a      	uxth	r2, r3
 800286c:	69bb      	ldr	r3, [r7, #24]
 800286e:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8002870:	69bb      	ldr	r3, [r7, #24]
 8002872:	3302      	adds	r3, #2
 8002874:	61bb      	str	r3, [r7, #24]
 8002876:	e01f      	b.n	80028b8 <HAL_UART_Receive+0x116>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8002878:	68fb      	ldr	r3, [r7, #12]
 800287a:	689b      	ldr	r3, [r3, #8]
 800287c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002880:	d007      	beq.n	8002892 <HAL_UART_Receive+0xf0>
 8002882:	68fb      	ldr	r3, [r7, #12]
 8002884:	689b      	ldr	r3, [r3, #8]
 8002886:	2b00      	cmp	r3, #0
 8002888:	d10a      	bne.n	80028a0 <HAL_UART_Receive+0xfe>
 800288a:	68fb      	ldr	r3, [r7, #12]
 800288c:	691b      	ldr	r3, [r3, #16]
 800288e:	2b00      	cmp	r3, #0
 8002890:	d106      	bne.n	80028a0 <HAL_UART_Receive+0xfe>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8002892:	68fb      	ldr	r3, [r7, #12]
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	685b      	ldr	r3, [r3, #4]
 8002898:	b2da      	uxtb	r2, r3
 800289a:	69fb      	ldr	r3, [r7, #28]
 800289c:	701a      	strb	r2, [r3, #0]
 800289e:	e008      	b.n	80028b2 <HAL_UART_Receive+0x110>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80028a0:	68fb      	ldr	r3, [r7, #12]
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	685b      	ldr	r3, [r3, #4]
 80028a6:	b2db      	uxtb	r3, r3
 80028a8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80028ac:	b2da      	uxtb	r2, r3
 80028ae:	69fb      	ldr	r3, [r7, #28]
 80028b0:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 80028b2:	69fb      	ldr	r3, [r7, #28]
 80028b4:	3301      	adds	r3, #1
 80028b6:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 80028b8:	68fb      	ldr	r3, [r7, #12]
 80028ba:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80028bc:	b29b      	uxth	r3, r3
 80028be:	3b01      	subs	r3, #1
 80028c0:	b29a      	uxth	r2, r3
 80028c2:	68fb      	ldr	r3, [r7, #12]
 80028c4:	85da      	strh	r2, [r3, #46]	; 0x2e
    while (huart->RxXferCount > 0U)
 80028c6:	68fb      	ldr	r3, [r7, #12]
 80028c8:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80028ca:	b29b      	uxth	r3, r3
 80028cc:	2b00      	cmp	r3, #0
 80028ce:	d1b6      	bne.n	800283e <HAL_UART_Receive+0x9c>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80028d0:	68fb      	ldr	r3, [r7, #12]
 80028d2:	2220      	movs	r2, #32
 80028d4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    return HAL_OK;
 80028d8:	2300      	movs	r3, #0
 80028da:	e000      	b.n	80028de <HAL_UART_Receive+0x13c>
  }
  else
  {
    return HAL_BUSY;
 80028dc:	2302      	movs	r3, #2
  }
}
 80028de:	4618      	mov	r0, r3
 80028e0:	3720      	adds	r7, #32
 80028e2:	46bd      	mov	sp, r7
 80028e4:	bd80      	pop	{r7, pc}

080028e6 <HAL_UART_Transmit_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 80028e6:	b480      	push	{r7}
 80028e8:	b085      	sub	sp, #20
 80028ea:	af00      	add	r7, sp, #0
 80028ec:	60f8      	str	r0, [r7, #12]
 80028ee:	60b9      	str	r1, [r7, #8]
 80028f0:	4613      	mov	r3, r2
 80028f2:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80028f4:	68fb      	ldr	r3, [r7, #12]
 80028f6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80028fa:	b2db      	uxtb	r3, r3
 80028fc:	2b20      	cmp	r3, #32
 80028fe:	d130      	bne.n	8002962 <HAL_UART_Transmit_IT+0x7c>
  {
    if ((pData == NULL) || (Size == 0U))
 8002900:	68bb      	ldr	r3, [r7, #8]
 8002902:	2b00      	cmp	r3, #0
 8002904:	d002      	beq.n	800290c <HAL_UART_Transmit_IT+0x26>
 8002906:	88fb      	ldrh	r3, [r7, #6]
 8002908:	2b00      	cmp	r3, #0
 800290a:	d101      	bne.n	8002910 <HAL_UART_Transmit_IT+0x2a>
    {
      return HAL_ERROR;
 800290c:	2301      	movs	r3, #1
 800290e:	e029      	b.n	8002964 <HAL_UART_Transmit_IT+0x7e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8002910:	68fb      	ldr	r3, [r7, #12]
 8002912:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002916:	2b01      	cmp	r3, #1
 8002918:	d101      	bne.n	800291e <HAL_UART_Transmit_IT+0x38>
 800291a:	2302      	movs	r3, #2
 800291c:	e022      	b.n	8002964 <HAL_UART_Transmit_IT+0x7e>
 800291e:	68fb      	ldr	r3, [r7, #12]
 8002920:	2201      	movs	r2, #1
 8002922:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->pTxBuffPtr = pData;
 8002926:	68fb      	ldr	r3, [r7, #12]
 8002928:	68ba      	ldr	r2, [r7, #8]
 800292a:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 800292c:	68fb      	ldr	r3, [r7, #12]
 800292e:	88fa      	ldrh	r2, [r7, #6]
 8002930:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8002932:	68fb      	ldr	r3, [r7, #12]
 8002934:	88fa      	ldrh	r2, [r7, #6]
 8002936:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002938:	68fb      	ldr	r3, [r7, #12]
 800293a:	2200      	movs	r2, #0
 800293c:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800293e:	68fb      	ldr	r3, [r7, #12]
 8002940:	2221      	movs	r2, #33	; 0x21
 8002942:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8002946:	68fb      	ldr	r3, [r7, #12]
 8002948:	2200      	movs	r2, #0
 800294a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Enable the UART Transmit data register empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_TXE);
 800294e:	68fb      	ldr	r3, [r7, #12]
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	68da      	ldr	r2, [r3, #12]
 8002954:	68fb      	ldr	r3, [r7, #12]
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800295c:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 800295e:	2300      	movs	r3, #0
 8002960:	e000      	b.n	8002964 <HAL_UART_Transmit_IT+0x7e>
  }
  else
  {
    return HAL_BUSY;
 8002962:	2302      	movs	r3, #2
  }
}
 8002964:	4618      	mov	r0, r3
 8002966:	3714      	adds	r7, #20
 8002968:	46bd      	mov	sp, r7
 800296a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800296e:	4770      	bx	lr

08002970 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8002970:	b580      	push	{r7, lr}
 8002972:	b084      	sub	sp, #16
 8002974:	af00      	add	r7, sp, #0
 8002976:	60f8      	str	r0, [r7, #12]
 8002978:	60b9      	str	r1, [r7, #8]
 800297a:	4613      	mov	r3, r2
 800297c:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800297e:	68fb      	ldr	r3, [r7, #12]
 8002980:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002984:	b2db      	uxtb	r3, r3
 8002986:	2b20      	cmp	r3, #32
 8002988:	d11d      	bne.n	80029c6 <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 800298a:	68bb      	ldr	r3, [r7, #8]
 800298c:	2b00      	cmp	r3, #0
 800298e:	d002      	beq.n	8002996 <HAL_UART_Receive_IT+0x26>
 8002990:	88fb      	ldrh	r3, [r7, #6]
 8002992:	2b00      	cmp	r3, #0
 8002994:	d101      	bne.n	800299a <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8002996:	2301      	movs	r3, #1
 8002998:	e016      	b.n	80029c8 <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800299a:	68fb      	ldr	r3, [r7, #12]
 800299c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80029a0:	2b01      	cmp	r3, #1
 80029a2:	d101      	bne.n	80029a8 <HAL_UART_Receive_IT+0x38>
 80029a4:	2302      	movs	r3, #2
 80029a6:	e00f      	b.n	80029c8 <HAL_UART_Receive_IT+0x58>
 80029a8:	68fb      	ldr	r3, [r7, #12]
 80029aa:	2201      	movs	r2, #1
 80029ac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80029b0:	68fb      	ldr	r3, [r7, #12]
 80029b2:	2200      	movs	r2, #0
 80029b4:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 80029b6:	88fb      	ldrh	r3, [r7, #6]
 80029b8:	461a      	mov	r2, r3
 80029ba:	68b9      	ldr	r1, [r7, #8]
 80029bc:	68f8      	ldr	r0, [r7, #12]
 80029be:	f000 fb19 	bl	8002ff4 <UART_Start_Receive_IT>
 80029c2:	4603      	mov	r3, r0
 80029c4:	e000      	b.n	80029c8 <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 80029c6:	2302      	movs	r3, #2
  }
}
 80029c8:	4618      	mov	r0, r3
 80029ca:	3710      	adds	r7, #16
 80029cc:	46bd      	mov	sp, r7
 80029ce:	bd80      	pop	{r7, pc}

080029d0 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80029d0:	b580      	push	{r7, lr}
 80029d2:	b0ba      	sub	sp, #232	; 0xe8
 80029d4:	af00      	add	r7, sp, #0
 80029d6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	68db      	ldr	r3, [r3, #12]
 80029e8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	695b      	ldr	r3, [r3, #20]
 80029f2:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 80029f6:	2300      	movs	r3, #0
 80029f8:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 80029fc:	2300      	movs	r3, #0
 80029fe:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8002a02:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002a06:	f003 030f 	and.w	r3, r3, #15
 8002a0a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8002a0e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8002a12:	2b00      	cmp	r3, #0
 8002a14:	d10f      	bne.n	8002a36 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002a16:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002a1a:	f003 0320 	and.w	r3, r3, #32
 8002a1e:	2b00      	cmp	r3, #0
 8002a20:	d009      	beq.n	8002a36 <HAL_UART_IRQHandler+0x66>
 8002a22:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002a26:	f003 0320 	and.w	r3, r3, #32
 8002a2a:	2b00      	cmp	r3, #0
 8002a2c:	d003      	beq.n	8002a36 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8002a2e:	6878      	ldr	r0, [r7, #4]
 8002a30:	f000 fbfd 	bl	800322e <UART_Receive_IT>
      return;
 8002a34:	e256      	b.n	8002ee4 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8002a36:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8002a3a:	2b00      	cmp	r3, #0
 8002a3c:	f000 80de 	beq.w	8002bfc <HAL_UART_IRQHandler+0x22c>
 8002a40:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002a44:	f003 0301 	and.w	r3, r3, #1
 8002a48:	2b00      	cmp	r3, #0
 8002a4a:	d106      	bne.n	8002a5a <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8002a4c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002a50:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8002a54:	2b00      	cmp	r3, #0
 8002a56:	f000 80d1 	beq.w	8002bfc <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8002a5a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002a5e:	f003 0301 	and.w	r3, r3, #1
 8002a62:	2b00      	cmp	r3, #0
 8002a64:	d00b      	beq.n	8002a7e <HAL_UART_IRQHandler+0xae>
 8002a66:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002a6a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002a6e:	2b00      	cmp	r3, #0
 8002a70:	d005      	beq.n	8002a7e <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a76:	f043 0201 	orr.w	r2, r3, #1
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002a7e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002a82:	f003 0304 	and.w	r3, r3, #4
 8002a86:	2b00      	cmp	r3, #0
 8002a88:	d00b      	beq.n	8002aa2 <HAL_UART_IRQHandler+0xd2>
 8002a8a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002a8e:	f003 0301 	and.w	r3, r3, #1
 8002a92:	2b00      	cmp	r3, #0
 8002a94:	d005      	beq.n	8002aa2 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a9a:	f043 0202 	orr.w	r2, r3, #2
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002aa2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002aa6:	f003 0302 	and.w	r3, r3, #2
 8002aaa:	2b00      	cmp	r3, #0
 8002aac:	d00b      	beq.n	8002ac6 <HAL_UART_IRQHandler+0xf6>
 8002aae:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002ab2:	f003 0301 	and.w	r3, r3, #1
 8002ab6:	2b00      	cmp	r3, #0
 8002ab8:	d005      	beq.n	8002ac6 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002abe:	f043 0204 	orr.w	r2, r3, #4
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8002ac6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002aca:	f003 0308 	and.w	r3, r3, #8
 8002ace:	2b00      	cmp	r3, #0
 8002ad0:	d011      	beq.n	8002af6 <HAL_UART_IRQHandler+0x126>
 8002ad2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002ad6:	f003 0320 	and.w	r3, r3, #32
 8002ada:	2b00      	cmp	r3, #0
 8002adc:	d105      	bne.n	8002aea <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8002ade:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002ae2:	f003 0301 	and.w	r3, r3, #1
 8002ae6:	2b00      	cmp	r3, #0
 8002ae8:	d005      	beq.n	8002af6 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002aee:	f043 0208 	orr.w	r2, r3, #8
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002afa:	2b00      	cmp	r3, #0
 8002afc:	f000 81ed 	beq.w	8002eda <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002b00:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002b04:	f003 0320 	and.w	r3, r3, #32
 8002b08:	2b00      	cmp	r3, #0
 8002b0a:	d008      	beq.n	8002b1e <HAL_UART_IRQHandler+0x14e>
 8002b0c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002b10:	f003 0320 	and.w	r3, r3, #32
 8002b14:	2b00      	cmp	r3, #0
 8002b16:	d002      	beq.n	8002b1e <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8002b18:	6878      	ldr	r0, [r7, #4]
 8002b1a:	f000 fb88 	bl	800322e <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	695b      	ldr	r3, [r3, #20]
 8002b24:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002b28:	2b40      	cmp	r3, #64	; 0x40
 8002b2a:	bf0c      	ite	eq
 8002b2c:	2301      	moveq	r3, #1
 8002b2e:	2300      	movne	r3, #0
 8002b30:	b2db      	uxtb	r3, r3
 8002b32:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b3a:	f003 0308 	and.w	r3, r3, #8
 8002b3e:	2b00      	cmp	r3, #0
 8002b40:	d103      	bne.n	8002b4a <HAL_UART_IRQHandler+0x17a>
 8002b42:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8002b46:	2b00      	cmp	r3, #0
 8002b48:	d04f      	beq.n	8002bea <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8002b4a:	6878      	ldr	r0, [r7, #4]
 8002b4c:	f000 fa90 	bl	8003070 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	695b      	ldr	r3, [r3, #20]
 8002b56:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002b5a:	2b40      	cmp	r3, #64	; 0x40
 8002b5c:	d141      	bne.n	8002be2 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	3314      	adds	r3, #20
 8002b64:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002b68:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8002b6c:	e853 3f00 	ldrex	r3, [r3]
 8002b70:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8002b74:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8002b78:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002b7c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	3314      	adds	r3, #20
 8002b86:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8002b8a:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8002b8e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002b92:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8002b96:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8002b9a:	e841 2300 	strex	r3, r2, [r1]
 8002b9e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8002ba2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8002ba6:	2b00      	cmp	r3, #0
 8002ba8:	d1d9      	bne.n	8002b5e <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002bae:	2b00      	cmp	r3, #0
 8002bb0:	d013      	beq.n	8002bda <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002bb6:	4a7d      	ldr	r2, [pc, #500]	; (8002dac <HAL_UART_IRQHandler+0x3dc>)
 8002bb8:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002bbe:	4618      	mov	r0, r3
 8002bc0:	f7fe feb7 	bl	8001932 <HAL_DMA_Abort_IT>
 8002bc4:	4603      	mov	r3, r0
 8002bc6:	2b00      	cmp	r3, #0
 8002bc8:	d016      	beq.n	8002bf8 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002bce:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002bd0:	687a      	ldr	r2, [r7, #4]
 8002bd2:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002bd4:	4610      	mov	r0, r2
 8002bd6:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002bd8:	e00e      	b.n	8002bf8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8002bda:	6878      	ldr	r0, [r7, #4]
 8002bdc:	f000 f986 	bl	8002eec <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002be0:	e00a      	b.n	8002bf8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8002be2:	6878      	ldr	r0, [r7, #4]
 8002be4:	f000 f982 	bl	8002eec <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002be8:	e006      	b.n	8002bf8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8002bea:	6878      	ldr	r0, [r7, #4]
 8002bec:	f000 f97e 	bl	8002eec <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	2200      	movs	r2, #0
 8002bf4:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8002bf6:	e170      	b.n	8002eda <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002bf8:	bf00      	nop
    return;
 8002bfa:	e16e      	b.n	8002eda <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c00:	2b01      	cmp	r3, #1
 8002c02:	f040 814a 	bne.w	8002e9a <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8002c06:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002c0a:	f003 0310 	and.w	r3, r3, #16
 8002c0e:	2b00      	cmp	r3, #0
 8002c10:	f000 8143 	beq.w	8002e9a <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8002c14:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002c18:	f003 0310 	and.w	r3, r3, #16
 8002c1c:	2b00      	cmp	r3, #0
 8002c1e:	f000 813c 	beq.w	8002e9a <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8002c22:	2300      	movs	r3, #0
 8002c24:	60bb      	str	r3, [r7, #8]
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	60bb      	str	r3, [r7, #8]
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	685b      	ldr	r3, [r3, #4]
 8002c34:	60bb      	str	r3, [r7, #8]
 8002c36:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	695b      	ldr	r3, [r3, #20]
 8002c3e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002c42:	2b40      	cmp	r3, #64	; 0x40
 8002c44:	f040 80b4 	bne.w	8002db0 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002c4c:	681b      	ldr	r3, [r3, #0]
 8002c4e:	685b      	ldr	r3, [r3, #4]
 8002c50:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8002c54:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8002c58:	2b00      	cmp	r3, #0
 8002c5a:	f000 8140 	beq.w	8002ede <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8002c62:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8002c66:	429a      	cmp	r2, r3
 8002c68:	f080 8139 	bcs.w	8002ede <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8002c72:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002c78:	69db      	ldr	r3, [r3, #28]
 8002c7a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002c7e:	f000 8088 	beq.w	8002d92 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	330c      	adds	r3, #12
 8002c88:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002c8c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8002c90:	e853 3f00 	ldrex	r3, [r3]
 8002c94:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8002c98:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002c9c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002ca0:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	330c      	adds	r3, #12
 8002caa:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8002cae:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8002cb2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002cb6:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8002cba:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8002cbe:	e841 2300 	strex	r3, r2, [r1]
 8002cc2:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8002cc6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002cca:	2b00      	cmp	r3, #0
 8002ccc:	d1d9      	bne.n	8002c82 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	3314      	adds	r3, #20
 8002cd4:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002cd6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002cd8:	e853 3f00 	ldrex	r3, [r3]
 8002cdc:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8002cde:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002ce0:	f023 0301 	bic.w	r3, r3, #1
 8002ce4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	3314      	adds	r3, #20
 8002cee:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8002cf2:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8002cf6:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002cf8:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8002cfa:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8002cfe:	e841 2300 	strex	r3, r2, [r1]
 8002d02:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8002d04:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002d06:	2b00      	cmp	r3, #0
 8002d08:	d1e1      	bne.n	8002cce <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	3314      	adds	r3, #20
 8002d10:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002d12:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002d14:	e853 3f00 	ldrex	r3, [r3]
 8002d18:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8002d1a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002d1c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002d20:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	3314      	adds	r3, #20
 8002d2a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8002d2e:	66fa      	str	r2, [r7, #108]	; 0x6c
 8002d30:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002d32:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8002d34:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8002d36:	e841 2300 	strex	r3, r2, [r1]
 8002d3a:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8002d3c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002d3e:	2b00      	cmp	r3, #0
 8002d40:	d1e3      	bne.n	8002d0a <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	2220      	movs	r2, #32
 8002d46:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	2200      	movs	r2, #0
 8002d4e:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	330c      	adds	r3, #12
 8002d56:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002d58:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002d5a:	e853 3f00 	ldrex	r3, [r3]
 8002d5e:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8002d60:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002d62:	f023 0310 	bic.w	r3, r3, #16
 8002d66:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	330c      	adds	r3, #12
 8002d70:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8002d74:	65ba      	str	r2, [r7, #88]	; 0x58
 8002d76:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002d78:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8002d7a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8002d7c:	e841 2300 	strex	r3, r2, [r1]
 8002d80:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8002d82:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002d84:	2b00      	cmp	r3, #0
 8002d86:	d1e3      	bne.n	8002d50 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d8c:	4618      	mov	r0, r3
 8002d8e:	f7fe fd60 	bl	8001852 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002d9a:	b29b      	uxth	r3, r3
 8002d9c:	1ad3      	subs	r3, r2, r3
 8002d9e:	b29b      	uxth	r3, r3
 8002da0:	4619      	mov	r1, r3
 8002da2:	6878      	ldr	r0, [r7, #4]
 8002da4:	f000 f8ac 	bl	8002f00 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8002da8:	e099      	b.n	8002ede <HAL_UART_IRQHandler+0x50e>
 8002daa:	bf00      	nop
 8002dac:	08003137 	.word	0x08003137
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002db8:	b29b      	uxth	r3, r3
 8002dba:	1ad3      	subs	r3, r2, r3
 8002dbc:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002dc4:	b29b      	uxth	r3, r3
 8002dc6:	2b00      	cmp	r3, #0
 8002dc8:	f000 808b 	beq.w	8002ee2 <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8002dcc:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8002dd0:	2b00      	cmp	r3, #0
 8002dd2:	f000 8086 	beq.w	8002ee2 <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	330c      	adds	r3, #12
 8002ddc:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002dde:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002de0:	e853 3f00 	ldrex	r3, [r3]
 8002de4:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8002de6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002de8:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8002dec:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	330c      	adds	r3, #12
 8002df6:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8002dfa:	647a      	str	r2, [r7, #68]	; 0x44
 8002dfc:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002dfe:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8002e00:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8002e02:	e841 2300 	strex	r3, r2, [r1]
 8002e06:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8002e08:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002e0a:	2b00      	cmp	r3, #0
 8002e0c:	d1e3      	bne.n	8002dd6 <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	3314      	adds	r3, #20
 8002e14:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002e16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e18:	e853 3f00 	ldrex	r3, [r3]
 8002e1c:	623b      	str	r3, [r7, #32]
   return(result);
 8002e1e:	6a3b      	ldr	r3, [r7, #32]
 8002e20:	f023 0301 	bic.w	r3, r3, #1
 8002e24:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	3314      	adds	r3, #20
 8002e2e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8002e32:	633a      	str	r2, [r7, #48]	; 0x30
 8002e34:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002e36:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8002e38:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002e3a:	e841 2300 	strex	r3, r2, [r1]
 8002e3e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8002e40:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002e42:	2b00      	cmp	r3, #0
 8002e44:	d1e3      	bne.n	8002e0e <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	2220      	movs	r2, #32
 8002e4a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	2200      	movs	r2, #0
 8002e52:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	330c      	adds	r3, #12
 8002e5a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002e5c:	693b      	ldr	r3, [r7, #16]
 8002e5e:	e853 3f00 	ldrex	r3, [r3]
 8002e62:	60fb      	str	r3, [r7, #12]
   return(result);
 8002e64:	68fb      	ldr	r3, [r7, #12]
 8002e66:	f023 0310 	bic.w	r3, r3, #16
 8002e6a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	330c      	adds	r3, #12
 8002e74:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8002e78:	61fa      	str	r2, [r7, #28]
 8002e7a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002e7c:	69b9      	ldr	r1, [r7, #24]
 8002e7e:	69fa      	ldr	r2, [r7, #28]
 8002e80:	e841 2300 	strex	r3, r2, [r1]
 8002e84:	617b      	str	r3, [r7, #20]
   return(result);
 8002e86:	697b      	ldr	r3, [r7, #20]
 8002e88:	2b00      	cmp	r3, #0
 8002e8a:	d1e3      	bne.n	8002e54 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8002e8c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8002e90:	4619      	mov	r1, r3
 8002e92:	6878      	ldr	r0, [r7, #4]
 8002e94:	f000 f834 	bl	8002f00 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8002e98:	e023      	b.n	8002ee2 <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8002e9a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002e9e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002ea2:	2b00      	cmp	r3, #0
 8002ea4:	d009      	beq.n	8002eba <HAL_UART_IRQHandler+0x4ea>
 8002ea6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002eaa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002eae:	2b00      	cmp	r3, #0
 8002eb0:	d003      	beq.n	8002eba <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8002eb2:	6878      	ldr	r0, [r7, #4]
 8002eb4:	f000 f953 	bl	800315e <UART_Transmit_IT>
    return;
 8002eb8:	e014      	b.n	8002ee4 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8002eba:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002ebe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002ec2:	2b00      	cmp	r3, #0
 8002ec4:	d00e      	beq.n	8002ee4 <HAL_UART_IRQHandler+0x514>
 8002ec6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002eca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002ece:	2b00      	cmp	r3, #0
 8002ed0:	d008      	beq.n	8002ee4 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8002ed2:	6878      	ldr	r0, [r7, #4]
 8002ed4:	f000 f993 	bl	80031fe <UART_EndTransmit_IT>
    return;
 8002ed8:	e004      	b.n	8002ee4 <HAL_UART_IRQHandler+0x514>
    return;
 8002eda:	bf00      	nop
 8002edc:	e002      	b.n	8002ee4 <HAL_UART_IRQHandler+0x514>
      return;
 8002ede:	bf00      	nop
 8002ee0:	e000      	b.n	8002ee4 <HAL_UART_IRQHandler+0x514>
      return;
 8002ee2:	bf00      	nop
  }
}
 8002ee4:	37e8      	adds	r7, #232	; 0xe8
 8002ee6:	46bd      	mov	sp, r7
 8002ee8:	bd80      	pop	{r7, pc}
 8002eea:	bf00      	nop

08002eec <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8002eec:	b480      	push	{r7}
 8002eee:	b083      	sub	sp, #12
 8002ef0:	af00      	add	r7, sp, #0
 8002ef2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8002ef4:	bf00      	nop
 8002ef6:	370c      	adds	r7, #12
 8002ef8:	46bd      	mov	sp, r7
 8002efa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002efe:	4770      	bx	lr

08002f00 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8002f00:	b480      	push	{r7}
 8002f02:	b083      	sub	sp, #12
 8002f04:	af00      	add	r7, sp, #0
 8002f06:	6078      	str	r0, [r7, #4]
 8002f08:	460b      	mov	r3, r1
 8002f0a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8002f0c:	bf00      	nop
 8002f0e:	370c      	adds	r7, #12
 8002f10:	46bd      	mov	sp, r7
 8002f12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f16:	4770      	bx	lr

08002f18 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8002f18:	b580      	push	{r7, lr}
 8002f1a:	b090      	sub	sp, #64	; 0x40
 8002f1c:	af00      	add	r7, sp, #0
 8002f1e:	60f8      	str	r0, [r7, #12]
 8002f20:	60b9      	str	r1, [r7, #8]
 8002f22:	603b      	str	r3, [r7, #0]
 8002f24:	4613      	mov	r3, r2
 8002f26:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002f28:	e050      	b.n	8002fcc <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002f2a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002f2c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002f30:	d04c      	beq.n	8002fcc <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8002f32:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002f34:	2b00      	cmp	r3, #0
 8002f36:	d007      	beq.n	8002f48 <UART_WaitOnFlagUntilTimeout+0x30>
 8002f38:	f7fe fb6e 	bl	8001618 <HAL_GetTick>
 8002f3c:	4602      	mov	r2, r0
 8002f3e:	683b      	ldr	r3, [r7, #0]
 8002f40:	1ad3      	subs	r3, r2, r3
 8002f42:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8002f44:	429a      	cmp	r2, r3
 8002f46:	d241      	bcs.n	8002fcc <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002f48:	68fb      	ldr	r3, [r7, #12]
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	330c      	adds	r3, #12
 8002f4e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002f50:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002f52:	e853 3f00 	ldrex	r3, [r3]
 8002f56:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8002f58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f5a:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8002f5e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002f60:	68fb      	ldr	r3, [r7, #12]
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	330c      	adds	r3, #12
 8002f66:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002f68:	637a      	str	r2, [r7, #52]	; 0x34
 8002f6a:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002f6c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8002f6e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002f70:	e841 2300 	strex	r3, r2, [r1]
 8002f74:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8002f76:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002f78:	2b00      	cmp	r3, #0
 8002f7a:	d1e5      	bne.n	8002f48 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002f7c:	68fb      	ldr	r3, [r7, #12]
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	3314      	adds	r3, #20
 8002f82:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002f84:	697b      	ldr	r3, [r7, #20]
 8002f86:	e853 3f00 	ldrex	r3, [r3]
 8002f8a:	613b      	str	r3, [r7, #16]
   return(result);
 8002f8c:	693b      	ldr	r3, [r7, #16]
 8002f8e:	f023 0301 	bic.w	r3, r3, #1
 8002f92:	63bb      	str	r3, [r7, #56]	; 0x38
 8002f94:	68fb      	ldr	r3, [r7, #12]
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	3314      	adds	r3, #20
 8002f9a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002f9c:	623a      	str	r2, [r7, #32]
 8002f9e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002fa0:	69f9      	ldr	r1, [r7, #28]
 8002fa2:	6a3a      	ldr	r2, [r7, #32]
 8002fa4:	e841 2300 	strex	r3, r2, [r1]
 8002fa8:	61bb      	str	r3, [r7, #24]
   return(result);
 8002faa:	69bb      	ldr	r3, [r7, #24]
 8002fac:	2b00      	cmp	r3, #0
 8002fae:	d1e5      	bne.n	8002f7c <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8002fb0:	68fb      	ldr	r3, [r7, #12]
 8002fb2:	2220      	movs	r2, #32
 8002fb4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8002fb8:	68fb      	ldr	r3, [r7, #12]
 8002fba:	2220      	movs	r2, #32
 8002fbc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8002fc0:	68fb      	ldr	r3, [r7, #12]
 8002fc2:	2200      	movs	r2, #0
 8002fc4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8002fc8:	2303      	movs	r3, #3
 8002fca:	e00f      	b.n	8002fec <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002fcc:	68fb      	ldr	r3, [r7, #12]
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	681a      	ldr	r2, [r3, #0]
 8002fd2:	68bb      	ldr	r3, [r7, #8]
 8002fd4:	4013      	ands	r3, r2
 8002fd6:	68ba      	ldr	r2, [r7, #8]
 8002fd8:	429a      	cmp	r2, r3
 8002fda:	bf0c      	ite	eq
 8002fdc:	2301      	moveq	r3, #1
 8002fde:	2300      	movne	r3, #0
 8002fe0:	b2db      	uxtb	r3, r3
 8002fe2:	461a      	mov	r2, r3
 8002fe4:	79fb      	ldrb	r3, [r7, #7]
 8002fe6:	429a      	cmp	r2, r3
 8002fe8:	d09f      	beq.n	8002f2a <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002fea:	2300      	movs	r3, #0
}
 8002fec:	4618      	mov	r0, r3
 8002fee:	3740      	adds	r7, #64	; 0x40
 8002ff0:	46bd      	mov	sp, r7
 8002ff2:	bd80      	pop	{r7, pc}

08002ff4 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8002ff4:	b480      	push	{r7}
 8002ff6:	b085      	sub	sp, #20
 8002ff8:	af00      	add	r7, sp, #0
 8002ffa:	60f8      	str	r0, [r7, #12]
 8002ffc:	60b9      	str	r1, [r7, #8]
 8002ffe:	4613      	mov	r3, r2
 8003000:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8003002:	68fb      	ldr	r3, [r7, #12]
 8003004:	68ba      	ldr	r2, [r7, #8]
 8003006:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8003008:	68fb      	ldr	r3, [r7, #12]
 800300a:	88fa      	ldrh	r2, [r7, #6]
 800300c:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 800300e:	68fb      	ldr	r3, [r7, #12]
 8003010:	88fa      	ldrh	r2, [r7, #6]
 8003012:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003014:	68fb      	ldr	r3, [r7, #12]
 8003016:	2200      	movs	r2, #0
 8003018:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800301a:	68fb      	ldr	r3, [r7, #12]
 800301c:	2222      	movs	r2, #34	; 0x22
 800301e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8003022:	68fb      	ldr	r3, [r7, #12]
 8003024:	2200      	movs	r2, #0
 8003026:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 800302a:	68fb      	ldr	r3, [r7, #12]
 800302c:	691b      	ldr	r3, [r3, #16]
 800302e:	2b00      	cmp	r3, #0
 8003030:	d007      	beq.n	8003042 <UART_Start_Receive_IT+0x4e>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8003032:	68fb      	ldr	r3, [r7, #12]
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	68da      	ldr	r2, [r3, #12]
 8003038:	68fb      	ldr	r3, [r7, #12]
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003040:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8003042:	68fb      	ldr	r3, [r7, #12]
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	695a      	ldr	r2, [r3, #20]
 8003048:	68fb      	ldr	r3, [r7, #12]
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	f042 0201 	orr.w	r2, r2, #1
 8003050:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8003052:	68fb      	ldr	r3, [r7, #12]
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	68da      	ldr	r2, [r3, #12]
 8003058:	68fb      	ldr	r3, [r7, #12]
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	f042 0220 	orr.w	r2, r2, #32
 8003060:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8003062:	2300      	movs	r3, #0
}
 8003064:	4618      	mov	r0, r3
 8003066:	3714      	adds	r7, #20
 8003068:	46bd      	mov	sp, r7
 800306a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800306e:	4770      	bx	lr

08003070 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003070:	b480      	push	{r7}
 8003072:	b095      	sub	sp, #84	; 0x54
 8003074:	af00      	add	r7, sp, #0
 8003076:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	330c      	adds	r3, #12
 800307e:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003080:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003082:	e853 3f00 	ldrex	r3, [r3]
 8003086:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8003088:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800308a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800308e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	330c      	adds	r3, #12
 8003096:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003098:	643a      	str	r2, [r7, #64]	; 0x40
 800309a:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800309c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800309e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80030a0:	e841 2300 	strex	r3, r2, [r1]
 80030a4:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80030a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80030a8:	2b00      	cmp	r3, #0
 80030aa:	d1e5      	bne.n	8003078 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	3314      	adds	r3, #20
 80030b2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80030b4:	6a3b      	ldr	r3, [r7, #32]
 80030b6:	e853 3f00 	ldrex	r3, [r3]
 80030ba:	61fb      	str	r3, [r7, #28]
   return(result);
 80030bc:	69fb      	ldr	r3, [r7, #28]
 80030be:	f023 0301 	bic.w	r3, r3, #1
 80030c2:	64bb      	str	r3, [r7, #72]	; 0x48
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	3314      	adds	r3, #20
 80030ca:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80030cc:	62fa      	str	r2, [r7, #44]	; 0x2c
 80030ce:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80030d0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80030d2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80030d4:	e841 2300 	strex	r3, r2, [r1]
 80030d8:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80030da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030dc:	2b00      	cmp	r3, #0
 80030de:	d1e5      	bne.n	80030ac <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030e4:	2b01      	cmp	r3, #1
 80030e6:	d119      	bne.n	800311c <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	330c      	adds	r3, #12
 80030ee:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80030f0:	68fb      	ldr	r3, [r7, #12]
 80030f2:	e853 3f00 	ldrex	r3, [r3]
 80030f6:	60bb      	str	r3, [r7, #8]
   return(result);
 80030f8:	68bb      	ldr	r3, [r7, #8]
 80030fa:	f023 0310 	bic.w	r3, r3, #16
 80030fe:	647b      	str	r3, [r7, #68]	; 0x44
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	330c      	adds	r3, #12
 8003106:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003108:	61ba      	str	r2, [r7, #24]
 800310a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800310c:	6979      	ldr	r1, [r7, #20]
 800310e:	69ba      	ldr	r2, [r7, #24]
 8003110:	e841 2300 	strex	r3, r2, [r1]
 8003114:	613b      	str	r3, [r7, #16]
   return(result);
 8003116:	693b      	ldr	r3, [r7, #16]
 8003118:	2b00      	cmp	r3, #0
 800311a:	d1e5      	bne.n	80030e8 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	2220      	movs	r2, #32
 8003120:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	2200      	movs	r2, #0
 8003128:	631a      	str	r2, [r3, #48]	; 0x30
}
 800312a:	bf00      	nop
 800312c:	3754      	adds	r7, #84	; 0x54
 800312e:	46bd      	mov	sp, r7
 8003130:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003134:	4770      	bx	lr

08003136 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003136:	b580      	push	{r7, lr}
 8003138:	b084      	sub	sp, #16
 800313a:	af00      	add	r7, sp, #0
 800313c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003142:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8003144:	68fb      	ldr	r3, [r7, #12]
 8003146:	2200      	movs	r2, #0
 8003148:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800314a:	68fb      	ldr	r3, [r7, #12]
 800314c:	2200      	movs	r2, #0
 800314e:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003150:	68f8      	ldr	r0, [r7, #12]
 8003152:	f7ff fecb 	bl	8002eec <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003156:	bf00      	nop
 8003158:	3710      	adds	r7, #16
 800315a:	46bd      	mov	sp, r7
 800315c:	bd80      	pop	{r7, pc}

0800315e <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800315e:	b480      	push	{r7}
 8003160:	b085      	sub	sp, #20
 8003162:	af00      	add	r7, sp, #0
 8003164:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800316c:	b2db      	uxtb	r3, r3
 800316e:	2b21      	cmp	r3, #33	; 0x21
 8003170:	d13e      	bne.n	80031f0 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	689b      	ldr	r3, [r3, #8]
 8003176:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800317a:	d114      	bne.n	80031a6 <UART_Transmit_IT+0x48>
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	691b      	ldr	r3, [r3, #16]
 8003180:	2b00      	cmp	r3, #0
 8003182:	d110      	bne.n	80031a6 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	6a1b      	ldr	r3, [r3, #32]
 8003188:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800318a:	68fb      	ldr	r3, [r7, #12]
 800318c:	881b      	ldrh	r3, [r3, #0]
 800318e:	461a      	mov	r2, r3
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003198:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	6a1b      	ldr	r3, [r3, #32]
 800319e:	1c9a      	adds	r2, r3, #2
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	621a      	str	r2, [r3, #32]
 80031a4:	e008      	b.n	80031b8 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	6a1b      	ldr	r3, [r3, #32]
 80031aa:	1c59      	adds	r1, r3, #1
 80031ac:	687a      	ldr	r2, [r7, #4]
 80031ae:	6211      	str	r1, [r2, #32]
 80031b0:	781a      	ldrb	r2, [r3, #0]
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80031bc:	b29b      	uxth	r3, r3
 80031be:	3b01      	subs	r3, #1
 80031c0:	b29b      	uxth	r3, r3
 80031c2:	687a      	ldr	r2, [r7, #4]
 80031c4:	4619      	mov	r1, r3
 80031c6:	84d1      	strh	r1, [r2, #38]	; 0x26
 80031c8:	2b00      	cmp	r3, #0
 80031ca:	d10f      	bne.n	80031ec <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	68da      	ldr	r2, [r3, #12]
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80031da:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	68da      	ldr	r2, [r3, #12]
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80031ea:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80031ec:	2300      	movs	r3, #0
 80031ee:	e000      	b.n	80031f2 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80031f0:	2302      	movs	r3, #2
  }
}
 80031f2:	4618      	mov	r0, r3
 80031f4:	3714      	adds	r7, #20
 80031f6:	46bd      	mov	sp, r7
 80031f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031fc:	4770      	bx	lr

080031fe <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80031fe:	b580      	push	{r7, lr}
 8003200:	b082      	sub	sp, #8
 8003202:	af00      	add	r7, sp, #0
 8003204:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	68da      	ldr	r2, [r3, #12]
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003214:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	2220      	movs	r2, #32
 800321a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800321e:	6878      	ldr	r0, [r7, #4]
 8003220:	f7fe f912 	bl	8001448 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8003224:	2300      	movs	r3, #0
}
 8003226:	4618      	mov	r0, r3
 8003228:	3708      	adds	r7, #8
 800322a:	46bd      	mov	sp, r7
 800322c:	bd80      	pop	{r7, pc}

0800322e <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800322e:	b580      	push	{r7, lr}
 8003230:	b08c      	sub	sp, #48	; 0x30
 8003232:	af00      	add	r7, sp, #0
 8003234:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800323c:	b2db      	uxtb	r3, r3
 800323e:	2b22      	cmp	r3, #34	; 0x22
 8003240:	f040 80ab 	bne.w	800339a <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	689b      	ldr	r3, [r3, #8]
 8003248:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800324c:	d117      	bne.n	800327e <UART_Receive_IT+0x50>
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	691b      	ldr	r3, [r3, #16]
 8003252:	2b00      	cmp	r3, #0
 8003254:	d113      	bne.n	800327e <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8003256:	2300      	movs	r3, #0
 8003258:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800325e:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	685b      	ldr	r3, [r3, #4]
 8003266:	b29b      	uxth	r3, r3
 8003268:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800326c:	b29a      	uxth	r2, r3
 800326e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003270:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003276:	1c9a      	adds	r2, r3, #2
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	629a      	str	r2, [r3, #40]	; 0x28
 800327c:	e026      	b.n	80032cc <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003282:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8003284:	2300      	movs	r3, #0
 8003286:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	689b      	ldr	r3, [r3, #8]
 800328c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003290:	d007      	beq.n	80032a2 <UART_Receive_IT+0x74>
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	689b      	ldr	r3, [r3, #8]
 8003296:	2b00      	cmp	r3, #0
 8003298:	d10a      	bne.n	80032b0 <UART_Receive_IT+0x82>
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	691b      	ldr	r3, [r3, #16]
 800329e:	2b00      	cmp	r3, #0
 80032a0:	d106      	bne.n	80032b0 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	685b      	ldr	r3, [r3, #4]
 80032a8:	b2da      	uxtb	r2, r3
 80032aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80032ac:	701a      	strb	r2, [r3, #0]
 80032ae:	e008      	b.n	80032c2 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	685b      	ldr	r3, [r3, #4]
 80032b6:	b2db      	uxtb	r3, r3
 80032b8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80032bc:	b2da      	uxtb	r2, r3
 80032be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80032c0:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80032c6:	1c5a      	adds	r2, r3, #1
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80032d0:	b29b      	uxth	r3, r3
 80032d2:	3b01      	subs	r3, #1
 80032d4:	b29b      	uxth	r3, r3
 80032d6:	687a      	ldr	r2, [r7, #4]
 80032d8:	4619      	mov	r1, r3
 80032da:	85d1      	strh	r1, [r2, #46]	; 0x2e
 80032dc:	2b00      	cmp	r3, #0
 80032de:	d15a      	bne.n	8003396 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	68da      	ldr	r2, [r3, #12]
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	f022 0220 	bic.w	r2, r2, #32
 80032ee:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	68da      	ldr	r2, [r3, #12]
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80032fe:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	695a      	ldr	r2, [r3, #20]
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	f022 0201 	bic.w	r2, r2, #1
 800330e:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	2220      	movs	r2, #32
 8003314:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800331c:	2b01      	cmp	r3, #1
 800331e:	d135      	bne.n	800338c <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	2200      	movs	r2, #0
 8003324:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	330c      	adds	r3, #12
 800332c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800332e:	697b      	ldr	r3, [r7, #20]
 8003330:	e853 3f00 	ldrex	r3, [r3]
 8003334:	613b      	str	r3, [r7, #16]
   return(result);
 8003336:	693b      	ldr	r3, [r7, #16]
 8003338:	f023 0310 	bic.w	r3, r3, #16
 800333c:	627b      	str	r3, [r7, #36]	; 0x24
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	681b      	ldr	r3, [r3, #0]
 8003342:	330c      	adds	r3, #12
 8003344:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003346:	623a      	str	r2, [r7, #32]
 8003348:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800334a:	69f9      	ldr	r1, [r7, #28]
 800334c:	6a3a      	ldr	r2, [r7, #32]
 800334e:	e841 2300 	strex	r3, r2, [r1]
 8003352:	61bb      	str	r3, [r7, #24]
   return(result);
 8003354:	69bb      	ldr	r3, [r7, #24]
 8003356:	2b00      	cmp	r3, #0
 8003358:	d1e5      	bne.n	8003326 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	f003 0310 	and.w	r3, r3, #16
 8003364:	2b10      	cmp	r3, #16
 8003366:	d10a      	bne.n	800337e <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003368:	2300      	movs	r3, #0
 800336a:	60fb      	str	r3, [r7, #12]
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	60fb      	str	r3, [r7, #12]
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	685b      	ldr	r3, [r3, #4]
 800337a:	60fb      	str	r3, [r7, #12]
 800337c:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8003382:	4619      	mov	r1, r3
 8003384:	6878      	ldr	r0, [r7, #4]
 8003386:	f7ff fdbb 	bl	8002f00 <HAL_UARTEx_RxEventCallback>
 800338a:	e002      	b.n	8003392 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800338c:	6878      	ldr	r0, [r7, #4]
 800338e:	f7fe f847 	bl	8001420 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8003392:	2300      	movs	r3, #0
 8003394:	e002      	b.n	800339c <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8003396:	2300      	movs	r3, #0
 8003398:	e000      	b.n	800339c <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 800339a:	2302      	movs	r3, #2
  }
}
 800339c:	4618      	mov	r0, r3
 800339e:	3730      	adds	r7, #48	; 0x30
 80033a0:	46bd      	mov	sp, r7
 80033a2:	bd80      	pop	{r7, pc}

080033a4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80033a4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80033a8:	b0c0      	sub	sp, #256	; 0x100
 80033aa:	af00      	add	r7, sp, #0
 80033ac:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80033b0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	691b      	ldr	r3, [r3, #16]
 80033b8:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80033bc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80033c0:	68d9      	ldr	r1, [r3, #12]
 80033c2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80033c6:	681a      	ldr	r2, [r3, #0]
 80033c8:	ea40 0301 	orr.w	r3, r0, r1
 80033cc:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80033ce:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80033d2:	689a      	ldr	r2, [r3, #8]
 80033d4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80033d8:	691b      	ldr	r3, [r3, #16]
 80033da:	431a      	orrs	r2, r3
 80033dc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80033e0:	695b      	ldr	r3, [r3, #20]
 80033e2:	431a      	orrs	r2, r3
 80033e4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80033e8:	69db      	ldr	r3, [r3, #28]
 80033ea:	4313      	orrs	r3, r2
 80033ec:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80033f0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	68db      	ldr	r3, [r3, #12]
 80033f8:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80033fc:	f021 010c 	bic.w	r1, r1, #12
 8003400:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003404:	681a      	ldr	r2, [r3, #0]
 8003406:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800340a:	430b      	orrs	r3, r1
 800340c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800340e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	695b      	ldr	r3, [r3, #20]
 8003416:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800341a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800341e:	6999      	ldr	r1, [r3, #24]
 8003420:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003424:	681a      	ldr	r2, [r3, #0]
 8003426:	ea40 0301 	orr.w	r3, r0, r1
 800342a:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800342c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003430:	681a      	ldr	r2, [r3, #0]
 8003432:	4b8f      	ldr	r3, [pc, #572]	; (8003670 <UART_SetConfig+0x2cc>)
 8003434:	429a      	cmp	r2, r3
 8003436:	d005      	beq.n	8003444 <UART_SetConfig+0xa0>
 8003438:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800343c:	681a      	ldr	r2, [r3, #0]
 800343e:	4b8d      	ldr	r3, [pc, #564]	; (8003674 <UART_SetConfig+0x2d0>)
 8003440:	429a      	cmp	r2, r3
 8003442:	d104      	bne.n	800344e <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8003444:	f7ff f8ba 	bl	80025bc <HAL_RCC_GetPCLK2Freq>
 8003448:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 800344c:	e003      	b.n	8003456 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800344e:	f7ff f8a1 	bl	8002594 <HAL_RCC_GetPCLK1Freq>
 8003452:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003456:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800345a:	69db      	ldr	r3, [r3, #28]
 800345c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003460:	f040 810c 	bne.w	800367c <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003464:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003468:	2200      	movs	r2, #0
 800346a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800346e:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8003472:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8003476:	4622      	mov	r2, r4
 8003478:	462b      	mov	r3, r5
 800347a:	1891      	adds	r1, r2, r2
 800347c:	65b9      	str	r1, [r7, #88]	; 0x58
 800347e:	415b      	adcs	r3, r3
 8003480:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003482:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8003486:	4621      	mov	r1, r4
 8003488:	eb12 0801 	adds.w	r8, r2, r1
 800348c:	4629      	mov	r1, r5
 800348e:	eb43 0901 	adc.w	r9, r3, r1
 8003492:	f04f 0200 	mov.w	r2, #0
 8003496:	f04f 0300 	mov.w	r3, #0
 800349a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800349e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80034a2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80034a6:	4690      	mov	r8, r2
 80034a8:	4699      	mov	r9, r3
 80034aa:	4623      	mov	r3, r4
 80034ac:	eb18 0303 	adds.w	r3, r8, r3
 80034b0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80034b4:	462b      	mov	r3, r5
 80034b6:	eb49 0303 	adc.w	r3, r9, r3
 80034ba:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80034be:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80034c2:	685b      	ldr	r3, [r3, #4]
 80034c4:	2200      	movs	r2, #0
 80034c6:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80034ca:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 80034ce:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 80034d2:	460b      	mov	r3, r1
 80034d4:	18db      	adds	r3, r3, r3
 80034d6:	653b      	str	r3, [r7, #80]	; 0x50
 80034d8:	4613      	mov	r3, r2
 80034da:	eb42 0303 	adc.w	r3, r2, r3
 80034de:	657b      	str	r3, [r7, #84]	; 0x54
 80034e0:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 80034e4:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 80034e8:	f7fc feea 	bl	80002c0 <__aeabi_uldivmod>
 80034ec:	4602      	mov	r2, r0
 80034ee:	460b      	mov	r3, r1
 80034f0:	4b61      	ldr	r3, [pc, #388]	; (8003678 <UART_SetConfig+0x2d4>)
 80034f2:	fba3 2302 	umull	r2, r3, r3, r2
 80034f6:	095b      	lsrs	r3, r3, #5
 80034f8:	011c      	lsls	r4, r3, #4
 80034fa:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80034fe:	2200      	movs	r2, #0
 8003500:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8003504:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8003508:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 800350c:	4642      	mov	r2, r8
 800350e:	464b      	mov	r3, r9
 8003510:	1891      	adds	r1, r2, r2
 8003512:	64b9      	str	r1, [r7, #72]	; 0x48
 8003514:	415b      	adcs	r3, r3
 8003516:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003518:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800351c:	4641      	mov	r1, r8
 800351e:	eb12 0a01 	adds.w	sl, r2, r1
 8003522:	4649      	mov	r1, r9
 8003524:	eb43 0b01 	adc.w	fp, r3, r1
 8003528:	f04f 0200 	mov.w	r2, #0
 800352c:	f04f 0300 	mov.w	r3, #0
 8003530:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8003534:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8003538:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800353c:	4692      	mov	sl, r2
 800353e:	469b      	mov	fp, r3
 8003540:	4643      	mov	r3, r8
 8003542:	eb1a 0303 	adds.w	r3, sl, r3
 8003546:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800354a:	464b      	mov	r3, r9
 800354c:	eb4b 0303 	adc.w	r3, fp, r3
 8003550:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8003554:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003558:	685b      	ldr	r3, [r3, #4]
 800355a:	2200      	movs	r2, #0
 800355c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8003560:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8003564:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8003568:	460b      	mov	r3, r1
 800356a:	18db      	adds	r3, r3, r3
 800356c:	643b      	str	r3, [r7, #64]	; 0x40
 800356e:	4613      	mov	r3, r2
 8003570:	eb42 0303 	adc.w	r3, r2, r3
 8003574:	647b      	str	r3, [r7, #68]	; 0x44
 8003576:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800357a:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 800357e:	f7fc fe9f 	bl	80002c0 <__aeabi_uldivmod>
 8003582:	4602      	mov	r2, r0
 8003584:	460b      	mov	r3, r1
 8003586:	4611      	mov	r1, r2
 8003588:	4b3b      	ldr	r3, [pc, #236]	; (8003678 <UART_SetConfig+0x2d4>)
 800358a:	fba3 2301 	umull	r2, r3, r3, r1
 800358e:	095b      	lsrs	r3, r3, #5
 8003590:	2264      	movs	r2, #100	; 0x64
 8003592:	fb02 f303 	mul.w	r3, r2, r3
 8003596:	1acb      	subs	r3, r1, r3
 8003598:	00db      	lsls	r3, r3, #3
 800359a:	f103 0232 	add.w	r2, r3, #50	; 0x32
 800359e:	4b36      	ldr	r3, [pc, #216]	; (8003678 <UART_SetConfig+0x2d4>)
 80035a0:	fba3 2302 	umull	r2, r3, r3, r2
 80035a4:	095b      	lsrs	r3, r3, #5
 80035a6:	005b      	lsls	r3, r3, #1
 80035a8:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80035ac:	441c      	add	r4, r3
 80035ae:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80035b2:	2200      	movs	r2, #0
 80035b4:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80035b8:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 80035bc:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 80035c0:	4642      	mov	r2, r8
 80035c2:	464b      	mov	r3, r9
 80035c4:	1891      	adds	r1, r2, r2
 80035c6:	63b9      	str	r1, [r7, #56]	; 0x38
 80035c8:	415b      	adcs	r3, r3
 80035ca:	63fb      	str	r3, [r7, #60]	; 0x3c
 80035cc:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80035d0:	4641      	mov	r1, r8
 80035d2:	1851      	adds	r1, r2, r1
 80035d4:	6339      	str	r1, [r7, #48]	; 0x30
 80035d6:	4649      	mov	r1, r9
 80035d8:	414b      	adcs	r3, r1
 80035da:	637b      	str	r3, [r7, #52]	; 0x34
 80035dc:	f04f 0200 	mov.w	r2, #0
 80035e0:	f04f 0300 	mov.w	r3, #0
 80035e4:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 80035e8:	4659      	mov	r1, fp
 80035ea:	00cb      	lsls	r3, r1, #3
 80035ec:	4651      	mov	r1, sl
 80035ee:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80035f2:	4651      	mov	r1, sl
 80035f4:	00ca      	lsls	r2, r1, #3
 80035f6:	4610      	mov	r0, r2
 80035f8:	4619      	mov	r1, r3
 80035fa:	4603      	mov	r3, r0
 80035fc:	4642      	mov	r2, r8
 80035fe:	189b      	adds	r3, r3, r2
 8003600:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8003604:	464b      	mov	r3, r9
 8003606:	460a      	mov	r2, r1
 8003608:	eb42 0303 	adc.w	r3, r2, r3
 800360c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003610:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003614:	685b      	ldr	r3, [r3, #4]
 8003616:	2200      	movs	r2, #0
 8003618:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800361c:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8003620:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8003624:	460b      	mov	r3, r1
 8003626:	18db      	adds	r3, r3, r3
 8003628:	62bb      	str	r3, [r7, #40]	; 0x28
 800362a:	4613      	mov	r3, r2
 800362c:	eb42 0303 	adc.w	r3, r2, r3
 8003630:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003632:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003636:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 800363a:	f7fc fe41 	bl	80002c0 <__aeabi_uldivmod>
 800363e:	4602      	mov	r2, r0
 8003640:	460b      	mov	r3, r1
 8003642:	4b0d      	ldr	r3, [pc, #52]	; (8003678 <UART_SetConfig+0x2d4>)
 8003644:	fba3 1302 	umull	r1, r3, r3, r2
 8003648:	095b      	lsrs	r3, r3, #5
 800364a:	2164      	movs	r1, #100	; 0x64
 800364c:	fb01 f303 	mul.w	r3, r1, r3
 8003650:	1ad3      	subs	r3, r2, r3
 8003652:	00db      	lsls	r3, r3, #3
 8003654:	3332      	adds	r3, #50	; 0x32
 8003656:	4a08      	ldr	r2, [pc, #32]	; (8003678 <UART_SetConfig+0x2d4>)
 8003658:	fba2 2303 	umull	r2, r3, r2, r3
 800365c:	095b      	lsrs	r3, r3, #5
 800365e:	f003 0207 	and.w	r2, r3, #7
 8003662:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	4422      	add	r2, r4
 800366a:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800366c:	e105      	b.n	800387a <UART_SetConfig+0x4d6>
 800366e:	bf00      	nop
 8003670:	40011000 	.word	0x40011000
 8003674:	40011400 	.word	0x40011400
 8003678:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800367c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003680:	2200      	movs	r2, #0
 8003682:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8003686:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800368a:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 800368e:	4642      	mov	r2, r8
 8003690:	464b      	mov	r3, r9
 8003692:	1891      	adds	r1, r2, r2
 8003694:	6239      	str	r1, [r7, #32]
 8003696:	415b      	adcs	r3, r3
 8003698:	627b      	str	r3, [r7, #36]	; 0x24
 800369a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800369e:	4641      	mov	r1, r8
 80036a0:	1854      	adds	r4, r2, r1
 80036a2:	4649      	mov	r1, r9
 80036a4:	eb43 0501 	adc.w	r5, r3, r1
 80036a8:	f04f 0200 	mov.w	r2, #0
 80036ac:	f04f 0300 	mov.w	r3, #0
 80036b0:	00eb      	lsls	r3, r5, #3
 80036b2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80036b6:	00e2      	lsls	r2, r4, #3
 80036b8:	4614      	mov	r4, r2
 80036ba:	461d      	mov	r5, r3
 80036bc:	4643      	mov	r3, r8
 80036be:	18e3      	adds	r3, r4, r3
 80036c0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80036c4:	464b      	mov	r3, r9
 80036c6:	eb45 0303 	adc.w	r3, r5, r3
 80036ca:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80036ce:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80036d2:	685b      	ldr	r3, [r3, #4]
 80036d4:	2200      	movs	r2, #0
 80036d6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80036da:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80036de:	f04f 0200 	mov.w	r2, #0
 80036e2:	f04f 0300 	mov.w	r3, #0
 80036e6:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 80036ea:	4629      	mov	r1, r5
 80036ec:	008b      	lsls	r3, r1, #2
 80036ee:	4621      	mov	r1, r4
 80036f0:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80036f4:	4621      	mov	r1, r4
 80036f6:	008a      	lsls	r2, r1, #2
 80036f8:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 80036fc:	f7fc fde0 	bl	80002c0 <__aeabi_uldivmod>
 8003700:	4602      	mov	r2, r0
 8003702:	460b      	mov	r3, r1
 8003704:	4b60      	ldr	r3, [pc, #384]	; (8003888 <UART_SetConfig+0x4e4>)
 8003706:	fba3 2302 	umull	r2, r3, r3, r2
 800370a:	095b      	lsrs	r3, r3, #5
 800370c:	011c      	lsls	r4, r3, #4
 800370e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003712:	2200      	movs	r2, #0
 8003714:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8003718:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 800371c:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8003720:	4642      	mov	r2, r8
 8003722:	464b      	mov	r3, r9
 8003724:	1891      	adds	r1, r2, r2
 8003726:	61b9      	str	r1, [r7, #24]
 8003728:	415b      	adcs	r3, r3
 800372a:	61fb      	str	r3, [r7, #28]
 800372c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003730:	4641      	mov	r1, r8
 8003732:	1851      	adds	r1, r2, r1
 8003734:	6139      	str	r1, [r7, #16]
 8003736:	4649      	mov	r1, r9
 8003738:	414b      	adcs	r3, r1
 800373a:	617b      	str	r3, [r7, #20]
 800373c:	f04f 0200 	mov.w	r2, #0
 8003740:	f04f 0300 	mov.w	r3, #0
 8003744:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003748:	4659      	mov	r1, fp
 800374a:	00cb      	lsls	r3, r1, #3
 800374c:	4651      	mov	r1, sl
 800374e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003752:	4651      	mov	r1, sl
 8003754:	00ca      	lsls	r2, r1, #3
 8003756:	4610      	mov	r0, r2
 8003758:	4619      	mov	r1, r3
 800375a:	4603      	mov	r3, r0
 800375c:	4642      	mov	r2, r8
 800375e:	189b      	adds	r3, r3, r2
 8003760:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8003764:	464b      	mov	r3, r9
 8003766:	460a      	mov	r2, r1
 8003768:	eb42 0303 	adc.w	r3, r2, r3
 800376c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8003770:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003774:	685b      	ldr	r3, [r3, #4]
 8003776:	2200      	movs	r2, #0
 8003778:	67bb      	str	r3, [r7, #120]	; 0x78
 800377a:	67fa      	str	r2, [r7, #124]	; 0x7c
 800377c:	f04f 0200 	mov.w	r2, #0
 8003780:	f04f 0300 	mov.w	r3, #0
 8003784:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8003788:	4649      	mov	r1, r9
 800378a:	008b      	lsls	r3, r1, #2
 800378c:	4641      	mov	r1, r8
 800378e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003792:	4641      	mov	r1, r8
 8003794:	008a      	lsls	r2, r1, #2
 8003796:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800379a:	f7fc fd91 	bl	80002c0 <__aeabi_uldivmod>
 800379e:	4602      	mov	r2, r0
 80037a0:	460b      	mov	r3, r1
 80037a2:	4b39      	ldr	r3, [pc, #228]	; (8003888 <UART_SetConfig+0x4e4>)
 80037a4:	fba3 1302 	umull	r1, r3, r3, r2
 80037a8:	095b      	lsrs	r3, r3, #5
 80037aa:	2164      	movs	r1, #100	; 0x64
 80037ac:	fb01 f303 	mul.w	r3, r1, r3
 80037b0:	1ad3      	subs	r3, r2, r3
 80037b2:	011b      	lsls	r3, r3, #4
 80037b4:	3332      	adds	r3, #50	; 0x32
 80037b6:	4a34      	ldr	r2, [pc, #208]	; (8003888 <UART_SetConfig+0x4e4>)
 80037b8:	fba2 2303 	umull	r2, r3, r2, r3
 80037bc:	095b      	lsrs	r3, r3, #5
 80037be:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80037c2:	441c      	add	r4, r3
 80037c4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80037c8:	2200      	movs	r2, #0
 80037ca:	673b      	str	r3, [r7, #112]	; 0x70
 80037cc:	677a      	str	r2, [r7, #116]	; 0x74
 80037ce:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 80037d2:	4642      	mov	r2, r8
 80037d4:	464b      	mov	r3, r9
 80037d6:	1891      	adds	r1, r2, r2
 80037d8:	60b9      	str	r1, [r7, #8]
 80037da:	415b      	adcs	r3, r3
 80037dc:	60fb      	str	r3, [r7, #12]
 80037de:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80037e2:	4641      	mov	r1, r8
 80037e4:	1851      	adds	r1, r2, r1
 80037e6:	6039      	str	r1, [r7, #0]
 80037e8:	4649      	mov	r1, r9
 80037ea:	414b      	adcs	r3, r1
 80037ec:	607b      	str	r3, [r7, #4]
 80037ee:	f04f 0200 	mov.w	r2, #0
 80037f2:	f04f 0300 	mov.w	r3, #0
 80037f6:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80037fa:	4659      	mov	r1, fp
 80037fc:	00cb      	lsls	r3, r1, #3
 80037fe:	4651      	mov	r1, sl
 8003800:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003804:	4651      	mov	r1, sl
 8003806:	00ca      	lsls	r2, r1, #3
 8003808:	4610      	mov	r0, r2
 800380a:	4619      	mov	r1, r3
 800380c:	4603      	mov	r3, r0
 800380e:	4642      	mov	r2, r8
 8003810:	189b      	adds	r3, r3, r2
 8003812:	66bb      	str	r3, [r7, #104]	; 0x68
 8003814:	464b      	mov	r3, r9
 8003816:	460a      	mov	r2, r1
 8003818:	eb42 0303 	adc.w	r3, r2, r3
 800381c:	66fb      	str	r3, [r7, #108]	; 0x6c
 800381e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003822:	685b      	ldr	r3, [r3, #4]
 8003824:	2200      	movs	r2, #0
 8003826:	663b      	str	r3, [r7, #96]	; 0x60
 8003828:	667a      	str	r2, [r7, #100]	; 0x64
 800382a:	f04f 0200 	mov.w	r2, #0
 800382e:	f04f 0300 	mov.w	r3, #0
 8003832:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8003836:	4649      	mov	r1, r9
 8003838:	008b      	lsls	r3, r1, #2
 800383a:	4641      	mov	r1, r8
 800383c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003840:	4641      	mov	r1, r8
 8003842:	008a      	lsls	r2, r1, #2
 8003844:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8003848:	f7fc fd3a 	bl	80002c0 <__aeabi_uldivmod>
 800384c:	4602      	mov	r2, r0
 800384e:	460b      	mov	r3, r1
 8003850:	4b0d      	ldr	r3, [pc, #52]	; (8003888 <UART_SetConfig+0x4e4>)
 8003852:	fba3 1302 	umull	r1, r3, r3, r2
 8003856:	095b      	lsrs	r3, r3, #5
 8003858:	2164      	movs	r1, #100	; 0x64
 800385a:	fb01 f303 	mul.w	r3, r1, r3
 800385e:	1ad3      	subs	r3, r2, r3
 8003860:	011b      	lsls	r3, r3, #4
 8003862:	3332      	adds	r3, #50	; 0x32
 8003864:	4a08      	ldr	r2, [pc, #32]	; (8003888 <UART_SetConfig+0x4e4>)
 8003866:	fba2 2303 	umull	r2, r3, r2, r3
 800386a:	095b      	lsrs	r3, r3, #5
 800386c:	f003 020f 	and.w	r2, r3, #15
 8003870:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	4422      	add	r2, r4
 8003878:	609a      	str	r2, [r3, #8]
}
 800387a:	bf00      	nop
 800387c:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8003880:	46bd      	mov	sp, r7
 8003882:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003886:	bf00      	nop
 8003888:	51eb851f 	.word	0x51eb851f

0800388c <atoi>:
 800388c:	220a      	movs	r2, #10
 800388e:	2100      	movs	r1, #0
 8003890:	f000 b9ea 	b.w	8003c68 <strtol>

08003894 <__errno>:
 8003894:	4b01      	ldr	r3, [pc, #4]	; (800389c <__errno+0x8>)
 8003896:	6818      	ldr	r0, [r3, #0]
 8003898:	4770      	bx	lr
 800389a:	bf00      	nop
 800389c:	20000030 	.word	0x20000030

080038a0 <__libc_init_array>:
 80038a0:	b570      	push	{r4, r5, r6, lr}
 80038a2:	4d0d      	ldr	r5, [pc, #52]	; (80038d8 <__libc_init_array+0x38>)
 80038a4:	4c0d      	ldr	r4, [pc, #52]	; (80038dc <__libc_init_array+0x3c>)
 80038a6:	1b64      	subs	r4, r4, r5
 80038a8:	10a4      	asrs	r4, r4, #2
 80038aa:	2600      	movs	r6, #0
 80038ac:	42a6      	cmp	r6, r4
 80038ae:	d109      	bne.n	80038c4 <__libc_init_array+0x24>
 80038b0:	4d0b      	ldr	r5, [pc, #44]	; (80038e0 <__libc_init_array+0x40>)
 80038b2:	4c0c      	ldr	r4, [pc, #48]	; (80038e4 <__libc_init_array+0x44>)
 80038b4:	f000 fd32 	bl	800431c <_init>
 80038b8:	1b64      	subs	r4, r4, r5
 80038ba:	10a4      	asrs	r4, r4, #2
 80038bc:	2600      	movs	r6, #0
 80038be:	42a6      	cmp	r6, r4
 80038c0:	d105      	bne.n	80038ce <__libc_init_array+0x2e>
 80038c2:	bd70      	pop	{r4, r5, r6, pc}
 80038c4:	f855 3b04 	ldr.w	r3, [r5], #4
 80038c8:	4798      	blx	r3
 80038ca:	3601      	adds	r6, #1
 80038cc:	e7ee      	b.n	80038ac <__libc_init_array+0xc>
 80038ce:	f855 3b04 	ldr.w	r3, [r5], #4
 80038d2:	4798      	blx	r3
 80038d4:	3601      	adds	r6, #1
 80038d6:	e7f2      	b.n	80038be <__libc_init_array+0x1e>
 80038d8:	08004518 	.word	0x08004518
 80038dc:	08004518 	.word	0x08004518
 80038e0:	08004518 	.word	0x08004518
 80038e4:	0800451c 	.word	0x0800451c

080038e8 <malloc>:
 80038e8:	4b02      	ldr	r3, [pc, #8]	; (80038f4 <malloc+0xc>)
 80038ea:	4601      	mov	r1, r0
 80038ec:	6818      	ldr	r0, [r3, #0]
 80038ee:	f000 b885 	b.w	80039fc <_malloc_r>
 80038f2:	bf00      	nop
 80038f4:	20000030 	.word	0x20000030

080038f8 <memcpy>:
 80038f8:	440a      	add	r2, r1
 80038fa:	4291      	cmp	r1, r2
 80038fc:	f100 33ff 	add.w	r3, r0, #4294967295
 8003900:	d100      	bne.n	8003904 <memcpy+0xc>
 8003902:	4770      	bx	lr
 8003904:	b510      	push	{r4, lr}
 8003906:	f811 4b01 	ldrb.w	r4, [r1], #1
 800390a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800390e:	4291      	cmp	r1, r2
 8003910:	d1f9      	bne.n	8003906 <memcpy+0xe>
 8003912:	bd10      	pop	{r4, pc}

08003914 <memset>:
 8003914:	4402      	add	r2, r0
 8003916:	4603      	mov	r3, r0
 8003918:	4293      	cmp	r3, r2
 800391a:	d100      	bne.n	800391e <memset+0xa>
 800391c:	4770      	bx	lr
 800391e:	f803 1b01 	strb.w	r1, [r3], #1
 8003922:	e7f9      	b.n	8003918 <memset+0x4>

08003924 <_free_r>:
 8003924:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8003926:	2900      	cmp	r1, #0
 8003928:	d044      	beq.n	80039b4 <_free_r+0x90>
 800392a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800392e:	9001      	str	r0, [sp, #4]
 8003930:	2b00      	cmp	r3, #0
 8003932:	f1a1 0404 	sub.w	r4, r1, #4
 8003936:	bfb8      	it	lt
 8003938:	18e4      	addlt	r4, r4, r3
 800393a:	f000 f99f 	bl	8003c7c <__malloc_lock>
 800393e:	4a1e      	ldr	r2, [pc, #120]	; (80039b8 <_free_r+0x94>)
 8003940:	9801      	ldr	r0, [sp, #4]
 8003942:	6813      	ldr	r3, [r2, #0]
 8003944:	b933      	cbnz	r3, 8003954 <_free_r+0x30>
 8003946:	6063      	str	r3, [r4, #4]
 8003948:	6014      	str	r4, [r2, #0]
 800394a:	b003      	add	sp, #12
 800394c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8003950:	f000 b99a 	b.w	8003c88 <__malloc_unlock>
 8003954:	42a3      	cmp	r3, r4
 8003956:	d908      	bls.n	800396a <_free_r+0x46>
 8003958:	6825      	ldr	r5, [r4, #0]
 800395a:	1961      	adds	r1, r4, r5
 800395c:	428b      	cmp	r3, r1
 800395e:	bf01      	itttt	eq
 8003960:	6819      	ldreq	r1, [r3, #0]
 8003962:	685b      	ldreq	r3, [r3, #4]
 8003964:	1949      	addeq	r1, r1, r5
 8003966:	6021      	streq	r1, [r4, #0]
 8003968:	e7ed      	b.n	8003946 <_free_r+0x22>
 800396a:	461a      	mov	r2, r3
 800396c:	685b      	ldr	r3, [r3, #4]
 800396e:	b10b      	cbz	r3, 8003974 <_free_r+0x50>
 8003970:	42a3      	cmp	r3, r4
 8003972:	d9fa      	bls.n	800396a <_free_r+0x46>
 8003974:	6811      	ldr	r1, [r2, #0]
 8003976:	1855      	adds	r5, r2, r1
 8003978:	42a5      	cmp	r5, r4
 800397a:	d10b      	bne.n	8003994 <_free_r+0x70>
 800397c:	6824      	ldr	r4, [r4, #0]
 800397e:	4421      	add	r1, r4
 8003980:	1854      	adds	r4, r2, r1
 8003982:	42a3      	cmp	r3, r4
 8003984:	6011      	str	r1, [r2, #0]
 8003986:	d1e0      	bne.n	800394a <_free_r+0x26>
 8003988:	681c      	ldr	r4, [r3, #0]
 800398a:	685b      	ldr	r3, [r3, #4]
 800398c:	6053      	str	r3, [r2, #4]
 800398e:	4421      	add	r1, r4
 8003990:	6011      	str	r1, [r2, #0]
 8003992:	e7da      	b.n	800394a <_free_r+0x26>
 8003994:	d902      	bls.n	800399c <_free_r+0x78>
 8003996:	230c      	movs	r3, #12
 8003998:	6003      	str	r3, [r0, #0]
 800399a:	e7d6      	b.n	800394a <_free_r+0x26>
 800399c:	6825      	ldr	r5, [r4, #0]
 800399e:	1961      	adds	r1, r4, r5
 80039a0:	428b      	cmp	r3, r1
 80039a2:	bf04      	itt	eq
 80039a4:	6819      	ldreq	r1, [r3, #0]
 80039a6:	685b      	ldreq	r3, [r3, #4]
 80039a8:	6063      	str	r3, [r4, #4]
 80039aa:	bf04      	itt	eq
 80039ac:	1949      	addeq	r1, r1, r5
 80039ae:	6021      	streq	r1, [r4, #0]
 80039b0:	6054      	str	r4, [r2, #4]
 80039b2:	e7ca      	b.n	800394a <_free_r+0x26>
 80039b4:	b003      	add	sp, #12
 80039b6:	bd30      	pop	{r4, r5, pc}
 80039b8:	2000033c 	.word	0x2000033c

080039bc <sbrk_aligned>:
 80039bc:	b570      	push	{r4, r5, r6, lr}
 80039be:	4e0e      	ldr	r6, [pc, #56]	; (80039f8 <sbrk_aligned+0x3c>)
 80039c0:	460c      	mov	r4, r1
 80039c2:	6831      	ldr	r1, [r6, #0]
 80039c4:	4605      	mov	r5, r0
 80039c6:	b911      	cbnz	r1, 80039ce <sbrk_aligned+0x12>
 80039c8:	f000 f88c 	bl	8003ae4 <_sbrk_r>
 80039cc:	6030      	str	r0, [r6, #0]
 80039ce:	4621      	mov	r1, r4
 80039d0:	4628      	mov	r0, r5
 80039d2:	f000 f887 	bl	8003ae4 <_sbrk_r>
 80039d6:	1c43      	adds	r3, r0, #1
 80039d8:	d00a      	beq.n	80039f0 <sbrk_aligned+0x34>
 80039da:	1cc4      	adds	r4, r0, #3
 80039dc:	f024 0403 	bic.w	r4, r4, #3
 80039e0:	42a0      	cmp	r0, r4
 80039e2:	d007      	beq.n	80039f4 <sbrk_aligned+0x38>
 80039e4:	1a21      	subs	r1, r4, r0
 80039e6:	4628      	mov	r0, r5
 80039e8:	f000 f87c 	bl	8003ae4 <_sbrk_r>
 80039ec:	3001      	adds	r0, #1
 80039ee:	d101      	bne.n	80039f4 <sbrk_aligned+0x38>
 80039f0:	f04f 34ff 	mov.w	r4, #4294967295
 80039f4:	4620      	mov	r0, r4
 80039f6:	bd70      	pop	{r4, r5, r6, pc}
 80039f8:	20000340 	.word	0x20000340

080039fc <_malloc_r>:
 80039fc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003a00:	1ccd      	adds	r5, r1, #3
 8003a02:	f025 0503 	bic.w	r5, r5, #3
 8003a06:	3508      	adds	r5, #8
 8003a08:	2d0c      	cmp	r5, #12
 8003a0a:	bf38      	it	cc
 8003a0c:	250c      	movcc	r5, #12
 8003a0e:	2d00      	cmp	r5, #0
 8003a10:	4607      	mov	r7, r0
 8003a12:	db01      	blt.n	8003a18 <_malloc_r+0x1c>
 8003a14:	42a9      	cmp	r1, r5
 8003a16:	d905      	bls.n	8003a24 <_malloc_r+0x28>
 8003a18:	230c      	movs	r3, #12
 8003a1a:	603b      	str	r3, [r7, #0]
 8003a1c:	2600      	movs	r6, #0
 8003a1e:	4630      	mov	r0, r6
 8003a20:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003a24:	4e2e      	ldr	r6, [pc, #184]	; (8003ae0 <_malloc_r+0xe4>)
 8003a26:	f000 f929 	bl	8003c7c <__malloc_lock>
 8003a2a:	6833      	ldr	r3, [r6, #0]
 8003a2c:	461c      	mov	r4, r3
 8003a2e:	bb34      	cbnz	r4, 8003a7e <_malloc_r+0x82>
 8003a30:	4629      	mov	r1, r5
 8003a32:	4638      	mov	r0, r7
 8003a34:	f7ff ffc2 	bl	80039bc <sbrk_aligned>
 8003a38:	1c43      	adds	r3, r0, #1
 8003a3a:	4604      	mov	r4, r0
 8003a3c:	d14d      	bne.n	8003ada <_malloc_r+0xde>
 8003a3e:	6834      	ldr	r4, [r6, #0]
 8003a40:	4626      	mov	r6, r4
 8003a42:	2e00      	cmp	r6, #0
 8003a44:	d140      	bne.n	8003ac8 <_malloc_r+0xcc>
 8003a46:	6823      	ldr	r3, [r4, #0]
 8003a48:	4631      	mov	r1, r6
 8003a4a:	4638      	mov	r0, r7
 8003a4c:	eb04 0803 	add.w	r8, r4, r3
 8003a50:	f000 f848 	bl	8003ae4 <_sbrk_r>
 8003a54:	4580      	cmp	r8, r0
 8003a56:	d13a      	bne.n	8003ace <_malloc_r+0xd2>
 8003a58:	6821      	ldr	r1, [r4, #0]
 8003a5a:	3503      	adds	r5, #3
 8003a5c:	1a6d      	subs	r5, r5, r1
 8003a5e:	f025 0503 	bic.w	r5, r5, #3
 8003a62:	3508      	adds	r5, #8
 8003a64:	2d0c      	cmp	r5, #12
 8003a66:	bf38      	it	cc
 8003a68:	250c      	movcc	r5, #12
 8003a6a:	4629      	mov	r1, r5
 8003a6c:	4638      	mov	r0, r7
 8003a6e:	f7ff ffa5 	bl	80039bc <sbrk_aligned>
 8003a72:	3001      	adds	r0, #1
 8003a74:	d02b      	beq.n	8003ace <_malloc_r+0xd2>
 8003a76:	6823      	ldr	r3, [r4, #0]
 8003a78:	442b      	add	r3, r5
 8003a7a:	6023      	str	r3, [r4, #0]
 8003a7c:	e00e      	b.n	8003a9c <_malloc_r+0xa0>
 8003a7e:	6822      	ldr	r2, [r4, #0]
 8003a80:	1b52      	subs	r2, r2, r5
 8003a82:	d41e      	bmi.n	8003ac2 <_malloc_r+0xc6>
 8003a84:	2a0b      	cmp	r2, #11
 8003a86:	d916      	bls.n	8003ab6 <_malloc_r+0xba>
 8003a88:	1961      	adds	r1, r4, r5
 8003a8a:	42a3      	cmp	r3, r4
 8003a8c:	6025      	str	r5, [r4, #0]
 8003a8e:	bf18      	it	ne
 8003a90:	6059      	strne	r1, [r3, #4]
 8003a92:	6863      	ldr	r3, [r4, #4]
 8003a94:	bf08      	it	eq
 8003a96:	6031      	streq	r1, [r6, #0]
 8003a98:	5162      	str	r2, [r4, r5]
 8003a9a:	604b      	str	r3, [r1, #4]
 8003a9c:	4638      	mov	r0, r7
 8003a9e:	f104 060b 	add.w	r6, r4, #11
 8003aa2:	f000 f8f1 	bl	8003c88 <__malloc_unlock>
 8003aa6:	f026 0607 	bic.w	r6, r6, #7
 8003aaa:	1d23      	adds	r3, r4, #4
 8003aac:	1af2      	subs	r2, r6, r3
 8003aae:	d0b6      	beq.n	8003a1e <_malloc_r+0x22>
 8003ab0:	1b9b      	subs	r3, r3, r6
 8003ab2:	50a3      	str	r3, [r4, r2]
 8003ab4:	e7b3      	b.n	8003a1e <_malloc_r+0x22>
 8003ab6:	6862      	ldr	r2, [r4, #4]
 8003ab8:	42a3      	cmp	r3, r4
 8003aba:	bf0c      	ite	eq
 8003abc:	6032      	streq	r2, [r6, #0]
 8003abe:	605a      	strne	r2, [r3, #4]
 8003ac0:	e7ec      	b.n	8003a9c <_malloc_r+0xa0>
 8003ac2:	4623      	mov	r3, r4
 8003ac4:	6864      	ldr	r4, [r4, #4]
 8003ac6:	e7b2      	b.n	8003a2e <_malloc_r+0x32>
 8003ac8:	4634      	mov	r4, r6
 8003aca:	6876      	ldr	r6, [r6, #4]
 8003acc:	e7b9      	b.n	8003a42 <_malloc_r+0x46>
 8003ace:	230c      	movs	r3, #12
 8003ad0:	603b      	str	r3, [r7, #0]
 8003ad2:	4638      	mov	r0, r7
 8003ad4:	f000 f8d8 	bl	8003c88 <__malloc_unlock>
 8003ad8:	e7a1      	b.n	8003a1e <_malloc_r+0x22>
 8003ada:	6025      	str	r5, [r4, #0]
 8003adc:	e7de      	b.n	8003a9c <_malloc_r+0xa0>
 8003ade:	bf00      	nop
 8003ae0:	2000033c 	.word	0x2000033c

08003ae4 <_sbrk_r>:
 8003ae4:	b538      	push	{r3, r4, r5, lr}
 8003ae6:	4d06      	ldr	r5, [pc, #24]	; (8003b00 <_sbrk_r+0x1c>)
 8003ae8:	2300      	movs	r3, #0
 8003aea:	4604      	mov	r4, r0
 8003aec:	4608      	mov	r0, r1
 8003aee:	602b      	str	r3, [r5, #0]
 8003af0:	f7fd f8b6 	bl	8000c60 <_sbrk>
 8003af4:	1c43      	adds	r3, r0, #1
 8003af6:	d102      	bne.n	8003afe <_sbrk_r+0x1a>
 8003af8:	682b      	ldr	r3, [r5, #0]
 8003afa:	b103      	cbz	r3, 8003afe <_sbrk_r+0x1a>
 8003afc:	6023      	str	r3, [r4, #0]
 8003afe:	bd38      	pop	{r3, r4, r5, pc}
 8003b00:	20000344 	.word	0x20000344

08003b04 <siprintf>:
 8003b04:	b40e      	push	{r1, r2, r3}
 8003b06:	b500      	push	{lr}
 8003b08:	b09c      	sub	sp, #112	; 0x70
 8003b0a:	ab1d      	add	r3, sp, #116	; 0x74
 8003b0c:	9002      	str	r0, [sp, #8]
 8003b0e:	9006      	str	r0, [sp, #24]
 8003b10:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8003b14:	4809      	ldr	r0, [pc, #36]	; (8003b3c <siprintf+0x38>)
 8003b16:	9107      	str	r1, [sp, #28]
 8003b18:	9104      	str	r1, [sp, #16]
 8003b1a:	4909      	ldr	r1, [pc, #36]	; (8003b40 <siprintf+0x3c>)
 8003b1c:	f853 2b04 	ldr.w	r2, [r3], #4
 8003b20:	9105      	str	r1, [sp, #20]
 8003b22:	6800      	ldr	r0, [r0, #0]
 8003b24:	9301      	str	r3, [sp, #4]
 8003b26:	a902      	add	r1, sp, #8
 8003b28:	f000 f910 	bl	8003d4c <_svfiprintf_r>
 8003b2c:	9b02      	ldr	r3, [sp, #8]
 8003b2e:	2200      	movs	r2, #0
 8003b30:	701a      	strb	r2, [r3, #0]
 8003b32:	b01c      	add	sp, #112	; 0x70
 8003b34:	f85d eb04 	ldr.w	lr, [sp], #4
 8003b38:	b003      	add	sp, #12
 8003b3a:	4770      	bx	lr
 8003b3c:	20000030 	.word	0x20000030
 8003b40:	ffff0208 	.word	0xffff0208

08003b44 <strcat>:
 8003b44:	b510      	push	{r4, lr}
 8003b46:	4602      	mov	r2, r0
 8003b48:	7814      	ldrb	r4, [r2, #0]
 8003b4a:	4613      	mov	r3, r2
 8003b4c:	3201      	adds	r2, #1
 8003b4e:	2c00      	cmp	r4, #0
 8003b50:	d1fa      	bne.n	8003b48 <strcat+0x4>
 8003b52:	3b01      	subs	r3, #1
 8003b54:	f811 2b01 	ldrb.w	r2, [r1], #1
 8003b58:	f803 2f01 	strb.w	r2, [r3, #1]!
 8003b5c:	2a00      	cmp	r2, #0
 8003b5e:	d1f9      	bne.n	8003b54 <strcat+0x10>
 8003b60:	bd10      	pop	{r4, pc}
	...

08003b64 <_strtol_l.constprop.0>:
 8003b64:	2b01      	cmp	r3, #1
 8003b66:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003b6a:	d001      	beq.n	8003b70 <_strtol_l.constprop.0+0xc>
 8003b6c:	2b24      	cmp	r3, #36	; 0x24
 8003b6e:	d906      	bls.n	8003b7e <_strtol_l.constprop.0+0x1a>
 8003b70:	f7ff fe90 	bl	8003894 <__errno>
 8003b74:	2316      	movs	r3, #22
 8003b76:	6003      	str	r3, [r0, #0]
 8003b78:	2000      	movs	r0, #0
 8003b7a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003b7e:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 8003c64 <_strtol_l.constprop.0+0x100>
 8003b82:	460d      	mov	r5, r1
 8003b84:	462e      	mov	r6, r5
 8003b86:	f815 4b01 	ldrb.w	r4, [r5], #1
 8003b8a:	f814 700c 	ldrb.w	r7, [r4, ip]
 8003b8e:	f017 0708 	ands.w	r7, r7, #8
 8003b92:	d1f7      	bne.n	8003b84 <_strtol_l.constprop.0+0x20>
 8003b94:	2c2d      	cmp	r4, #45	; 0x2d
 8003b96:	d132      	bne.n	8003bfe <_strtol_l.constprop.0+0x9a>
 8003b98:	782c      	ldrb	r4, [r5, #0]
 8003b9a:	2701      	movs	r7, #1
 8003b9c:	1cb5      	adds	r5, r6, #2
 8003b9e:	2b00      	cmp	r3, #0
 8003ba0:	d05b      	beq.n	8003c5a <_strtol_l.constprop.0+0xf6>
 8003ba2:	2b10      	cmp	r3, #16
 8003ba4:	d109      	bne.n	8003bba <_strtol_l.constprop.0+0x56>
 8003ba6:	2c30      	cmp	r4, #48	; 0x30
 8003ba8:	d107      	bne.n	8003bba <_strtol_l.constprop.0+0x56>
 8003baa:	782c      	ldrb	r4, [r5, #0]
 8003bac:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 8003bb0:	2c58      	cmp	r4, #88	; 0x58
 8003bb2:	d14d      	bne.n	8003c50 <_strtol_l.constprop.0+0xec>
 8003bb4:	786c      	ldrb	r4, [r5, #1]
 8003bb6:	2310      	movs	r3, #16
 8003bb8:	3502      	adds	r5, #2
 8003bba:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 8003bbe:	f108 38ff 	add.w	r8, r8, #4294967295
 8003bc2:	f04f 0c00 	mov.w	ip, #0
 8003bc6:	fbb8 f9f3 	udiv	r9, r8, r3
 8003bca:	4666      	mov	r6, ip
 8003bcc:	fb03 8a19 	mls	sl, r3, r9, r8
 8003bd0:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 8003bd4:	f1be 0f09 	cmp.w	lr, #9
 8003bd8:	d816      	bhi.n	8003c08 <_strtol_l.constprop.0+0xa4>
 8003bda:	4674      	mov	r4, lr
 8003bdc:	42a3      	cmp	r3, r4
 8003bde:	dd24      	ble.n	8003c2a <_strtol_l.constprop.0+0xc6>
 8003be0:	f1bc 0f00 	cmp.w	ip, #0
 8003be4:	db1e      	blt.n	8003c24 <_strtol_l.constprop.0+0xc0>
 8003be6:	45b1      	cmp	r9, r6
 8003be8:	d31c      	bcc.n	8003c24 <_strtol_l.constprop.0+0xc0>
 8003bea:	d101      	bne.n	8003bf0 <_strtol_l.constprop.0+0x8c>
 8003bec:	45a2      	cmp	sl, r4
 8003bee:	db19      	blt.n	8003c24 <_strtol_l.constprop.0+0xc0>
 8003bf0:	fb06 4603 	mla	r6, r6, r3, r4
 8003bf4:	f04f 0c01 	mov.w	ip, #1
 8003bf8:	f815 4b01 	ldrb.w	r4, [r5], #1
 8003bfc:	e7e8      	b.n	8003bd0 <_strtol_l.constprop.0+0x6c>
 8003bfe:	2c2b      	cmp	r4, #43	; 0x2b
 8003c00:	bf04      	itt	eq
 8003c02:	782c      	ldrbeq	r4, [r5, #0]
 8003c04:	1cb5      	addeq	r5, r6, #2
 8003c06:	e7ca      	b.n	8003b9e <_strtol_l.constprop.0+0x3a>
 8003c08:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 8003c0c:	f1be 0f19 	cmp.w	lr, #25
 8003c10:	d801      	bhi.n	8003c16 <_strtol_l.constprop.0+0xb2>
 8003c12:	3c37      	subs	r4, #55	; 0x37
 8003c14:	e7e2      	b.n	8003bdc <_strtol_l.constprop.0+0x78>
 8003c16:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 8003c1a:	f1be 0f19 	cmp.w	lr, #25
 8003c1e:	d804      	bhi.n	8003c2a <_strtol_l.constprop.0+0xc6>
 8003c20:	3c57      	subs	r4, #87	; 0x57
 8003c22:	e7db      	b.n	8003bdc <_strtol_l.constprop.0+0x78>
 8003c24:	f04f 3cff 	mov.w	ip, #4294967295
 8003c28:	e7e6      	b.n	8003bf8 <_strtol_l.constprop.0+0x94>
 8003c2a:	f1bc 0f00 	cmp.w	ip, #0
 8003c2e:	da05      	bge.n	8003c3c <_strtol_l.constprop.0+0xd8>
 8003c30:	2322      	movs	r3, #34	; 0x22
 8003c32:	6003      	str	r3, [r0, #0]
 8003c34:	4646      	mov	r6, r8
 8003c36:	b942      	cbnz	r2, 8003c4a <_strtol_l.constprop.0+0xe6>
 8003c38:	4630      	mov	r0, r6
 8003c3a:	e79e      	b.n	8003b7a <_strtol_l.constprop.0+0x16>
 8003c3c:	b107      	cbz	r7, 8003c40 <_strtol_l.constprop.0+0xdc>
 8003c3e:	4276      	negs	r6, r6
 8003c40:	2a00      	cmp	r2, #0
 8003c42:	d0f9      	beq.n	8003c38 <_strtol_l.constprop.0+0xd4>
 8003c44:	f1bc 0f00 	cmp.w	ip, #0
 8003c48:	d000      	beq.n	8003c4c <_strtol_l.constprop.0+0xe8>
 8003c4a:	1e69      	subs	r1, r5, #1
 8003c4c:	6011      	str	r1, [r2, #0]
 8003c4e:	e7f3      	b.n	8003c38 <_strtol_l.constprop.0+0xd4>
 8003c50:	2430      	movs	r4, #48	; 0x30
 8003c52:	2b00      	cmp	r3, #0
 8003c54:	d1b1      	bne.n	8003bba <_strtol_l.constprop.0+0x56>
 8003c56:	2308      	movs	r3, #8
 8003c58:	e7af      	b.n	8003bba <_strtol_l.constprop.0+0x56>
 8003c5a:	2c30      	cmp	r4, #48	; 0x30
 8003c5c:	d0a5      	beq.n	8003baa <_strtol_l.constprop.0+0x46>
 8003c5e:	230a      	movs	r3, #10
 8003c60:	e7ab      	b.n	8003bba <_strtol_l.constprop.0+0x56>
 8003c62:	bf00      	nop
 8003c64:	080043dd 	.word	0x080043dd

08003c68 <strtol>:
 8003c68:	4613      	mov	r3, r2
 8003c6a:	460a      	mov	r2, r1
 8003c6c:	4601      	mov	r1, r0
 8003c6e:	4802      	ldr	r0, [pc, #8]	; (8003c78 <strtol+0x10>)
 8003c70:	6800      	ldr	r0, [r0, #0]
 8003c72:	f7ff bf77 	b.w	8003b64 <_strtol_l.constprop.0>
 8003c76:	bf00      	nop
 8003c78:	20000030 	.word	0x20000030

08003c7c <__malloc_lock>:
 8003c7c:	4801      	ldr	r0, [pc, #4]	; (8003c84 <__malloc_lock+0x8>)
 8003c7e:	f000 baf9 	b.w	8004274 <__retarget_lock_acquire_recursive>
 8003c82:	bf00      	nop
 8003c84:	20000348 	.word	0x20000348

08003c88 <__malloc_unlock>:
 8003c88:	4801      	ldr	r0, [pc, #4]	; (8003c90 <__malloc_unlock+0x8>)
 8003c8a:	f000 baf4 	b.w	8004276 <__retarget_lock_release_recursive>
 8003c8e:	bf00      	nop
 8003c90:	20000348 	.word	0x20000348

08003c94 <__ssputs_r>:
 8003c94:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003c98:	688e      	ldr	r6, [r1, #8]
 8003c9a:	429e      	cmp	r6, r3
 8003c9c:	4682      	mov	sl, r0
 8003c9e:	460c      	mov	r4, r1
 8003ca0:	4690      	mov	r8, r2
 8003ca2:	461f      	mov	r7, r3
 8003ca4:	d838      	bhi.n	8003d18 <__ssputs_r+0x84>
 8003ca6:	898a      	ldrh	r2, [r1, #12]
 8003ca8:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8003cac:	d032      	beq.n	8003d14 <__ssputs_r+0x80>
 8003cae:	6825      	ldr	r5, [r4, #0]
 8003cb0:	6909      	ldr	r1, [r1, #16]
 8003cb2:	eba5 0901 	sub.w	r9, r5, r1
 8003cb6:	6965      	ldr	r5, [r4, #20]
 8003cb8:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8003cbc:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8003cc0:	3301      	adds	r3, #1
 8003cc2:	444b      	add	r3, r9
 8003cc4:	106d      	asrs	r5, r5, #1
 8003cc6:	429d      	cmp	r5, r3
 8003cc8:	bf38      	it	cc
 8003cca:	461d      	movcc	r5, r3
 8003ccc:	0553      	lsls	r3, r2, #21
 8003cce:	d531      	bpl.n	8003d34 <__ssputs_r+0xa0>
 8003cd0:	4629      	mov	r1, r5
 8003cd2:	f7ff fe93 	bl	80039fc <_malloc_r>
 8003cd6:	4606      	mov	r6, r0
 8003cd8:	b950      	cbnz	r0, 8003cf0 <__ssputs_r+0x5c>
 8003cda:	230c      	movs	r3, #12
 8003cdc:	f8ca 3000 	str.w	r3, [sl]
 8003ce0:	89a3      	ldrh	r3, [r4, #12]
 8003ce2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003ce6:	81a3      	strh	r3, [r4, #12]
 8003ce8:	f04f 30ff 	mov.w	r0, #4294967295
 8003cec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003cf0:	6921      	ldr	r1, [r4, #16]
 8003cf2:	464a      	mov	r2, r9
 8003cf4:	f7ff fe00 	bl	80038f8 <memcpy>
 8003cf8:	89a3      	ldrh	r3, [r4, #12]
 8003cfa:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8003cfe:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003d02:	81a3      	strh	r3, [r4, #12]
 8003d04:	6126      	str	r6, [r4, #16]
 8003d06:	6165      	str	r5, [r4, #20]
 8003d08:	444e      	add	r6, r9
 8003d0a:	eba5 0509 	sub.w	r5, r5, r9
 8003d0e:	6026      	str	r6, [r4, #0]
 8003d10:	60a5      	str	r5, [r4, #8]
 8003d12:	463e      	mov	r6, r7
 8003d14:	42be      	cmp	r6, r7
 8003d16:	d900      	bls.n	8003d1a <__ssputs_r+0x86>
 8003d18:	463e      	mov	r6, r7
 8003d1a:	6820      	ldr	r0, [r4, #0]
 8003d1c:	4632      	mov	r2, r6
 8003d1e:	4641      	mov	r1, r8
 8003d20:	f000 faaa 	bl	8004278 <memmove>
 8003d24:	68a3      	ldr	r3, [r4, #8]
 8003d26:	1b9b      	subs	r3, r3, r6
 8003d28:	60a3      	str	r3, [r4, #8]
 8003d2a:	6823      	ldr	r3, [r4, #0]
 8003d2c:	4433      	add	r3, r6
 8003d2e:	6023      	str	r3, [r4, #0]
 8003d30:	2000      	movs	r0, #0
 8003d32:	e7db      	b.n	8003cec <__ssputs_r+0x58>
 8003d34:	462a      	mov	r2, r5
 8003d36:	f000 fab9 	bl	80042ac <_realloc_r>
 8003d3a:	4606      	mov	r6, r0
 8003d3c:	2800      	cmp	r0, #0
 8003d3e:	d1e1      	bne.n	8003d04 <__ssputs_r+0x70>
 8003d40:	6921      	ldr	r1, [r4, #16]
 8003d42:	4650      	mov	r0, sl
 8003d44:	f7ff fdee 	bl	8003924 <_free_r>
 8003d48:	e7c7      	b.n	8003cda <__ssputs_r+0x46>
	...

08003d4c <_svfiprintf_r>:
 8003d4c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003d50:	4698      	mov	r8, r3
 8003d52:	898b      	ldrh	r3, [r1, #12]
 8003d54:	061b      	lsls	r3, r3, #24
 8003d56:	b09d      	sub	sp, #116	; 0x74
 8003d58:	4607      	mov	r7, r0
 8003d5a:	460d      	mov	r5, r1
 8003d5c:	4614      	mov	r4, r2
 8003d5e:	d50e      	bpl.n	8003d7e <_svfiprintf_r+0x32>
 8003d60:	690b      	ldr	r3, [r1, #16]
 8003d62:	b963      	cbnz	r3, 8003d7e <_svfiprintf_r+0x32>
 8003d64:	2140      	movs	r1, #64	; 0x40
 8003d66:	f7ff fe49 	bl	80039fc <_malloc_r>
 8003d6a:	6028      	str	r0, [r5, #0]
 8003d6c:	6128      	str	r0, [r5, #16]
 8003d6e:	b920      	cbnz	r0, 8003d7a <_svfiprintf_r+0x2e>
 8003d70:	230c      	movs	r3, #12
 8003d72:	603b      	str	r3, [r7, #0]
 8003d74:	f04f 30ff 	mov.w	r0, #4294967295
 8003d78:	e0d1      	b.n	8003f1e <_svfiprintf_r+0x1d2>
 8003d7a:	2340      	movs	r3, #64	; 0x40
 8003d7c:	616b      	str	r3, [r5, #20]
 8003d7e:	2300      	movs	r3, #0
 8003d80:	9309      	str	r3, [sp, #36]	; 0x24
 8003d82:	2320      	movs	r3, #32
 8003d84:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8003d88:	f8cd 800c 	str.w	r8, [sp, #12]
 8003d8c:	2330      	movs	r3, #48	; 0x30
 8003d8e:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8003f38 <_svfiprintf_r+0x1ec>
 8003d92:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8003d96:	f04f 0901 	mov.w	r9, #1
 8003d9a:	4623      	mov	r3, r4
 8003d9c:	469a      	mov	sl, r3
 8003d9e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8003da2:	b10a      	cbz	r2, 8003da8 <_svfiprintf_r+0x5c>
 8003da4:	2a25      	cmp	r2, #37	; 0x25
 8003da6:	d1f9      	bne.n	8003d9c <_svfiprintf_r+0x50>
 8003da8:	ebba 0b04 	subs.w	fp, sl, r4
 8003dac:	d00b      	beq.n	8003dc6 <_svfiprintf_r+0x7a>
 8003dae:	465b      	mov	r3, fp
 8003db0:	4622      	mov	r2, r4
 8003db2:	4629      	mov	r1, r5
 8003db4:	4638      	mov	r0, r7
 8003db6:	f7ff ff6d 	bl	8003c94 <__ssputs_r>
 8003dba:	3001      	adds	r0, #1
 8003dbc:	f000 80aa 	beq.w	8003f14 <_svfiprintf_r+0x1c8>
 8003dc0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8003dc2:	445a      	add	r2, fp
 8003dc4:	9209      	str	r2, [sp, #36]	; 0x24
 8003dc6:	f89a 3000 	ldrb.w	r3, [sl]
 8003dca:	2b00      	cmp	r3, #0
 8003dcc:	f000 80a2 	beq.w	8003f14 <_svfiprintf_r+0x1c8>
 8003dd0:	2300      	movs	r3, #0
 8003dd2:	f04f 32ff 	mov.w	r2, #4294967295
 8003dd6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8003dda:	f10a 0a01 	add.w	sl, sl, #1
 8003dde:	9304      	str	r3, [sp, #16]
 8003de0:	9307      	str	r3, [sp, #28]
 8003de2:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8003de6:	931a      	str	r3, [sp, #104]	; 0x68
 8003de8:	4654      	mov	r4, sl
 8003dea:	2205      	movs	r2, #5
 8003dec:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003df0:	4851      	ldr	r0, [pc, #324]	; (8003f38 <_svfiprintf_r+0x1ec>)
 8003df2:	f7fc fa15 	bl	8000220 <memchr>
 8003df6:	9a04      	ldr	r2, [sp, #16]
 8003df8:	b9d8      	cbnz	r0, 8003e32 <_svfiprintf_r+0xe6>
 8003dfa:	06d0      	lsls	r0, r2, #27
 8003dfc:	bf44      	itt	mi
 8003dfe:	2320      	movmi	r3, #32
 8003e00:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003e04:	0711      	lsls	r1, r2, #28
 8003e06:	bf44      	itt	mi
 8003e08:	232b      	movmi	r3, #43	; 0x2b
 8003e0a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003e0e:	f89a 3000 	ldrb.w	r3, [sl]
 8003e12:	2b2a      	cmp	r3, #42	; 0x2a
 8003e14:	d015      	beq.n	8003e42 <_svfiprintf_r+0xf6>
 8003e16:	9a07      	ldr	r2, [sp, #28]
 8003e18:	4654      	mov	r4, sl
 8003e1a:	2000      	movs	r0, #0
 8003e1c:	f04f 0c0a 	mov.w	ip, #10
 8003e20:	4621      	mov	r1, r4
 8003e22:	f811 3b01 	ldrb.w	r3, [r1], #1
 8003e26:	3b30      	subs	r3, #48	; 0x30
 8003e28:	2b09      	cmp	r3, #9
 8003e2a:	d94e      	bls.n	8003eca <_svfiprintf_r+0x17e>
 8003e2c:	b1b0      	cbz	r0, 8003e5c <_svfiprintf_r+0x110>
 8003e2e:	9207      	str	r2, [sp, #28]
 8003e30:	e014      	b.n	8003e5c <_svfiprintf_r+0x110>
 8003e32:	eba0 0308 	sub.w	r3, r0, r8
 8003e36:	fa09 f303 	lsl.w	r3, r9, r3
 8003e3a:	4313      	orrs	r3, r2
 8003e3c:	9304      	str	r3, [sp, #16]
 8003e3e:	46a2      	mov	sl, r4
 8003e40:	e7d2      	b.n	8003de8 <_svfiprintf_r+0x9c>
 8003e42:	9b03      	ldr	r3, [sp, #12]
 8003e44:	1d19      	adds	r1, r3, #4
 8003e46:	681b      	ldr	r3, [r3, #0]
 8003e48:	9103      	str	r1, [sp, #12]
 8003e4a:	2b00      	cmp	r3, #0
 8003e4c:	bfbb      	ittet	lt
 8003e4e:	425b      	neglt	r3, r3
 8003e50:	f042 0202 	orrlt.w	r2, r2, #2
 8003e54:	9307      	strge	r3, [sp, #28]
 8003e56:	9307      	strlt	r3, [sp, #28]
 8003e58:	bfb8      	it	lt
 8003e5a:	9204      	strlt	r2, [sp, #16]
 8003e5c:	7823      	ldrb	r3, [r4, #0]
 8003e5e:	2b2e      	cmp	r3, #46	; 0x2e
 8003e60:	d10c      	bne.n	8003e7c <_svfiprintf_r+0x130>
 8003e62:	7863      	ldrb	r3, [r4, #1]
 8003e64:	2b2a      	cmp	r3, #42	; 0x2a
 8003e66:	d135      	bne.n	8003ed4 <_svfiprintf_r+0x188>
 8003e68:	9b03      	ldr	r3, [sp, #12]
 8003e6a:	1d1a      	adds	r2, r3, #4
 8003e6c:	681b      	ldr	r3, [r3, #0]
 8003e6e:	9203      	str	r2, [sp, #12]
 8003e70:	2b00      	cmp	r3, #0
 8003e72:	bfb8      	it	lt
 8003e74:	f04f 33ff 	movlt.w	r3, #4294967295
 8003e78:	3402      	adds	r4, #2
 8003e7a:	9305      	str	r3, [sp, #20]
 8003e7c:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8003f48 <_svfiprintf_r+0x1fc>
 8003e80:	7821      	ldrb	r1, [r4, #0]
 8003e82:	2203      	movs	r2, #3
 8003e84:	4650      	mov	r0, sl
 8003e86:	f7fc f9cb 	bl	8000220 <memchr>
 8003e8a:	b140      	cbz	r0, 8003e9e <_svfiprintf_r+0x152>
 8003e8c:	2340      	movs	r3, #64	; 0x40
 8003e8e:	eba0 000a 	sub.w	r0, r0, sl
 8003e92:	fa03 f000 	lsl.w	r0, r3, r0
 8003e96:	9b04      	ldr	r3, [sp, #16]
 8003e98:	4303      	orrs	r3, r0
 8003e9a:	3401      	adds	r4, #1
 8003e9c:	9304      	str	r3, [sp, #16]
 8003e9e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003ea2:	4826      	ldr	r0, [pc, #152]	; (8003f3c <_svfiprintf_r+0x1f0>)
 8003ea4:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8003ea8:	2206      	movs	r2, #6
 8003eaa:	f7fc f9b9 	bl	8000220 <memchr>
 8003eae:	2800      	cmp	r0, #0
 8003eb0:	d038      	beq.n	8003f24 <_svfiprintf_r+0x1d8>
 8003eb2:	4b23      	ldr	r3, [pc, #140]	; (8003f40 <_svfiprintf_r+0x1f4>)
 8003eb4:	bb1b      	cbnz	r3, 8003efe <_svfiprintf_r+0x1b2>
 8003eb6:	9b03      	ldr	r3, [sp, #12]
 8003eb8:	3307      	adds	r3, #7
 8003eba:	f023 0307 	bic.w	r3, r3, #7
 8003ebe:	3308      	adds	r3, #8
 8003ec0:	9303      	str	r3, [sp, #12]
 8003ec2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003ec4:	4433      	add	r3, r6
 8003ec6:	9309      	str	r3, [sp, #36]	; 0x24
 8003ec8:	e767      	b.n	8003d9a <_svfiprintf_r+0x4e>
 8003eca:	fb0c 3202 	mla	r2, ip, r2, r3
 8003ece:	460c      	mov	r4, r1
 8003ed0:	2001      	movs	r0, #1
 8003ed2:	e7a5      	b.n	8003e20 <_svfiprintf_r+0xd4>
 8003ed4:	2300      	movs	r3, #0
 8003ed6:	3401      	adds	r4, #1
 8003ed8:	9305      	str	r3, [sp, #20]
 8003eda:	4619      	mov	r1, r3
 8003edc:	f04f 0c0a 	mov.w	ip, #10
 8003ee0:	4620      	mov	r0, r4
 8003ee2:	f810 2b01 	ldrb.w	r2, [r0], #1
 8003ee6:	3a30      	subs	r2, #48	; 0x30
 8003ee8:	2a09      	cmp	r2, #9
 8003eea:	d903      	bls.n	8003ef4 <_svfiprintf_r+0x1a8>
 8003eec:	2b00      	cmp	r3, #0
 8003eee:	d0c5      	beq.n	8003e7c <_svfiprintf_r+0x130>
 8003ef0:	9105      	str	r1, [sp, #20]
 8003ef2:	e7c3      	b.n	8003e7c <_svfiprintf_r+0x130>
 8003ef4:	fb0c 2101 	mla	r1, ip, r1, r2
 8003ef8:	4604      	mov	r4, r0
 8003efa:	2301      	movs	r3, #1
 8003efc:	e7f0      	b.n	8003ee0 <_svfiprintf_r+0x194>
 8003efe:	ab03      	add	r3, sp, #12
 8003f00:	9300      	str	r3, [sp, #0]
 8003f02:	462a      	mov	r2, r5
 8003f04:	4b0f      	ldr	r3, [pc, #60]	; (8003f44 <_svfiprintf_r+0x1f8>)
 8003f06:	a904      	add	r1, sp, #16
 8003f08:	4638      	mov	r0, r7
 8003f0a:	f3af 8000 	nop.w
 8003f0e:	1c42      	adds	r2, r0, #1
 8003f10:	4606      	mov	r6, r0
 8003f12:	d1d6      	bne.n	8003ec2 <_svfiprintf_r+0x176>
 8003f14:	89ab      	ldrh	r3, [r5, #12]
 8003f16:	065b      	lsls	r3, r3, #25
 8003f18:	f53f af2c 	bmi.w	8003d74 <_svfiprintf_r+0x28>
 8003f1c:	9809      	ldr	r0, [sp, #36]	; 0x24
 8003f1e:	b01d      	add	sp, #116	; 0x74
 8003f20:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003f24:	ab03      	add	r3, sp, #12
 8003f26:	9300      	str	r3, [sp, #0]
 8003f28:	462a      	mov	r2, r5
 8003f2a:	4b06      	ldr	r3, [pc, #24]	; (8003f44 <_svfiprintf_r+0x1f8>)
 8003f2c:	a904      	add	r1, sp, #16
 8003f2e:	4638      	mov	r0, r7
 8003f30:	f000 f87a 	bl	8004028 <_printf_i>
 8003f34:	e7eb      	b.n	8003f0e <_svfiprintf_r+0x1c2>
 8003f36:	bf00      	nop
 8003f38:	080044dd 	.word	0x080044dd
 8003f3c:	080044e7 	.word	0x080044e7
 8003f40:	00000000 	.word	0x00000000
 8003f44:	08003c95 	.word	0x08003c95
 8003f48:	080044e3 	.word	0x080044e3

08003f4c <_printf_common>:
 8003f4c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003f50:	4616      	mov	r6, r2
 8003f52:	4699      	mov	r9, r3
 8003f54:	688a      	ldr	r2, [r1, #8]
 8003f56:	690b      	ldr	r3, [r1, #16]
 8003f58:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8003f5c:	4293      	cmp	r3, r2
 8003f5e:	bfb8      	it	lt
 8003f60:	4613      	movlt	r3, r2
 8003f62:	6033      	str	r3, [r6, #0]
 8003f64:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8003f68:	4607      	mov	r7, r0
 8003f6a:	460c      	mov	r4, r1
 8003f6c:	b10a      	cbz	r2, 8003f72 <_printf_common+0x26>
 8003f6e:	3301      	adds	r3, #1
 8003f70:	6033      	str	r3, [r6, #0]
 8003f72:	6823      	ldr	r3, [r4, #0]
 8003f74:	0699      	lsls	r1, r3, #26
 8003f76:	bf42      	ittt	mi
 8003f78:	6833      	ldrmi	r3, [r6, #0]
 8003f7a:	3302      	addmi	r3, #2
 8003f7c:	6033      	strmi	r3, [r6, #0]
 8003f7e:	6825      	ldr	r5, [r4, #0]
 8003f80:	f015 0506 	ands.w	r5, r5, #6
 8003f84:	d106      	bne.n	8003f94 <_printf_common+0x48>
 8003f86:	f104 0a19 	add.w	sl, r4, #25
 8003f8a:	68e3      	ldr	r3, [r4, #12]
 8003f8c:	6832      	ldr	r2, [r6, #0]
 8003f8e:	1a9b      	subs	r3, r3, r2
 8003f90:	42ab      	cmp	r3, r5
 8003f92:	dc26      	bgt.n	8003fe2 <_printf_common+0x96>
 8003f94:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8003f98:	1e13      	subs	r3, r2, #0
 8003f9a:	6822      	ldr	r2, [r4, #0]
 8003f9c:	bf18      	it	ne
 8003f9e:	2301      	movne	r3, #1
 8003fa0:	0692      	lsls	r2, r2, #26
 8003fa2:	d42b      	bmi.n	8003ffc <_printf_common+0xb0>
 8003fa4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8003fa8:	4649      	mov	r1, r9
 8003faa:	4638      	mov	r0, r7
 8003fac:	47c0      	blx	r8
 8003fae:	3001      	adds	r0, #1
 8003fb0:	d01e      	beq.n	8003ff0 <_printf_common+0xa4>
 8003fb2:	6823      	ldr	r3, [r4, #0]
 8003fb4:	68e5      	ldr	r5, [r4, #12]
 8003fb6:	6832      	ldr	r2, [r6, #0]
 8003fb8:	f003 0306 	and.w	r3, r3, #6
 8003fbc:	2b04      	cmp	r3, #4
 8003fbe:	bf08      	it	eq
 8003fc0:	1aad      	subeq	r5, r5, r2
 8003fc2:	68a3      	ldr	r3, [r4, #8]
 8003fc4:	6922      	ldr	r2, [r4, #16]
 8003fc6:	bf0c      	ite	eq
 8003fc8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003fcc:	2500      	movne	r5, #0
 8003fce:	4293      	cmp	r3, r2
 8003fd0:	bfc4      	itt	gt
 8003fd2:	1a9b      	subgt	r3, r3, r2
 8003fd4:	18ed      	addgt	r5, r5, r3
 8003fd6:	2600      	movs	r6, #0
 8003fd8:	341a      	adds	r4, #26
 8003fda:	42b5      	cmp	r5, r6
 8003fdc:	d11a      	bne.n	8004014 <_printf_common+0xc8>
 8003fde:	2000      	movs	r0, #0
 8003fe0:	e008      	b.n	8003ff4 <_printf_common+0xa8>
 8003fe2:	2301      	movs	r3, #1
 8003fe4:	4652      	mov	r2, sl
 8003fe6:	4649      	mov	r1, r9
 8003fe8:	4638      	mov	r0, r7
 8003fea:	47c0      	blx	r8
 8003fec:	3001      	adds	r0, #1
 8003fee:	d103      	bne.n	8003ff8 <_printf_common+0xac>
 8003ff0:	f04f 30ff 	mov.w	r0, #4294967295
 8003ff4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003ff8:	3501      	adds	r5, #1
 8003ffa:	e7c6      	b.n	8003f8a <_printf_common+0x3e>
 8003ffc:	18e1      	adds	r1, r4, r3
 8003ffe:	1c5a      	adds	r2, r3, #1
 8004000:	2030      	movs	r0, #48	; 0x30
 8004002:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8004006:	4422      	add	r2, r4
 8004008:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800400c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8004010:	3302      	adds	r3, #2
 8004012:	e7c7      	b.n	8003fa4 <_printf_common+0x58>
 8004014:	2301      	movs	r3, #1
 8004016:	4622      	mov	r2, r4
 8004018:	4649      	mov	r1, r9
 800401a:	4638      	mov	r0, r7
 800401c:	47c0      	blx	r8
 800401e:	3001      	adds	r0, #1
 8004020:	d0e6      	beq.n	8003ff0 <_printf_common+0xa4>
 8004022:	3601      	adds	r6, #1
 8004024:	e7d9      	b.n	8003fda <_printf_common+0x8e>
	...

08004028 <_printf_i>:
 8004028:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800402c:	7e0f      	ldrb	r7, [r1, #24]
 800402e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8004030:	2f78      	cmp	r7, #120	; 0x78
 8004032:	4691      	mov	r9, r2
 8004034:	4680      	mov	r8, r0
 8004036:	460c      	mov	r4, r1
 8004038:	469a      	mov	sl, r3
 800403a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800403e:	d807      	bhi.n	8004050 <_printf_i+0x28>
 8004040:	2f62      	cmp	r7, #98	; 0x62
 8004042:	d80a      	bhi.n	800405a <_printf_i+0x32>
 8004044:	2f00      	cmp	r7, #0
 8004046:	f000 80d8 	beq.w	80041fa <_printf_i+0x1d2>
 800404a:	2f58      	cmp	r7, #88	; 0x58
 800404c:	f000 80a3 	beq.w	8004196 <_printf_i+0x16e>
 8004050:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004054:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8004058:	e03a      	b.n	80040d0 <_printf_i+0xa8>
 800405a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800405e:	2b15      	cmp	r3, #21
 8004060:	d8f6      	bhi.n	8004050 <_printf_i+0x28>
 8004062:	a101      	add	r1, pc, #4	; (adr r1, 8004068 <_printf_i+0x40>)
 8004064:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8004068:	080040c1 	.word	0x080040c1
 800406c:	080040d5 	.word	0x080040d5
 8004070:	08004051 	.word	0x08004051
 8004074:	08004051 	.word	0x08004051
 8004078:	08004051 	.word	0x08004051
 800407c:	08004051 	.word	0x08004051
 8004080:	080040d5 	.word	0x080040d5
 8004084:	08004051 	.word	0x08004051
 8004088:	08004051 	.word	0x08004051
 800408c:	08004051 	.word	0x08004051
 8004090:	08004051 	.word	0x08004051
 8004094:	080041e1 	.word	0x080041e1
 8004098:	08004105 	.word	0x08004105
 800409c:	080041c3 	.word	0x080041c3
 80040a0:	08004051 	.word	0x08004051
 80040a4:	08004051 	.word	0x08004051
 80040a8:	08004203 	.word	0x08004203
 80040ac:	08004051 	.word	0x08004051
 80040b0:	08004105 	.word	0x08004105
 80040b4:	08004051 	.word	0x08004051
 80040b8:	08004051 	.word	0x08004051
 80040bc:	080041cb 	.word	0x080041cb
 80040c0:	682b      	ldr	r3, [r5, #0]
 80040c2:	1d1a      	adds	r2, r3, #4
 80040c4:	681b      	ldr	r3, [r3, #0]
 80040c6:	602a      	str	r2, [r5, #0]
 80040c8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80040cc:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80040d0:	2301      	movs	r3, #1
 80040d2:	e0a3      	b.n	800421c <_printf_i+0x1f4>
 80040d4:	6820      	ldr	r0, [r4, #0]
 80040d6:	6829      	ldr	r1, [r5, #0]
 80040d8:	0606      	lsls	r6, r0, #24
 80040da:	f101 0304 	add.w	r3, r1, #4
 80040de:	d50a      	bpl.n	80040f6 <_printf_i+0xce>
 80040e0:	680e      	ldr	r6, [r1, #0]
 80040e2:	602b      	str	r3, [r5, #0]
 80040e4:	2e00      	cmp	r6, #0
 80040e6:	da03      	bge.n	80040f0 <_printf_i+0xc8>
 80040e8:	232d      	movs	r3, #45	; 0x2d
 80040ea:	4276      	negs	r6, r6
 80040ec:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80040f0:	485e      	ldr	r0, [pc, #376]	; (800426c <_printf_i+0x244>)
 80040f2:	230a      	movs	r3, #10
 80040f4:	e019      	b.n	800412a <_printf_i+0x102>
 80040f6:	680e      	ldr	r6, [r1, #0]
 80040f8:	602b      	str	r3, [r5, #0]
 80040fa:	f010 0f40 	tst.w	r0, #64	; 0x40
 80040fe:	bf18      	it	ne
 8004100:	b236      	sxthne	r6, r6
 8004102:	e7ef      	b.n	80040e4 <_printf_i+0xbc>
 8004104:	682b      	ldr	r3, [r5, #0]
 8004106:	6820      	ldr	r0, [r4, #0]
 8004108:	1d19      	adds	r1, r3, #4
 800410a:	6029      	str	r1, [r5, #0]
 800410c:	0601      	lsls	r1, r0, #24
 800410e:	d501      	bpl.n	8004114 <_printf_i+0xec>
 8004110:	681e      	ldr	r6, [r3, #0]
 8004112:	e002      	b.n	800411a <_printf_i+0xf2>
 8004114:	0646      	lsls	r6, r0, #25
 8004116:	d5fb      	bpl.n	8004110 <_printf_i+0xe8>
 8004118:	881e      	ldrh	r6, [r3, #0]
 800411a:	4854      	ldr	r0, [pc, #336]	; (800426c <_printf_i+0x244>)
 800411c:	2f6f      	cmp	r7, #111	; 0x6f
 800411e:	bf0c      	ite	eq
 8004120:	2308      	moveq	r3, #8
 8004122:	230a      	movne	r3, #10
 8004124:	2100      	movs	r1, #0
 8004126:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800412a:	6865      	ldr	r5, [r4, #4]
 800412c:	60a5      	str	r5, [r4, #8]
 800412e:	2d00      	cmp	r5, #0
 8004130:	bfa2      	ittt	ge
 8004132:	6821      	ldrge	r1, [r4, #0]
 8004134:	f021 0104 	bicge.w	r1, r1, #4
 8004138:	6021      	strge	r1, [r4, #0]
 800413a:	b90e      	cbnz	r6, 8004140 <_printf_i+0x118>
 800413c:	2d00      	cmp	r5, #0
 800413e:	d04d      	beq.n	80041dc <_printf_i+0x1b4>
 8004140:	4615      	mov	r5, r2
 8004142:	fbb6 f1f3 	udiv	r1, r6, r3
 8004146:	fb03 6711 	mls	r7, r3, r1, r6
 800414a:	5dc7      	ldrb	r7, [r0, r7]
 800414c:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8004150:	4637      	mov	r7, r6
 8004152:	42bb      	cmp	r3, r7
 8004154:	460e      	mov	r6, r1
 8004156:	d9f4      	bls.n	8004142 <_printf_i+0x11a>
 8004158:	2b08      	cmp	r3, #8
 800415a:	d10b      	bne.n	8004174 <_printf_i+0x14c>
 800415c:	6823      	ldr	r3, [r4, #0]
 800415e:	07de      	lsls	r6, r3, #31
 8004160:	d508      	bpl.n	8004174 <_printf_i+0x14c>
 8004162:	6923      	ldr	r3, [r4, #16]
 8004164:	6861      	ldr	r1, [r4, #4]
 8004166:	4299      	cmp	r1, r3
 8004168:	bfde      	ittt	le
 800416a:	2330      	movle	r3, #48	; 0x30
 800416c:	f805 3c01 	strble.w	r3, [r5, #-1]
 8004170:	f105 35ff 	addle.w	r5, r5, #4294967295
 8004174:	1b52      	subs	r2, r2, r5
 8004176:	6122      	str	r2, [r4, #16]
 8004178:	f8cd a000 	str.w	sl, [sp]
 800417c:	464b      	mov	r3, r9
 800417e:	aa03      	add	r2, sp, #12
 8004180:	4621      	mov	r1, r4
 8004182:	4640      	mov	r0, r8
 8004184:	f7ff fee2 	bl	8003f4c <_printf_common>
 8004188:	3001      	adds	r0, #1
 800418a:	d14c      	bne.n	8004226 <_printf_i+0x1fe>
 800418c:	f04f 30ff 	mov.w	r0, #4294967295
 8004190:	b004      	add	sp, #16
 8004192:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004196:	4835      	ldr	r0, [pc, #212]	; (800426c <_printf_i+0x244>)
 8004198:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800419c:	6829      	ldr	r1, [r5, #0]
 800419e:	6823      	ldr	r3, [r4, #0]
 80041a0:	f851 6b04 	ldr.w	r6, [r1], #4
 80041a4:	6029      	str	r1, [r5, #0]
 80041a6:	061d      	lsls	r5, r3, #24
 80041a8:	d514      	bpl.n	80041d4 <_printf_i+0x1ac>
 80041aa:	07df      	lsls	r7, r3, #31
 80041ac:	bf44      	itt	mi
 80041ae:	f043 0320 	orrmi.w	r3, r3, #32
 80041b2:	6023      	strmi	r3, [r4, #0]
 80041b4:	b91e      	cbnz	r6, 80041be <_printf_i+0x196>
 80041b6:	6823      	ldr	r3, [r4, #0]
 80041b8:	f023 0320 	bic.w	r3, r3, #32
 80041bc:	6023      	str	r3, [r4, #0]
 80041be:	2310      	movs	r3, #16
 80041c0:	e7b0      	b.n	8004124 <_printf_i+0xfc>
 80041c2:	6823      	ldr	r3, [r4, #0]
 80041c4:	f043 0320 	orr.w	r3, r3, #32
 80041c8:	6023      	str	r3, [r4, #0]
 80041ca:	2378      	movs	r3, #120	; 0x78
 80041cc:	4828      	ldr	r0, [pc, #160]	; (8004270 <_printf_i+0x248>)
 80041ce:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80041d2:	e7e3      	b.n	800419c <_printf_i+0x174>
 80041d4:	0659      	lsls	r1, r3, #25
 80041d6:	bf48      	it	mi
 80041d8:	b2b6      	uxthmi	r6, r6
 80041da:	e7e6      	b.n	80041aa <_printf_i+0x182>
 80041dc:	4615      	mov	r5, r2
 80041de:	e7bb      	b.n	8004158 <_printf_i+0x130>
 80041e0:	682b      	ldr	r3, [r5, #0]
 80041e2:	6826      	ldr	r6, [r4, #0]
 80041e4:	6961      	ldr	r1, [r4, #20]
 80041e6:	1d18      	adds	r0, r3, #4
 80041e8:	6028      	str	r0, [r5, #0]
 80041ea:	0635      	lsls	r5, r6, #24
 80041ec:	681b      	ldr	r3, [r3, #0]
 80041ee:	d501      	bpl.n	80041f4 <_printf_i+0x1cc>
 80041f0:	6019      	str	r1, [r3, #0]
 80041f2:	e002      	b.n	80041fa <_printf_i+0x1d2>
 80041f4:	0670      	lsls	r0, r6, #25
 80041f6:	d5fb      	bpl.n	80041f0 <_printf_i+0x1c8>
 80041f8:	8019      	strh	r1, [r3, #0]
 80041fa:	2300      	movs	r3, #0
 80041fc:	6123      	str	r3, [r4, #16]
 80041fe:	4615      	mov	r5, r2
 8004200:	e7ba      	b.n	8004178 <_printf_i+0x150>
 8004202:	682b      	ldr	r3, [r5, #0]
 8004204:	1d1a      	adds	r2, r3, #4
 8004206:	602a      	str	r2, [r5, #0]
 8004208:	681d      	ldr	r5, [r3, #0]
 800420a:	6862      	ldr	r2, [r4, #4]
 800420c:	2100      	movs	r1, #0
 800420e:	4628      	mov	r0, r5
 8004210:	f7fc f806 	bl	8000220 <memchr>
 8004214:	b108      	cbz	r0, 800421a <_printf_i+0x1f2>
 8004216:	1b40      	subs	r0, r0, r5
 8004218:	6060      	str	r0, [r4, #4]
 800421a:	6863      	ldr	r3, [r4, #4]
 800421c:	6123      	str	r3, [r4, #16]
 800421e:	2300      	movs	r3, #0
 8004220:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004224:	e7a8      	b.n	8004178 <_printf_i+0x150>
 8004226:	6923      	ldr	r3, [r4, #16]
 8004228:	462a      	mov	r2, r5
 800422a:	4649      	mov	r1, r9
 800422c:	4640      	mov	r0, r8
 800422e:	47d0      	blx	sl
 8004230:	3001      	adds	r0, #1
 8004232:	d0ab      	beq.n	800418c <_printf_i+0x164>
 8004234:	6823      	ldr	r3, [r4, #0]
 8004236:	079b      	lsls	r3, r3, #30
 8004238:	d413      	bmi.n	8004262 <_printf_i+0x23a>
 800423a:	68e0      	ldr	r0, [r4, #12]
 800423c:	9b03      	ldr	r3, [sp, #12]
 800423e:	4298      	cmp	r0, r3
 8004240:	bfb8      	it	lt
 8004242:	4618      	movlt	r0, r3
 8004244:	e7a4      	b.n	8004190 <_printf_i+0x168>
 8004246:	2301      	movs	r3, #1
 8004248:	4632      	mov	r2, r6
 800424a:	4649      	mov	r1, r9
 800424c:	4640      	mov	r0, r8
 800424e:	47d0      	blx	sl
 8004250:	3001      	adds	r0, #1
 8004252:	d09b      	beq.n	800418c <_printf_i+0x164>
 8004254:	3501      	adds	r5, #1
 8004256:	68e3      	ldr	r3, [r4, #12]
 8004258:	9903      	ldr	r1, [sp, #12]
 800425a:	1a5b      	subs	r3, r3, r1
 800425c:	42ab      	cmp	r3, r5
 800425e:	dcf2      	bgt.n	8004246 <_printf_i+0x21e>
 8004260:	e7eb      	b.n	800423a <_printf_i+0x212>
 8004262:	2500      	movs	r5, #0
 8004264:	f104 0619 	add.w	r6, r4, #25
 8004268:	e7f5      	b.n	8004256 <_printf_i+0x22e>
 800426a:	bf00      	nop
 800426c:	080044ee 	.word	0x080044ee
 8004270:	080044ff 	.word	0x080044ff

08004274 <__retarget_lock_acquire_recursive>:
 8004274:	4770      	bx	lr

08004276 <__retarget_lock_release_recursive>:
 8004276:	4770      	bx	lr

08004278 <memmove>:
 8004278:	4288      	cmp	r0, r1
 800427a:	b510      	push	{r4, lr}
 800427c:	eb01 0402 	add.w	r4, r1, r2
 8004280:	d902      	bls.n	8004288 <memmove+0x10>
 8004282:	4284      	cmp	r4, r0
 8004284:	4623      	mov	r3, r4
 8004286:	d807      	bhi.n	8004298 <memmove+0x20>
 8004288:	1e43      	subs	r3, r0, #1
 800428a:	42a1      	cmp	r1, r4
 800428c:	d008      	beq.n	80042a0 <memmove+0x28>
 800428e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8004292:	f803 2f01 	strb.w	r2, [r3, #1]!
 8004296:	e7f8      	b.n	800428a <memmove+0x12>
 8004298:	4402      	add	r2, r0
 800429a:	4601      	mov	r1, r0
 800429c:	428a      	cmp	r2, r1
 800429e:	d100      	bne.n	80042a2 <memmove+0x2a>
 80042a0:	bd10      	pop	{r4, pc}
 80042a2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80042a6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80042aa:	e7f7      	b.n	800429c <memmove+0x24>

080042ac <_realloc_r>:
 80042ac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80042b0:	4680      	mov	r8, r0
 80042b2:	4614      	mov	r4, r2
 80042b4:	460e      	mov	r6, r1
 80042b6:	b921      	cbnz	r1, 80042c2 <_realloc_r+0x16>
 80042b8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80042bc:	4611      	mov	r1, r2
 80042be:	f7ff bb9d 	b.w	80039fc <_malloc_r>
 80042c2:	b92a      	cbnz	r2, 80042d0 <_realloc_r+0x24>
 80042c4:	f7ff fb2e 	bl	8003924 <_free_r>
 80042c8:	4625      	mov	r5, r4
 80042ca:	4628      	mov	r0, r5
 80042cc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80042d0:	f000 f81b 	bl	800430a <_malloc_usable_size_r>
 80042d4:	4284      	cmp	r4, r0
 80042d6:	4607      	mov	r7, r0
 80042d8:	d802      	bhi.n	80042e0 <_realloc_r+0x34>
 80042da:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80042de:	d812      	bhi.n	8004306 <_realloc_r+0x5a>
 80042e0:	4621      	mov	r1, r4
 80042e2:	4640      	mov	r0, r8
 80042e4:	f7ff fb8a 	bl	80039fc <_malloc_r>
 80042e8:	4605      	mov	r5, r0
 80042ea:	2800      	cmp	r0, #0
 80042ec:	d0ed      	beq.n	80042ca <_realloc_r+0x1e>
 80042ee:	42bc      	cmp	r4, r7
 80042f0:	4622      	mov	r2, r4
 80042f2:	4631      	mov	r1, r6
 80042f4:	bf28      	it	cs
 80042f6:	463a      	movcs	r2, r7
 80042f8:	f7ff fafe 	bl	80038f8 <memcpy>
 80042fc:	4631      	mov	r1, r6
 80042fe:	4640      	mov	r0, r8
 8004300:	f7ff fb10 	bl	8003924 <_free_r>
 8004304:	e7e1      	b.n	80042ca <_realloc_r+0x1e>
 8004306:	4635      	mov	r5, r6
 8004308:	e7df      	b.n	80042ca <_realloc_r+0x1e>

0800430a <_malloc_usable_size_r>:
 800430a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800430e:	1f18      	subs	r0, r3, #4
 8004310:	2b00      	cmp	r3, #0
 8004312:	bfbc      	itt	lt
 8004314:	580b      	ldrlt	r3, [r1, r0]
 8004316:	18c0      	addlt	r0, r0, r3
 8004318:	4770      	bx	lr
	...

0800431c <_init>:
 800431c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800431e:	bf00      	nop
 8004320:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004322:	bc08      	pop	{r3}
 8004324:	469e      	mov	lr, r3
 8004326:	4770      	bx	lr

08004328 <_fini>:
 8004328:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800432a:	bf00      	nop
 800432c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800432e:	bc08      	pop	{r3}
 8004330:	469e      	mov	lr, r3
 8004332:	4770      	bx	lr
